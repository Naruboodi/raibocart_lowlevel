
raibocart_cr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011478  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08011648  08011648  00021648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d50  08011d50  00030318  2**0
                  CONTENTS
  4 .ARM          00000008  08011d50  08011d50  00021d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d58  08011d58  00030318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011d58  08011d58  00021d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d60  08011d60  00021d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08011d64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  08011f3c  000301d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  08011fdc  00030278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000153c  20000318  0801207c  00030318  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20001854  0801207c  00031854  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY
 15 .debug_info   000227a0  00000000  00000000  0003038b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003d1a  00000000  00000000  00052b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001818  00000000  00000000  00056848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012cc  00000000  00000000  00058060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cca0  00000000  00000000  0005932c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001bd7e  00000000  00000000  00085fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103d2f  00000000  00000000  000a1d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007d14  00000000  00000000  001a5a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000089  00000000  00000000  001ad790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000318 	.word	0x20000318
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011630 	.word	0x08011630

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000031c 	.word	0x2000031c
 800020c:	08011630 	.word	0x08011630

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_ZN3ros22normalizeSecNSecSignedERlS0_>:
#include "ros/duration.h"

namespace ros
{
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  int32_t nsec_part = nsec;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
  int32_t sec_part = sec;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60bb      	str	r3, [r7, #8]

  while (nsec_part > 1000000000L)
 8001046:	e006      	b.n	8001056 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x26>
  {
    nsec_part -= 1000000000L;
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_ZN3ros22normalizeSecNSecSignedERlS0_+0x5c>)
 800104c:	4413      	add	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
    ++sec_part;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3301      	adds	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
  while (nsec_part > 1000000000L)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x60>)
 800105a:	4293      	cmp	r3, r2
 800105c:	dcf4      	bgt.n	8001048 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x18>
  }
  while (nsec_part < 0)
 800105e:	e006      	b.n	800106e <_ZN3ros22normalizeSecNSecSignedERlS0_+0x3e>
  {
    nsec_part += 1000000000L;
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x60>)
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
    --sec_part;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3b01      	subs	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
  while (nsec_part < 0)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	dbf5      	blt.n	8001060 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x30>
  }
  sec = sec_part;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	c4653600 	.word	0xc4653600
 8001090:	3b9aca00 	.word	0x3b9aca00

08001094 <_ZN3ros8DurationC1Ev>:
class Duration
{
public:
  int32_t sec, nsec;

  Duration() : sec(0), nsec(0) {}
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0a5a      	lsrs	r2, r3, #9
 80010c8:	490f      	ldr	r1, [pc, #60]	; (8001108 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010ca:	fba1 1202 	umull	r1, r2, r1, r2
 80010ce:	09d2      	lsrs	r2, r2, #7
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80010d2:	fb01 f202 	mul.w	r2, r1, r2
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0a5b      	lsrs	r3, r3, #9
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	441a      	add	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	00044b83 	.word	0x00044b83
 800110c:	3b9aca00 	.word	0x3b9aca00

08001110 <_ZNK3ros4TimemiERKS0_>:
  nsec = nsec + 1000000000UL - rhs.nsec;
  normalizeSecNSec(sec, nsec);
  return *this;
}

Duration Time::operator-(const Time &rhs) const {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  // Note: Considers wrap around as a continuation of time, e.g.,
  // (0,0) - (0xFFFFFFFF, 0) = (1, 0)
  Duration d;
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff ffb9 	bl	8001094 <_ZN3ros8DurationC1Ev>
  d.sec = sec > rhs.sec ? sec - rhs.sec : -(rhs.sec - sec);
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	461a      	mov	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]
  d.nsec = nsec > rhs.nsec ? nsec - rhs.nsec : -(rhs.nsec - nsec);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
  normalizeSecNSecSigned(d.sec, d.nsec);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3304      	adds	r3, #4
 8001146:	4619      	mov	r1, r3
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff ff71 	bl	8001030 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return d;
 800114e:	bf00      	nop
}
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0b00 	vstr	d0, [r7]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800116a:	ec43 2b17 	vmov	d7, r2, r3
 800116e:	eeb0 0a47 	vmov.f32	s0, s14
 8001172:	eef0 0a67 	vmov.f32	s1, s15
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_ZNK3ros8Duration5toSecEv>:
  Duration(int32_t _sec, int32_t _nsec) : sec(_sec), nsec(_nsec)
  {
    normalizeSecNSecSigned(sec, nsec);
  }

  double toSec() const
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  {
    return (double)sec + 1e-9 * (double)nsec;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9e9 	bl	8000564 <__aeabi_i2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9e2 	bl	8000564 <__aeabi_i2d>
 80011a0:	a30b      	add	r3, pc, #44	; (adr r3, 80011d0 <_ZNK3ros8Duration5toSecEv+0x50>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fa47 	bl	8000638 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff f88b 	bl	80002cc <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ec43 2b17 	vmov	d7, r2, r3
  };
 80011be:	eeb0 0a47 	vmov.f32	s0, s14
 80011c2:	eef0 0a67 	vmov.f32	s1, s15
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bdb0      	pop	{r4, r5, r7, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	e826d695 	.word	0xe826d695
 80011d4:	3e112e0b 	.word	0x3e112e0b

080011d8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <_ZN3ros3MsgC1Ev+0x1c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	080118f4 	.word	0x080118f4

0800121c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
      data()
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffe8 	bl	80011fc <_ZN3ros3MsgC1Ev>
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffce 	bl	80011d8 <_ZN3ros4TimeC1Ev>
    {
    }
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	080118dc 	.word	0x080118dc

0800124c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6859      	ldr	r1, [r3, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	0a19      	lsrs	r1, r3, #8
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	4413      	add	r3, r2
 8001276:	b2ca      	uxtb	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	0c19      	lsrs	r1, r3, #16
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3302      	adds	r3, #2
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	b2ca      	uxtb	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	0e19      	lsrs	r1, r3, #24
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3303      	adds	r3, #3
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	4413      	add	r3, r2
 800129a:	b2ca      	uxtb	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3304      	adds	r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6899      	ldr	r1, [r3, #8]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	0a19      	lsrs	r1, r3, #8
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2ca      	uxtb	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	0c19      	lsrs	r1, r3, #16
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3302      	adds	r3, #2
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0e19      	lsrs	r1, r3, #24
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3303      	adds	r3, #3
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	b2ca      	uxtb	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3304      	adds	r3, #4
 80012ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80012ee:	68fb      	ldr	r3, [r7, #12]
    }
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3301      	adds	r3, #1
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	440b      	add	r3, r1
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3302      	adds	r3, #2
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	440b      	add	r3, r1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3303      	adds	r3, #3
 800134c:	6839      	ldr	r1, [r7, #0]
 800134e:	440b      	add	r3, r1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	061b      	lsls	r3, r3, #24
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	440b      	add	r3, r1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3302      	adds	r3, #2
 800138c:	6839      	ldr	r1, [r7, #0]
 800138e:	440b      	add	r3, r1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3303      	adds	r3, #3
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	440b      	add	r3, r1
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	061b      	lsls	r3, r3, #24
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3304      	adds	r3, #4
 80013b4:	60fb      	str	r3, [r7, #12]
     return offset;
 80013b6:	68fb      	ldr	r3, [r7, #12]
    }
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	08011648 	.word	0x08011648

080013e0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	08011658 	.word	0x08011658

080013fc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fef8 	bl	80011fc <_ZN3ros3MsgC1Ev>
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800141c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001422:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001428:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
    {
    }
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	080118c4 	.word	0x080118c4
 8001440:	0801167c 	.word	0x0801167c

08001444 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	8899      	ldrh	r1, [r3, #4]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	4413      	add	r3, r2
 800145c:	b2ca      	uxtb	r2, r1
 800145e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	b299      	uxth	r1, r3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	3301      	adds	r3, #1
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	4413      	add	r3, r2
 8001470:	b2ca      	uxtb	r2, r1
 8001472:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	3302      	adds	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ff16 	bl	80002b0 <strlen>
 8001484:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	69b9      	ldr	r1, [r7, #24]
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fb63 	bl	8005b5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3304      	adds	r3, #4
 8001498:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	18d0      	adds	r0, r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4619      	mov	r1, r3
 80014a8:	f00c fd37 	bl	800df1a <memcpy>
      offset += length_topic_name;
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4413      	add	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fef9 	bl	80002b0 <strlen>
 80014be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	6979      	ldr	r1, [r7, #20]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fb46 	bl	8005b5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	18d0      	adds	r0, r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f00c fd1a 	bl	800df1a <memcpy>
      offset += length_message_type;
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	4413      	add	r3, r2
 80014ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fedc 	bl	80002b0 <strlen>
 80014f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	6939      	ldr	r1, [r7, #16]
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fb29 	bl	8005b5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	3304      	adds	r3, #4
 800150c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	18d0      	adds	r0, r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4619      	mov	r1, r3
 800151c:	f00c fcfd 	bl	800df1a <memcpy>
      offset += length_md5sum;
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	0a19      	lsrs	r1, r3, #8
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3301      	adds	r3, #1
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0c19      	lsrs	r1, r3, #16
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3302      	adds	r3, #2
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4413      	add	r3, r2
 8001556:	b2ca      	uxtb	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	0e19      	lsrs	r1, r3, #24
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3303      	adds	r3, #3
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001570:	69fb      	ldr	r3, [r7, #28]
    }
 8001572:	4618      	mov	r0, r3
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800157a:	b580      	push	{r7, lr}
 800157c:	b08a      	sub	sp, #40	; 0x28
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b29a      	uxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	889b      	ldrh	r3, [r3, #4]
 800159a:	b21a      	sxth	r2, r3
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	6839      	ldr	r1, [r7, #0]
 80015a2:	440b      	add	r3, r1
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	3302      	adds	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	441a      	add	r2, r3
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fae6 	bl	8005b98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	3304      	adds	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e00b      	b.n	80015f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	441a      	add	r2, r3
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	3b01      	subs	r3, #1
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	440b      	add	r3, r1
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	3301      	adds	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	4413      	add	r3, r2
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d3ed      	bcc.n	80015d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	3b01      	subs	r3, #1
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	3b01      	subs	r3, #1
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	441a      	add	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4413      	add	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	441a      	add	r2, r3
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fab3 	bl	8005b98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	3304      	adds	r3, #4
 8001636:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	e00b      	b.n	8001656 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	441a      	add	r2, r3
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	3b01      	subs	r3, #1
 8001648:	6839      	ldr	r1, [r7, #0]
 800164a:	440b      	add	r3, r1
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	3301      	adds	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4413      	add	r3, r2
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	429a      	cmp	r2, r3
 8001660:	d3ed      	bcc.n	800163e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4413      	add	r3, r2
 8001668:	3b01      	subs	r3, #1
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	4413      	add	r3, r2
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	3b01      	subs	r3, #1
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	441a      	add	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4413      	add	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	441a      	add	r2, r3
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f004 fa80 	bl	8005b98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	3304      	adds	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e00b      	b.n	80016bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	441a      	add	r2, r3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	440b      	add	r3, r1
 80016b2:	7812      	ldrb	r2, [r2, #0]
 80016b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d3ed      	bcc.n	80016a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	3b01      	subs	r3, #1
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	3b01      	subs	r3, #1
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	441a      	add	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	440a      	add	r2, r1
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	3301      	adds	r3, #1
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	440b      	add	r3, r1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	4313      	orrs	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	3302      	adds	r3, #2
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	4313      	orrs	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	3303      	adds	r3, #3
 8001728:	6839      	ldr	r1, [r7, #0]
 800172a:	440b      	add	r3, r1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	4313      	orrs	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3304      	adds	r3, #4
 800173e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001740:	69bb      	ldr	r3, [r7, #24]
    }
 8001742:	4618      	mov	r0, r3
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	08011680 	.word	0x08011680

08001768 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	0801169c 	.word	0x0801169c

08001784 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fd34 	bl	80011fc <_ZN3ros3MsgC1Ev>
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	601a      	str	r2, [r3, #0]
      level(0),
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	711a      	strb	r2, [r3, #4]
      msg("")
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80017a4:	609a      	str	r2, [r3, #8]
    {
    }
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	080118ac 	.word	0x080118ac
 80017b4:	0801167c 	.word	0x0801167c

080017b8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	7912      	ldrb	r2, [r2, #4]
 80017d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fd67 	bl	80002b0 <strlen>
 80017e2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 f9b4 	bl	8005b5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3304      	adds	r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	18d0      	adds	r0, r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4619      	mov	r1, r3
 8001806:	f00c fb88 	bl	800df1a <memcpy>
      offset += length_msg;
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
      return offset;
 8001812:	68fb      	ldr	r3, [r7, #12]
    }
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	4413      	add	r3, r2
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3301      	adds	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	441a      	add	r2, r3
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f004 f9a5 	bl	8005b98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	3304      	adds	r3, #4
 8001852:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00b      	b.n	8001872 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	441a      	add	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3b01      	subs	r3, #1
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	440b      	add	r3, r1
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	429a      	cmp	r2, r3
 800187c:	d3ed      	bcc.n	800185a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	3b01      	subs	r3, #1
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	3b01      	subs	r3, #1
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	441a      	add	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
     return offset;
 80018a2:	693b      	ldr	r3, [r7, #16]
    }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	080116c0 	.word	0x080116c0

080018c8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	080116d4 	.word	0x080116d4

080018e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc84 	bl	80011fc <_ZN3ros3MsgC1Ev>
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	08011894 	.word	0x08011894

08001940 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	0a19      	lsrs	r1, r3, #8
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	0c19      	lsrs	r1, r3, #16
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3302      	adds	r3, #2
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	b2ca      	uxtb	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	0e19      	lsrs	r1, r3, #24
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	3303      	adds	r3, #3
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	b2ca      	uxtb	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	3304      	adds	r3, #4
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	e02a      	b.n	80019f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80019ac:	6939      	ldr	r1, [r7, #16]
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	0a19      	lsrs	r1, r3, #8
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3301      	adds	r3, #1
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	0c19      	lsrs	r1, r3, #16
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	3302      	adds	r3, #2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	b2ca      	uxtb	r2, r1
 80019d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	0e19      	lsrs	r1, r3, #24
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	3303      	adds	r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	b2ca      	uxtb	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	3304      	adds	r3, #4
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	3301      	adds	r3, #1
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3cf      	bcc.n	800199e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6919      	ldr	r1, [r3, #16]
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	0a19      	lsrs	r1, r3, #8
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3301      	adds	r3, #1
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b2ca      	uxtb	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	0c19      	lsrs	r1, r3, #16
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	3302      	adds	r3, #2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	0e19      	lsrs	r1, r3, #24
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3303      	adds	r3, #3
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b2ca      	uxtb	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3304      	adds	r3, #4
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	e02a      	b.n	8001aa4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	b2ca      	uxtb	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	0a19      	lsrs	r1, r3, #8
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	3301      	adds	r3, #1
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2ca      	uxtb	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	0c19      	lsrs	r1, r3, #16
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3302      	adds	r3, #2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	b2ca      	uxtb	r2, r1
 8001a86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	0e19      	lsrs	r1, r3, #24
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	3303      	adds	r3, #3
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	b2ca      	uxtb	r2, r1
 8001a96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3cf      	bcc.n	8001a4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69d9      	ldr	r1, [r3, #28]
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2ca      	uxtb	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	0a19      	lsrs	r1, r3, #8
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b2ca      	uxtb	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	0c19      	lsrs	r1, r3, #16
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	b2ca      	uxtb	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	0e19      	lsrs	r1, r3, #24
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3303      	adds	r3, #3
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	3304      	adds	r3, #4
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	e027      	b.n	8001b4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fbd0 	bl	80002b0 <strlen>
 8001b10:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f81d 	bl	8005b5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	3304      	adds	r3, #4
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	18d0      	adds	r0, r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f00c f9ed 	bl	800df1a <memcpy>
      offset += length_stringsi;
 8001b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	4413      	add	r3, r2
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3d2      	bcc.n	8001afe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b08e      	sub	sp, #56	; 0x38
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	6a3a      	ldr	r2, [r7, #32]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	3302      	adds	r3, #2
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	6a3a      	ldr	r2, [r7, #32]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	6a3a      	ldr	r2, [r7, #32]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d90a      	bls.n	8001bd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f00b f952 	bl	800ce74 <realloc>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001bdc:	2300      	movs	r3, #0
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
 8001be0:	e035      	b.n	8001c4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	440a      	add	r2, r1
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	440b      	add	r3, r1
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	440b      	add	r3, r1
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	3303      	adds	r3, #3
 8001c1e:	6839      	ldr	r1, [r7, #0]
 8001c20:	440b      	add	r3, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	3304      	adds	r3, #4
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d3c4      	bcc.n	8001be2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	3301      	adds	r3, #1
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	3302      	adds	r3, #2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c88:	3303      	adds	r3, #3
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d90a      	bls.n	8001cbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f00b f8de 	bl	800ce74 <realloc>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc8:	e035      	b.n	8001d36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	440a      	add	r2, r1
 8001cd6:	7812      	ldrb	r2, [r2, #0]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d04:	3303      	adds	r3, #3
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	440b      	add	r3, r1
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	3214      	adds	r2, #20
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	3301      	adds	r3, #1
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3c4      	bcc.n	8001cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	3302      	adds	r3, #2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d70:	3303      	adds	r3, #3
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	3304      	adds	r3, #4
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d90a      	bls.n	8001da6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f00b f86a 	bl	800ce74 <realloc>
 8001da0:	4602      	mov	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db0:	e03e      	b.n	8001e30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	441a      	add	r2, r3
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 feea 	bl	8005b98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	e00b      	b.n	8001de8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	441a      	add	r2, r3
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	440b      	add	r3, r1
 8001dde:	7812      	ldrb	r2, [r2, #0]
 8001de0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3ed      	bcc.n	8001dd0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	3b01      	subs	r3, #1
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	441a      	add	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	3220      	adds	r2, #32
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3bb      	bcc.n	8001db2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3738      	adds	r7, #56	; 0x38
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	080117e8 	.word	0x080117e8

08001e60 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	080116f8 	.word	0x080116f8

08001e7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68d8      	ldr	r0, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6891      	ldr	r1, [r2, #8]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4798      	blx	r3
 8001ec8:	4603      	mov	r3, r0
  };
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
  }
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <_ZN13STM32HardwareC1Ev+0x34>)
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	200005b0 	.word	0x200005b0

08001f48 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f804 	bl	8001f5e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f72:	4619      	mov	r1, r3
 8001f74:	f009 fa90 	bl	800b498 <HAL_UART_Receive_DMA>
    }
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffa8 	bl	8001eea <_ZN13STM32Hardware10getRdmaIndEv>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	429c      	cmp	r4, r3
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fb0:	1c59      	adds	r1, r3, #1
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    }
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
	...

08001fdc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d108      	bne.n	8002000 <_ZN13STM32Hardware5flushEv+0x24>
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <_ZN13STM32Hardware5flushEv+0xb4>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f083 0301 	eor.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <_ZN13STM32Hardware5flushEv+0x24>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <_ZN13STM32Hardware5flushEv+0x26>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03f      	beq.n	8002086 <_ZN13STM32Hardware5flushEv+0xaa>
        mutex = true;
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002018:	429a      	cmp	r2, r3
 800201a:	d031      	beq.n	8002080 <_ZN13STM32Hardware5flushEv+0xa4>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002028:	429a      	cmp	r2, r3
 800202a:	d20a      	bcs.n	8002042 <_ZN13STM32Hardware5flushEv+0x66>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800203a:	b29b      	uxth	r3, r3
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	b29b      	uxth	r3, r3
 8002040:	e006      	b.n	8002050 <_ZN13STM32Hardware5flushEv+0x74>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002048:	b29b      	uxth	r3, r3
 800204a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800204e:	b29b      	uxth	r3, r3
 8002050:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800205c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	89fa      	ldrh	r2, [r7, #14]
 8002066:	4619      	mov	r1, r3
 8002068:	f009 f99a 	bl	800b3a0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	4413      	add	r3, r2
 8002076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
      }
    }
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000334 	.word	0x20000334

08002094 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
      int n = length;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020aa:	bfa8      	it	ge
 80020ac:	f44f 7300 	movge.w	r3, #512	; 0x200
 80020b0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020b8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4293      	cmp	r3, r2
 80020c0:	bf28      	it	cs
 80020c2:	4613      	movcs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	4618      	mov	r0, r3
 80020da:	f00b ff1e 	bl	800df1a <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4413      	add	r3, r2
 80020e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d00b      	beq.n	8002112 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	18d1      	adds	r1, r2, r3
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	461a      	mov	r2, r3
 800210e:	f00b ff04 	bl	800df1a <memcpy>
      }

      flush();
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff ff62 	bl	8001fdc <_ZN13STM32Hardware5flushEv>
    }
 8002118:	bf00      	nop
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	f005 f852 	bl	80071d0 <HAL_GetTick>
 800212c:	4603      	mov	r3, r0
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <_ZN10raibo_msgs8speed_fbC1Ev>:
      typedef double _steering_rpm_fb_type;
      _steering_rpm_fb_type steering_rpm_fb;
      typedef bool _forward_motor_type;
      _forward_motor_type forward_motor;

    speed_fb():
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
      bldc_mps_fb(0),
      bldc_kmph_fb(0),
      steering_angle_sp(0),
      steering_angular_fb(0),
      steering_rpm_fb(0),
      forward_motor(0)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff f85a 	bl	80011fc <_ZN3ros3MsgC1Ev>
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <_ZN10raibo_msgs8speed_fbC1Ev+0x8c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	601a      	str	r2, [r3, #0]
      bldc_rpm_sp(0),
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9c1 2302 	strd	r2, r3, [r1, #8]
      bldc_rpm_fb(0),
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9c1 2304 	strd	r2, r3, [r1, #16]
      bldc_mps_fb(0),
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9c1 2306 	strd	r2, r3, [r1, #24]
      bldc_kmph_fb(0),
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9c1 2308 	strd	r2, r3, [r1, #32]
      steering_angle_sp(0),
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      steering_angular_fb(0),
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
      steering_rpm_fb(0),
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
      forward_motor(0)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    {
    }
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	08011850 	.word	0x08011850

080021c8 <_ZNK10raibo_msgs8speed_fb9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021c8:	b480      	push	{r7}
 80021ca:	b095      	sub	sp, #84	; 0x54
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        double real;
        uint64_t base;
      } u_bldc_rpm_sp;
      u_bldc_rpm_sp.real = this->bldc_rpm_sp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      *(outbuffer + offset + 0) = (u_bldc_rpm_sp.base >> (8 * 0)) & 0xFF;
 80021e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021e6:	6838      	ldr	r0, [r7, #0]
 80021e8:	4401      	add	r1, r0
 80021ea:	b2d3      	uxtb	r3, r2
 80021ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_bldc_rpm_sp.base >> (8 * 1)) & 0xFF;
 80021ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	0a02      	lsrs	r2, r0, #8
 80021fc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002200:	0a0b      	lsrs	r3, r1, #8
 8002202:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002204:	3101      	adds	r1, #1
 8002206:	6838      	ldr	r0, [r7, #0]
 8002208:	4401      	add	r1, r0
 800220a:	b2d3      	uxtb	r3, r2
 800220c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_bldc_rpm_sp.base >> (8 * 2)) & 0xFF;
 800220e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	0c02      	lsrs	r2, r0, #16
 800221c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002220:	0c0b      	lsrs	r3, r1, #16
 8002222:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002224:	3102      	adds	r1, #2
 8002226:	6838      	ldr	r0, [r7, #0]
 8002228:	4401      	add	r1, r0
 800222a:	b2d3      	uxtb	r3, r2
 800222c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_bldc_rpm_sp.base >> (8 * 3)) & 0xFF;
 800222e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	0e02      	lsrs	r2, r0, #24
 800223c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002240:	0e0b      	lsrs	r3, r1, #24
 8002242:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002244:	3103      	adds	r1, #3
 8002246:	6838      	ldr	r0, [r7, #0]
 8002248:	4401      	add	r1, r0
 800224a:	b2d3      	uxtb	r3, r2
 800224c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_bldc_rpm_sp.base >> (8 * 4)) & 0xFF;
 800224e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	000a      	movs	r2, r1
 800225c:	2300      	movs	r3, #0
 800225e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002260:	3104      	adds	r1, #4
 8002262:	6838      	ldr	r0, [r7, #0]
 8002264:	4401      	add	r1, r0
 8002266:	b2d3      	uxtb	r3, r2
 8002268:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_bldc_rpm_sp.base >> (8 * 5)) & 0xFF;
 800226a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	0a0a      	lsrs	r2, r1, #8
 8002278:	2300      	movs	r3, #0
 800227a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800227c:	3105      	adds	r1, #5
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	4401      	add	r1, r0
 8002282:	b2d3      	uxtb	r3, r2
 8002284:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_bldc_rpm_sp.base >> (8 * 6)) & 0xFF;
 8002286:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	0c0a      	lsrs	r2, r1, #16
 8002294:	2300      	movs	r3, #0
 8002296:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002298:	3106      	adds	r1, #6
 800229a:	6838      	ldr	r0, [r7, #0]
 800229c:	4401      	add	r1, r0
 800229e:	b2d3      	uxtb	r3, r2
 80022a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_bldc_rpm_sp.base >> (8 * 7)) & 0xFF;
 80022a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	0e0a      	lsrs	r2, r1, #24
 80022b0:	2300      	movs	r3, #0
 80022b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022b4:	3107      	adds	r1, #7
 80022b6:	6838      	ldr	r0, [r7, #0]
 80022b8:	4401      	add	r1, r0
 80022ba:	b2d3      	uxtb	r3, r2
 80022bc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->bldc_rpm_sp);
 80022be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c0:	3308      	adds	r3, #8
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        double real;
        uint64_t base;
      } u_bldc_rpm_fb;
      u_bldc_rpm_fb.real = this->bldc_rpm_fb;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      *(outbuffer + offset + 0) = (u_bldc_rpm_fb.base >> (8 * 0)) & 0xFF;
 80022ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	4401      	add	r1, r0
 80022d8:	b2d3      	uxtb	r3, r2
 80022da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_bldc_rpm_fb.base >> (8 * 1)) & 0xFF;
 80022dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	0a02      	lsrs	r2, r0, #8
 80022ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022ee:	0a0b      	lsrs	r3, r1, #8
 80022f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022f2:	3101      	adds	r1, #1
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	4401      	add	r1, r0
 80022f8:	b2d3      	uxtb	r3, r2
 80022fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_bldc_rpm_fb.base >> (8 * 2)) & 0xFF;
 80022fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	0c02      	lsrs	r2, r0, #16
 800230a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800230e:	0c0b      	lsrs	r3, r1, #16
 8002310:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002312:	3102      	adds	r1, #2
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	4401      	add	r1, r0
 8002318:	b2d3      	uxtb	r3, r2
 800231a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_bldc_rpm_fb.base >> (8 * 3)) & 0xFF;
 800231c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	0e02      	lsrs	r2, r0, #24
 800232a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800232e:	0e0b      	lsrs	r3, r1, #24
 8002330:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002332:	3103      	adds	r1, #3
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	4401      	add	r1, r0
 8002338:	b2d3      	uxtb	r3, r2
 800233a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_bldc_rpm_fb.base >> (8 * 4)) & 0xFF;
 800233c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	000a      	movs	r2, r1
 800234a:	2300      	movs	r3, #0
 800234c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800234e:	3104      	adds	r1, #4
 8002350:	6838      	ldr	r0, [r7, #0]
 8002352:	4401      	add	r1, r0
 8002354:	b2d3      	uxtb	r3, r2
 8002356:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_bldc_rpm_fb.base >> (8 * 5)) & 0xFF;
 8002358:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	0a0a      	lsrs	r2, r1, #8
 8002366:	2300      	movs	r3, #0
 8002368:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800236a:	3105      	adds	r1, #5
 800236c:	6838      	ldr	r0, [r7, #0]
 800236e:	4401      	add	r1, r0
 8002370:	b2d3      	uxtb	r3, r2
 8002372:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_bldc_rpm_fb.base >> (8 * 6)) & 0xFF;
 8002374:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	0c0a      	lsrs	r2, r1, #16
 8002382:	2300      	movs	r3, #0
 8002384:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002386:	3106      	adds	r1, #6
 8002388:	6838      	ldr	r0, [r7, #0]
 800238a:	4401      	add	r1, r0
 800238c:	b2d3      	uxtb	r3, r2
 800238e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_bldc_rpm_fb.base >> (8 * 7)) & 0xFF;
 8002390:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	0e0a      	lsrs	r2, r1, #24
 800239e:	2300      	movs	r3, #0
 80023a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023a2:	3107      	adds	r1, #7
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	4401      	add	r1, r0
 80023a8:	b2d3      	uxtb	r3, r2
 80023aa:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->bldc_rpm_fb);
 80023ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ae:	3308      	adds	r3, #8
 80023b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        double real;
        uint64_t base;
      } u_bldc_mps_fb;
      u_bldc_mps_fb.real = this->bldc_mps_fb;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      *(outbuffer + offset + 0) = (u_bldc_mps_fb.base >> (8 * 0)) & 0xFF;
 80023bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023c2:	6838      	ldr	r0, [r7, #0]
 80023c4:	4401      	add	r1, r0
 80023c6:	b2d3      	uxtb	r3, r2
 80023c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_bldc_mps_fb.base >> (8 * 1)) & 0xFF;
 80023ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	0a02      	lsrs	r2, r0, #8
 80023d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023dc:	0a0b      	lsrs	r3, r1, #8
 80023de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023e0:	3101      	adds	r1, #1
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	4401      	add	r1, r0
 80023e6:	b2d3      	uxtb	r3, r2
 80023e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_bldc_mps_fb.base >> (8 * 2)) & 0xFF;
 80023ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	0c02      	lsrs	r2, r0, #16
 80023f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023fc:	0c0b      	lsrs	r3, r1, #16
 80023fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002400:	3102      	adds	r1, #2
 8002402:	6838      	ldr	r0, [r7, #0]
 8002404:	4401      	add	r1, r0
 8002406:	b2d3      	uxtb	r3, r2
 8002408:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_bldc_mps_fb.base >> (8 * 3)) & 0xFF;
 800240a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	0e02      	lsrs	r2, r0, #24
 8002418:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800241c:	0e0b      	lsrs	r3, r1, #24
 800241e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002420:	3103      	adds	r1, #3
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	4401      	add	r1, r0
 8002426:	b2d3      	uxtb	r3, r2
 8002428:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_bldc_mps_fb.base >> (8 * 4)) & 0xFF;
 800242a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	000a      	movs	r2, r1
 8002438:	2300      	movs	r3, #0
 800243a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800243c:	3104      	adds	r1, #4
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	4401      	add	r1, r0
 8002442:	b2d3      	uxtb	r3, r2
 8002444:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_bldc_mps_fb.base >> (8 * 5)) & 0xFF;
 8002446:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	0a0a      	lsrs	r2, r1, #8
 8002454:	2300      	movs	r3, #0
 8002456:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002458:	3105      	adds	r1, #5
 800245a:	6838      	ldr	r0, [r7, #0]
 800245c:	4401      	add	r1, r0
 800245e:	b2d3      	uxtb	r3, r2
 8002460:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_bldc_mps_fb.base >> (8 * 6)) & 0xFF;
 8002462:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	0c0a      	lsrs	r2, r1, #16
 8002470:	2300      	movs	r3, #0
 8002472:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002474:	3106      	adds	r1, #6
 8002476:	6838      	ldr	r0, [r7, #0]
 8002478:	4401      	add	r1, r0
 800247a:	b2d3      	uxtb	r3, r2
 800247c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_bldc_mps_fb.base >> (8 * 7)) & 0xFF;
 800247e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	0e0a      	lsrs	r2, r1, #24
 800248c:	2300      	movs	r3, #0
 800248e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002490:	3107      	adds	r1, #7
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	4401      	add	r1, r0
 8002496:	b2d3      	uxtb	r3, r2
 8002498:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->bldc_mps_fb);
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	3308      	adds	r3, #8
 800249e:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        double real;
        uint64_t base;
      } u_bldc_kmph_fb;
      u_bldc_kmph_fb.real = this->bldc_kmph_fb;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      *(outbuffer + offset + 0) = (u_bldc_kmph_fb.base >> (8 * 0)) & 0xFF;
 80024aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80024b0:	6838      	ldr	r0, [r7, #0]
 80024b2:	4401      	add	r1, r0
 80024b4:	b2d3      	uxtb	r3, r2
 80024b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_bldc_kmph_fb.base >> (8 * 1)) & 0xFF;
 80024b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	0a02      	lsrs	r2, r0, #8
 80024c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80024ca:	0a0b      	lsrs	r3, r1, #8
 80024cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80024ce:	3101      	adds	r1, #1
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	4401      	add	r1, r0
 80024d4:	b2d3      	uxtb	r3, r2
 80024d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_bldc_kmph_fb.base >> (8 * 2)) & 0xFF;
 80024d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	0c02      	lsrs	r2, r0, #16
 80024e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024ea:	0c0b      	lsrs	r3, r1, #16
 80024ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80024ee:	3102      	adds	r1, #2
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	4401      	add	r1, r0
 80024f4:	b2d3      	uxtb	r3, r2
 80024f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_bldc_kmph_fb.base >> (8 * 3)) & 0xFF;
 80024f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	0e02      	lsrs	r2, r0, #24
 8002506:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800250a:	0e0b      	lsrs	r3, r1, #24
 800250c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800250e:	3103      	adds	r1, #3
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	4401      	add	r1, r0
 8002514:	b2d3      	uxtb	r3, r2
 8002516:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_bldc_kmph_fb.base >> (8 * 4)) & 0xFF;
 8002518:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	000a      	movs	r2, r1
 8002526:	2300      	movs	r3, #0
 8002528:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800252a:	3104      	adds	r1, #4
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	4401      	add	r1, r0
 8002530:	b2d3      	uxtb	r3, r2
 8002532:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_bldc_kmph_fb.base >> (8 * 5)) & 0xFF;
 8002534:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	0a0a      	lsrs	r2, r1, #8
 8002542:	2300      	movs	r3, #0
 8002544:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002546:	3105      	adds	r1, #5
 8002548:	6838      	ldr	r0, [r7, #0]
 800254a:	4401      	add	r1, r0
 800254c:	b2d3      	uxtb	r3, r2
 800254e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_bldc_kmph_fb.base >> (8 * 6)) & 0xFF;
 8002550:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	0c0a      	lsrs	r2, r1, #16
 800255e:	2300      	movs	r3, #0
 8002560:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002562:	3106      	adds	r1, #6
 8002564:	6838      	ldr	r0, [r7, #0]
 8002566:	4401      	add	r1, r0
 8002568:	b2d3      	uxtb	r3, r2
 800256a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_bldc_kmph_fb.base >> (8 * 7)) & 0xFF;
 800256c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	0e0a      	lsrs	r2, r1, #24
 800257a:	2300      	movs	r3, #0
 800257c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800257e:	3107      	adds	r1, #7
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	4401      	add	r1, r0
 8002584:	b2d3      	uxtb	r3, r2
 8002586:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->bldc_kmph_fb);
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258a:	3308      	adds	r3, #8
 800258c:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        double real;
        uint64_t base;
      } u_steering_angle_sp;
      u_steering_angle_sp.real = this->steering_angle_sp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002594:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_steering_angle_sp.base >> (8 * 0)) & 0xFF;
 8002598:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800259c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	4401      	add	r1, r0
 80025a2:	b2d3      	uxtb	r3, r2
 80025a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_steering_angle_sp.base >> (8 * 1)) & 0xFF;
 80025a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	0a02      	lsrs	r2, r0, #8
 80025b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025b8:	0a0b      	lsrs	r3, r1, #8
 80025ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025bc:	3101      	adds	r1, #1
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	4401      	add	r1, r0
 80025c2:	b2d3      	uxtb	r3, r2
 80025c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_steering_angle_sp.base >> (8 * 2)) & 0xFF;
 80025c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	0c02      	lsrs	r2, r0, #16
 80025d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025d8:	0c0b      	lsrs	r3, r1, #16
 80025da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025dc:	3102      	adds	r1, #2
 80025de:	6838      	ldr	r0, [r7, #0]
 80025e0:	4401      	add	r1, r0
 80025e2:	b2d3      	uxtb	r3, r2
 80025e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_steering_angle_sp.base >> (8 * 3)) & 0xFF;
 80025e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	0e02      	lsrs	r2, r0, #24
 80025f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025f8:	0e0b      	lsrs	r3, r1, #24
 80025fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025fc:	3103      	adds	r1, #3
 80025fe:	6838      	ldr	r0, [r7, #0]
 8002600:	4401      	add	r1, r0
 8002602:	b2d3      	uxtb	r3, r2
 8002604:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_steering_angle_sp.base >> (8 * 4)) & 0xFF;
 8002606:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	000a      	movs	r2, r1
 8002614:	2300      	movs	r3, #0
 8002616:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002618:	3104      	adds	r1, #4
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	4401      	add	r1, r0
 800261e:	b2d3      	uxtb	r3, r2
 8002620:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_steering_angle_sp.base >> (8 * 5)) & 0xFF;
 8002622:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	0a0a      	lsrs	r2, r1, #8
 8002630:	2300      	movs	r3, #0
 8002632:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002634:	3105      	adds	r1, #5
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	4401      	add	r1, r0
 800263a:	b2d3      	uxtb	r3, r2
 800263c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_steering_angle_sp.base >> (8 * 6)) & 0xFF;
 800263e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	0c0a      	lsrs	r2, r1, #16
 800264c:	2300      	movs	r3, #0
 800264e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002650:	3106      	adds	r1, #6
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	4401      	add	r1, r0
 8002656:	b2d3      	uxtb	r3, r2
 8002658:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_steering_angle_sp.base >> (8 * 7)) & 0xFF;
 800265a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	0e0a      	lsrs	r2, r1, #24
 8002668:	2300      	movs	r3, #0
 800266a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800266c:	3107      	adds	r1, #7
 800266e:	6838      	ldr	r0, [r7, #0]
 8002670:	4401      	add	r1, r0
 8002672:	b2d3      	uxtb	r3, r2
 8002674:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->steering_angle_sp);
 8002676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002678:	3308      	adds	r3, #8
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        double real;
        uint64_t base;
      } u_steering_angular_fb;
      u_steering_angular_fb.real = this->steering_angular_fb;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002682:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_steering_angular_fb.base >> (8 * 0)) & 0xFF;
 8002686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	4401      	add	r1, r0
 8002690:	b2d3      	uxtb	r3, r2
 8002692:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_steering_angular_fb.base >> (8 * 1)) & 0xFF;
 8002694:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	0a02      	lsrs	r2, r0, #8
 80026a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026a6:	0a0b      	lsrs	r3, r1, #8
 80026a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026aa:	3101      	adds	r1, #1
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	4401      	add	r1, r0
 80026b0:	b2d3      	uxtb	r3, r2
 80026b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_steering_angular_fb.base >> (8 * 2)) & 0xFF;
 80026b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	0c02      	lsrs	r2, r0, #16
 80026c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026c6:	0c0b      	lsrs	r3, r1, #16
 80026c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026ca:	3102      	adds	r1, #2
 80026cc:	6838      	ldr	r0, [r7, #0]
 80026ce:	4401      	add	r1, r0
 80026d0:	b2d3      	uxtb	r3, r2
 80026d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_steering_angular_fb.base >> (8 * 3)) & 0xFF;
 80026d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	0e02      	lsrs	r2, r0, #24
 80026e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026e6:	0e0b      	lsrs	r3, r1, #24
 80026e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026ea:	3103      	adds	r1, #3
 80026ec:	6838      	ldr	r0, [r7, #0]
 80026ee:	4401      	add	r1, r0
 80026f0:	b2d3      	uxtb	r3, r2
 80026f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_steering_angular_fb.base >> (8 * 4)) & 0xFF;
 80026f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	000a      	movs	r2, r1
 8002702:	2300      	movs	r3, #0
 8002704:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002706:	3104      	adds	r1, #4
 8002708:	6838      	ldr	r0, [r7, #0]
 800270a:	4401      	add	r1, r0
 800270c:	b2d3      	uxtb	r3, r2
 800270e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_steering_angular_fb.base >> (8 * 5)) & 0xFF;
 8002710:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	0a0a      	lsrs	r2, r1, #8
 800271e:	2300      	movs	r3, #0
 8002720:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002722:	3105      	adds	r1, #5
 8002724:	6838      	ldr	r0, [r7, #0]
 8002726:	4401      	add	r1, r0
 8002728:	b2d3      	uxtb	r3, r2
 800272a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_steering_angular_fb.base >> (8 * 6)) & 0xFF;
 800272c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	0c0a      	lsrs	r2, r1, #16
 800273a:	2300      	movs	r3, #0
 800273c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800273e:	3106      	adds	r1, #6
 8002740:	6838      	ldr	r0, [r7, #0]
 8002742:	4401      	add	r1, r0
 8002744:	b2d3      	uxtb	r3, r2
 8002746:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_steering_angular_fb.base >> (8 * 7)) & 0xFF;
 8002748:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	0e0a      	lsrs	r2, r1, #24
 8002756:	2300      	movs	r3, #0
 8002758:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800275a:	3107      	adds	r1, #7
 800275c:	6838      	ldr	r0, [r7, #0]
 800275e:	4401      	add	r1, r0
 8002760:	b2d3      	uxtb	r3, r2
 8002762:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->steering_angular_fb);
 8002764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002766:	3308      	adds	r3, #8
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        double real;
        uint64_t base;
      } u_steering_rpm_fb;
      u_steering_rpm_fb.real = this->steering_rpm_fb;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002770:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_steering_rpm_fb.base >> (8 * 0)) & 0xFF;
 8002774:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002778:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	4401      	add	r1, r0
 800277e:	b2d3      	uxtb	r3, r2
 8002780:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_steering_rpm_fb.base >> (8 * 1)) & 0xFF;
 8002782:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	0a02      	lsrs	r2, r0, #8
 8002790:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002794:	0a0b      	lsrs	r3, r1, #8
 8002796:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002798:	3101      	adds	r1, #1
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	4401      	add	r1, r0
 800279e:	b2d3      	uxtb	r3, r2
 80027a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_steering_rpm_fb.base >> (8 * 2)) & 0xFF;
 80027a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	0c02      	lsrs	r2, r0, #16
 80027b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027b4:	0c0b      	lsrs	r3, r1, #16
 80027b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027b8:	3102      	adds	r1, #2
 80027ba:	6838      	ldr	r0, [r7, #0]
 80027bc:	4401      	add	r1, r0
 80027be:	b2d3      	uxtb	r3, r2
 80027c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_steering_rpm_fb.base >> (8 * 3)) & 0xFF;
 80027c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	0e02      	lsrs	r2, r0, #24
 80027d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027d4:	0e0b      	lsrs	r3, r1, #24
 80027d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027d8:	3103      	adds	r1, #3
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	4401      	add	r1, r0
 80027de:	b2d3      	uxtb	r3, r2
 80027e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_steering_rpm_fb.base >> (8 * 4)) & 0xFF;
 80027e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	000a      	movs	r2, r1
 80027f0:	2300      	movs	r3, #0
 80027f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027f4:	3104      	adds	r1, #4
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	4401      	add	r1, r0
 80027fa:	b2d3      	uxtb	r3, r2
 80027fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_steering_rpm_fb.base >> (8 * 5)) & 0xFF;
 80027fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	0a0a      	lsrs	r2, r1, #8
 800280c:	2300      	movs	r3, #0
 800280e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002810:	3105      	adds	r1, #5
 8002812:	6838      	ldr	r0, [r7, #0]
 8002814:	4401      	add	r1, r0
 8002816:	b2d3      	uxtb	r3, r2
 8002818:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_steering_rpm_fb.base >> (8 * 6)) & 0xFF;
 800281a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	0c0a      	lsrs	r2, r1, #16
 8002828:	2300      	movs	r3, #0
 800282a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800282c:	3106      	adds	r1, #6
 800282e:	6838      	ldr	r0, [r7, #0]
 8002830:	4401      	add	r1, r0
 8002832:	b2d3      	uxtb	r3, r2
 8002834:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_steering_rpm_fb.base >> (8 * 7)) & 0xFF;
 8002836:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	0e0a      	lsrs	r2, r1, #24
 8002844:	2300      	movs	r3, #0
 8002846:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002848:	3107      	adds	r1, #7
 800284a:	6838      	ldr	r0, [r7, #0]
 800284c:	4401      	add	r1, r0
 800284e:	b2d3      	uxtb	r3, r2
 8002850:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->steering_rpm_fb);
 8002852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002854:	3308      	adds	r3, #8
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
      union {
        bool real;
        uint8_t base;
      } u_forward_motor;
      u_forward_motor.real = this->forward_motor;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285e:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_forward_motor.base >> (8 * 0)) & 0xFF;
 8002860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4413      	add	r3, r2
 8002866:	7b3a      	ldrb	r2, [r7, #12]
 8002868:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->forward_motor);
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	3301      	adds	r3, #1
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
      return offset;
 8002870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 8002872:	4618      	mov	r0, r3
 8002874:	3754      	adds	r7, #84	; 0x54
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_ZN10raibo_msgs8speed_fb11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800287e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002882:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8002886:	af00      	add	r7, sp, #0
 8002888:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
 800288c:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
    {
      int offset = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        double real;
        uint64_t base;
      } u_bldc_rpm_sp;
      u_bldc_rpm_sp.base = 0;
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028a2:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 80028a6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80028aa:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	461c      	mov	r4, r3
 80028b8:	4615      	mov	r5, r2
 80028ba:	ea40 0804 	orr.w	r8, r0, r4
 80028be:	ea41 0905 	orr.w	r9, r1, r5
 80028c2:	e9c7 89f8 	strd	r8, r9, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028c6:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 80028ca:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80028d4:	4413      	add	r3, r2
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2200      	movs	r2, #0
 80028dc:	469a      	mov	sl, r3
 80028de:	4693      	mov	fp, r2
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80028ec:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80028f0:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80028f4:	ea40 0402 	orr.w	r4, r0, r2
 80028f8:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 80028fc:	430b      	orrs	r3, r1
 80028fe:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8002902:	e9d7 34e6 	ldrd	r3, r4, [r7, #920]	; 0x398
 8002906:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800290a:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 800290e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002918:	4413      	add	r3, r2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8002924:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 89e4 	ldrd	r8, r9, [r7, #912]	; 0x390
 8002934:	464c      	mov	r4, r9
 8002936:	0423      	lsls	r3, r4, #16
 8002938:	4644      	mov	r4, r8
 800293a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800293e:	4644      	mov	r4, r8
 8002940:	0422      	lsls	r2, r4, #16
 8002942:	ea40 0402 	orr.w	r4, r0, r2
 8002946:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800294a:	430b      	orrs	r3, r1
 800294c:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8002950:	e9d7 34e2 	ldrd	r3, r4, [r7, #904]	; 0x388
 8002954:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002958:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 800295c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002960:	1cda      	adds	r2, r3, #3
 8002962:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2200      	movs	r2, #0
 800296e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8002972:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8002976:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 800297a:	4623      	mov	r3, r4
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8002982:	4623      	mov	r3, r4
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800298a:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 800298e:	4623      	mov	r3, r4
 8002990:	4303      	orrs	r3, r0
 8002992:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8002996:	462b      	mov	r3, r5
 8002998:	430b      	orrs	r3, r1
 800299a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800299e:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 80029a2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80029a6:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 80029aa:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80029ae:	1d1a      	adds	r2, r3, #4
 80029b0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80029b4:	4413      	add	r3, r2
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80029c0:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f8d7 4368 	ldr.w	r4, [r7, #872]	; 0x368
 80029d0:	0023      	movs	r3, r4
 80029d2:	2200      	movs	r2, #0
 80029d4:	ea40 0402 	orr.w	r4, r0, r2
 80029d8:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 80029dc:	430b      	orrs	r3, r1
 80029de:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80029e2:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 80029e6:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029ea:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 80029ee:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80029f2:	1d5a      	adds	r2, r3, #5
 80029f4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80029f8:	4413      	add	r3, r2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8002a04:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	f8d7 4358 	ldr.w	r4, [r7, #856]	; 0x358
 8002a14:	0223      	lsls	r3, r4, #8
 8002a16:	2200      	movs	r2, #0
 8002a18:	ea40 0402 	orr.w	r4, r0, r2
 8002a1c:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 8002a20:	430b      	orrs	r3, r1
 8002a22:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002a26:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 8002a2a:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a2e:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 8002a32:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002a36:	1d9a      	adds	r2, r3, #6
 8002a38:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8002a48:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f8d7 4348 	ldr.w	r4, [r7, #840]	; 0x348
 8002a58:	0423      	lsls	r3, r4, #16
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	ea40 0402 	orr.w	r4, r0, r2
 8002a60:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 8002a64:	430b      	orrs	r3, r1
 8002a66:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8002a6a:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 8002a6e:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
      u_bldc_rpm_sp.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a72:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 8002a76:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002a7a:	1dda      	adds	r2, r3, #7
 8002a7c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8002a8c:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	f8d7 4338 	ldr.w	r4, [r7, #824]	; 0x338
 8002a9c:	0623      	lsls	r3, r4, #24
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	ea40 0402 	orr.w	r4, r0, r2
 8002aa4:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8002aae:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 8002ab2:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
      this->bldc_rpm_sp = u_bldc_rpm_sp.real;
 8002ab6:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 8002aba:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002abe:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->bldc_rpm_sp);
 8002ac2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        double real;
        uint64_t base;
      } u_bldc_rpm_fb;
      u_bldc_rpm_fb.base = 0;
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ad8:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002adc:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002ae0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8002af0:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 8002af4:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8002af8:	4623      	mov	r3, r4
 8002afa:	4303      	orrs	r3, r0
 8002afc:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8002b00:	462b      	mov	r3, r5
 8002b02:	430b      	orrs	r3, r1
 8002b04:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8002b08:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 8002b0c:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b10:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002b14:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002b1e:	4413      	add	r3, r2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8002b2a:	f8c7 231c 	str.w	r2, [r7, #796]	; 0x31c
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 89c6 	ldrd	r8, r9, [r7, #792]	; 0x318
 8002b3a:	464c      	mov	r4, r9
 8002b3c:	0223      	lsls	r3, r4, #8
 8002b3e:	4644      	mov	r4, r8
 8002b40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b44:	4644      	mov	r4, r8
 8002b46:	0222      	lsls	r2, r4, #8
 8002b48:	ea40 0402 	orr.w	r4, r0, r2
 8002b4c:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 8002b50:	430b      	orrs	r3, r1
 8002b52:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002b56:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8002b5a:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b5e:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002b62:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002b66:	1c9a      	adds	r2, r3, #2
 8002b68:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002b6c:	4413      	add	r3, r2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8002b78:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 8002b88:	464c      	mov	r4, r9
 8002b8a:	0423      	lsls	r3, r4, #16
 8002b8c:	4644      	mov	r4, r8
 8002b8e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b92:	4644      	mov	r4, r8
 8002b94:	0422      	lsls	r2, r4, #16
 8002b96:	ea40 0402 	orr.w	r4, r0, r2
 8002b9a:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8002ba4:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8002ba8:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bac:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002bb0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002bb4:	1cda      	adds	r2, r3, #3
 8002bb6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8002bc6:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 8002bca:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 8002bce:	4623      	mov	r3, r4
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8002bde:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 8002be2:	4623      	mov	r3, r4
 8002be4:	4303      	orrs	r3, r0
 8002be6:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8002bea:	462b      	mov	r3, r5
 8002bec:	430b      	orrs	r3, r1
 8002bee:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8002bf2:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 8002bf6:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002bfa:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002bfe:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002c02:	1d1a      	adds	r2, r3, #4
 8002c04:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8002c14:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	f8d7 42e0 	ldr.w	r4, [r7, #736]	; 0x2e0
 8002c24:	0023      	movs	r3, r4
 8002c26:	2200      	movs	r2, #0
 8002c28:	ea40 0402 	orr.w	r4, r0, r2
 8002c2c:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 8002c30:	430b      	orrs	r3, r1
 8002c32:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8002c36:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 8002c3a:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c3e:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002c42:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002c46:	1d5a      	adds	r2, r3, #5
 8002c48:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002c4c:	4413      	add	r3, r2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8002c58:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	f8d7 42d0 	ldr.w	r4, [r7, #720]	; 0x2d0
 8002c68:	0223      	lsls	r3, r4, #8
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	ea40 0402 	orr.w	r4, r0, r2
 8002c70:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 8002c74:	430b      	orrs	r3, r1
 8002c76:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8002c7a:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8002c7e:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c82:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002c86:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002c8a:	1d9a      	adds	r2, r3, #6
 8002c8c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002c90:	4413      	add	r3, r2
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002c9c:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	f8d7 42c0 	ldr.w	r4, [r7, #704]	; 0x2c0
 8002cac:	0423      	lsls	r3, r4, #16
 8002cae:	2200      	movs	r2, #0
 8002cb0:	ea40 0402 	orr.w	r4, r0, r2
 8002cb4:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002cbe:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8002cc2:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      u_bldc_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002cc6:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002cca:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002cce:	1dda      	adds	r2, r3, #7
 8002cd0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8002ce0:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f8d7 42b0 	ldr.w	r4, [r7, #688]	; 0x2b0
 8002cf0:	0623      	lsls	r3, r4, #24
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	ea40 0402 	orr.w	r4, r0, r2
 8002cf8:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8002d02:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 8002d06:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
      this->bldc_rpm_fb = u_bldc_rpm_fb.real;
 8002d0a:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8002d0e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002d12:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->bldc_rpm_fb);
 8002d16:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        double real;
        uint64_t base;
      } u_bldc_mps_fb;
      u_bldc_mps_fb.base = 0;
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d2c:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002d30:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002d34:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8002d44:	f8c7 22a4 	str.w	r2, [r7, #676]	; 0x2a4
 8002d48:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	4303      	orrs	r3, r0
 8002d50:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8002d54:	462b      	mov	r3, r5
 8002d56:	430b      	orrs	r3, r1
 8002d58:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002d5c:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8002d60:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d64:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002d68:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002d7e:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 8002d8e:	464c      	mov	r4, r9
 8002d90:	0223      	lsls	r3, r4, #8
 8002d92:	4644      	mov	r4, r8
 8002d94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d98:	4644      	mov	r4, r8
 8002d9a:	0222      	lsls	r2, r4, #8
 8002d9c:	ea40 0402 	orr.w	r4, r0, r2
 8002da0:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 8002da4:	430b      	orrs	r3, r1
 8002da6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002daa:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8002dae:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002db2:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002db6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002dba:	1c9a      	adds	r2, r3, #2
 8002dbc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002dc0:	4413      	add	r3, r2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002dcc:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 8002ddc:	464c      	mov	r4, r9
 8002dde:	0423      	lsls	r3, r4, #16
 8002de0:	4644      	mov	r4, r8
 8002de2:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002de6:	4644      	mov	r4, r8
 8002de8:	0422      	lsls	r2, r4, #16
 8002dea:	ea40 0402 	orr.w	r4, r0, r2
 8002dee:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 8002df2:	430b      	orrs	r3, r1
 8002df4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8002df8:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 8002dfc:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e00:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002e04:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002e08:	1cda      	adds	r2, r3, #3
 8002e0a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002e1a:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 8002e1e:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8002e22:	4623      	mov	r3, r4
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8002e32:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8002e36:	4623      	mov	r3, r4
 8002e38:	4303      	orrs	r3, r0
 8002e3a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002e3e:	462b      	mov	r3, r5
 8002e40:	430b      	orrs	r3, r1
 8002e42:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8002e46:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 8002e4a:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e4e:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002e52:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002e56:	1d1a      	adds	r2, r3, #4
 8002e58:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8002e68:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	f8d7 4258 	ldr.w	r4, [r7, #600]	; 0x258
 8002e78:	0023      	movs	r3, r4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	ea40 0402 	orr.w	r4, r0, r2
 8002e80:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 8002e84:	430b      	orrs	r3, r1
 8002e86:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8002e8a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8002e8e:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e92:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002e96:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002e9a:	1d5a      	adds	r2, r3, #5
 8002e9c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002ea0:	4413      	add	r3, r2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8002eac:	f8c7 224c 	str.w	r2, [r7, #588]	; 0x24c
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f8d7 4248 	ldr.w	r4, [r7, #584]	; 0x248
 8002ebc:	0223      	lsls	r3, r4, #8
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	ea40 0402 	orr.w	r4, r0, r2
 8002ec4:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8002ece:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8002ed2:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ed6:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002eda:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002ede:	1d9a      	adds	r2, r3, #6
 8002ee0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002ef0:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	f8d7 4238 	ldr.w	r4, [r7, #568]	; 0x238
 8002f00:	0423      	lsls	r3, r4, #16
 8002f02:	2200      	movs	r2, #0
 8002f04:	ea40 0402 	orr.w	r4, r0, r2
 8002f08:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8002f12:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8002f16:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      u_bldc_mps_fb.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f1a:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002f1e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002f22:	1dda      	adds	r2, r3, #7
 8002f24:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002f34:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	f8d7 4228 	ldr.w	r4, [r7, #552]	; 0x228
 8002f44:	0623      	lsls	r3, r4, #24
 8002f46:	2200      	movs	r2, #0
 8002f48:	ea40 0402 	orr.w	r4, r0, r2
 8002f4c:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 8002f50:	430b      	orrs	r3, r1
 8002f52:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002f56:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8002f5a:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
      this->bldc_mps_fb = u_bldc_mps_fb.real;
 8002f5e:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8002f62:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002f66:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->bldc_mps_fb);
 8002f6a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002f6e:	3308      	adds	r3, #8
 8002f70:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        double real;
        uint64_t base;
      } u_bldc_kmph_fb;
      u_bldc_kmph_fb.base = 0;
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f80:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8002f84:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002f88:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002f8c:	4413      	add	r3, r2
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002f98:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8002f9c:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	4303      	orrs	r3, r0
 8002fa4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002fa8:	462b      	mov	r3, r5
 8002faa:	430b      	orrs	r3, r1
 8002fac:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8002fb0:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8002fb4:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fb8:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8002fbc:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8002fd2:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 8982 	ldrd	r8, r9, [r7, #520]	; 0x208
 8002fe2:	464c      	mov	r4, r9
 8002fe4:	0223      	lsls	r3, r4, #8
 8002fe6:	4644      	mov	r4, r8
 8002fe8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fec:	4644      	mov	r4, r8
 8002fee:	0222      	lsls	r2, r4, #8
 8002ff0:	ea40 0402 	orr.w	r4, r0, r2
 8002ff4:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002ffe:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8003002:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003006:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800300a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800300e:	1c9a      	adds	r2, r3, #2
 8003010:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8003020:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8003030:	464c      	mov	r4, r9
 8003032:	0423      	lsls	r3, r4, #16
 8003034:	4644      	mov	r4, r8
 8003036:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800303a:	4644      	mov	r4, r8
 800303c:	0422      	lsls	r2, r4, #16
 800303e:	ea40 0402 	orr.w	r4, r0, r2
 8003042:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8003046:	430b      	orrs	r3, r1
 8003048:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800304c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8003050:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003054:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8003058:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800305c:	1cda      	adds	r2, r3, #3
 800305e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2200      	movs	r2, #0
 800306a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800306e:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8003072:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8003076:	4623      	mov	r3, r4
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800307e:	4623      	mov	r3, r4
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003086:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 800308a:	4623      	mov	r3, r4
 800308c:	4303      	orrs	r3, r0
 800308e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003092:	462b      	mov	r3, r5
 8003094:	430b      	orrs	r3, r1
 8003096:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800309a:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800309e:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80030a2:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 80030a6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80030aa:	1d1a      	adds	r2, r3, #4
 80030ac:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80030bc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 80030cc:	0023      	movs	r3, r4
 80030ce:	2200      	movs	r2, #0
 80030d0:	ea40 0402 	orr.w	r4, r0, r2
 80030d4:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 80030d8:	430b      	orrs	r3, r1
 80030da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80030de:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 80030e2:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80030e6:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 80030ea:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80030ee:	1d5a      	adds	r2, r3, #5
 80030f0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80030f4:	4413      	add	r3, r2
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003100:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 8003110:	0223      	lsls	r3, r4, #8
 8003112:	2200      	movs	r2, #0
 8003114:	ea40 0402 	orr.w	r4, r0, r2
 8003118:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800311c:	430b      	orrs	r3, r1
 800311e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003122:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8003126:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800312a:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800312e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003132:	1d9a      	adds	r2, r3, #6
 8003134:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003144:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8003154:	0423      	lsls	r3, r4, #16
 8003156:	2200      	movs	r2, #0
 8003158:	ea40 0402 	orr.w	r4, r0, r2
 800315c:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8003160:	430b      	orrs	r3, r1
 8003162:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003166:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800316a:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      u_bldc_kmph_fb.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800316e:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8003172:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003176:	1dda      	adds	r2, r3, #7
 8003178:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800317c:	4413      	add	r3, r2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003188:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 8003198:	0623      	lsls	r3, r4, #24
 800319a:	2200      	movs	r2, #0
 800319c:	ea40 0402 	orr.w	r4, r0, r2
 80031a0:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 80031a4:	430b      	orrs	r3, r1
 80031a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80031aa:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 80031ae:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
      this->bldc_kmph_fb = u_bldc_kmph_fb.real;
 80031b2:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 80031b6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80031ba:	e9c3 0108 	strd	r0, r1, [r3, #32]
      offset += sizeof(this->bldc_kmph_fb);
 80031be:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80031c2:	3308      	adds	r3, #8
 80031c4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        double real;
        uint64_t base;
      } u_steering_angle_sp;
      u_steering_angle_sp.base = 0;
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031d4:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 80031d8:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80031dc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80031ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80031f0:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80031f4:	4623      	mov	r3, r4
 80031f6:	4303      	orrs	r3, r0
 80031f8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80031fc:	462b      	mov	r3, r5
 80031fe:	430b      	orrs	r3, r1
 8003200:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003204:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8003208:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800320c:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 8003210:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2200      	movs	r2, #0
 8003222:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003226:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8003236:	464c      	mov	r4, r9
 8003238:	0223      	lsls	r3, r4, #8
 800323a:	4644      	mov	r4, r8
 800323c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003240:	4644      	mov	r4, r8
 8003242:	0222      	lsls	r2, r4, #8
 8003244:	ea40 0402 	orr.w	r4, r0, r2
 8003248:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800324c:	430b      	orrs	r3, r1
 800324e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003252:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003256:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800325a:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 800325e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003274:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003284:	464c      	mov	r4, r9
 8003286:	0423      	lsls	r3, r4, #16
 8003288:	4644      	mov	r4, r8
 800328a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800328e:	4644      	mov	r4, r8
 8003290:	0422      	lsls	r2, r4, #16
 8003292:	ea40 0402 	orr.w	r4, r0, r2
 8003296:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800329a:	430b      	orrs	r3, r1
 800329c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80032a0:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80032a4:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032a8:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 80032ac:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80032b0:	1cda      	adds	r2, r3, #3
 80032b2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80032b6:	4413      	add	r3, r2
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80032c2:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80032c6:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80032ca:	4623      	mov	r3, r4
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80032d2:	4623      	mov	r3, r4
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80032da:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80032de:	4623      	mov	r3, r4
 80032e0:	4303      	orrs	r3, r0
 80032e2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032e6:	462b      	mov	r3, r5
 80032e8:	430b      	orrs	r3, r1
 80032ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032ee:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80032f2:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80032f6:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 80032fa:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80032fe:	1d1a      	adds	r2, r3, #4
 8003300:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003310:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003320:	0023      	movs	r3, r4
 8003322:	2200      	movs	r2, #0
 8003324:	ea40 0402 	orr.w	r4, r0, r2
 8003328:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800332c:	430b      	orrs	r3, r1
 800332e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003332:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003336:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800333a:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 800333e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003342:	1d5a      	adds	r2, r3, #5
 8003344:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003354:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003364:	0223      	lsls	r3, r4, #8
 8003366:	2200      	movs	r2, #0
 8003368:	ea40 0402 	orr.w	r4, r0, r2
 800336c:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003370:	430b      	orrs	r3, r1
 8003372:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003376:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800337a:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800337e:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 8003382:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003386:	1d9a      	adds	r2, r3, #6
 8003388:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800338c:	4413      	add	r3, r2
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003398:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80033a8:	0423      	lsls	r3, r4, #16
 80033aa:	2200      	movs	r2, #0
 80033ac:	ea40 0402 	orr.w	r4, r0, r2
 80033b0:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80033b4:	430b      	orrs	r3, r1
 80033b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033ba:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80033be:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      u_steering_angle_sp.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033c2:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 80033c6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80033ca:	1dda      	adds	r2, r3, #7
 80033cc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80033d0:	4413      	add	r3, r2
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80033dc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80033ec:	0623      	lsls	r3, r4, #24
 80033ee:	2200      	movs	r2, #0
 80033f0:	ea40 0402 	orr.w	r4, r0, r2
 80033f4:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80033f8:	430b      	orrs	r3, r1
 80033fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80033fe:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003402:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
      this->steering_angle_sp = u_steering_angle_sp.real;
 8003406:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 800340a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800340e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
      offset += sizeof(this->steering_angle_sp);
 8003412:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003416:	3308      	adds	r3, #8
 8003418:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        double real;
        uint64_t base;
      } u_steering_angular_fb;
      u_steering_angular_fb.base = 0;
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003428:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 800342c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8003430:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003440:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003444:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003448:	4623      	mov	r3, r4
 800344a:	4303      	orrs	r3, r0
 800344c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003450:	462b      	mov	r3, r5
 8003452:	430b      	orrs	r3, r1
 8003454:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003458:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800345c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003460:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8003464:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800346e:	4413      	add	r3, r2
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800347a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800348a:	464c      	mov	r4, r9
 800348c:	0223      	lsls	r3, r4, #8
 800348e:	4644      	mov	r4, r8
 8003490:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003494:	4644      	mov	r4, r8
 8003496:	0222      	lsls	r2, r4, #8
 8003498:	ea40 0402 	orr.w	r4, r0, r2
 800349c:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80034a0:	430b      	orrs	r3, r1
 80034a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80034a6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80034aa:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034ae:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80034b2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80034b6:	1c9a      	adds	r2, r3, #2
 80034b8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80034bc:	4413      	add	r3, r2
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034c8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80034d8:	464c      	mov	r4, r9
 80034da:	0423      	lsls	r3, r4, #16
 80034dc:	4644      	mov	r4, r8
 80034de:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80034e2:	4644      	mov	r4, r8
 80034e4:	0422      	lsls	r2, r4, #16
 80034e6:	ea40 0402 	orr.w	r4, r0, r2
 80034ea:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80034ee:	430b      	orrs	r3, r1
 80034f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034f4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80034f8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034fc:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8003500:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003504:	1cda      	adds	r2, r3, #3
 8003506:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2200      	movs	r2, #0
 8003512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003516:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800351a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800351e:	4623      	mov	r3, r4
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003526:	4623      	mov	r3, r4
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800352e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003532:	4623      	mov	r3, r4
 8003534:	4303      	orrs	r3, r0
 8003536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800353a:	462b      	mov	r3, r5
 800353c:	430b      	orrs	r3, r1
 800353e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003542:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003546:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800354a:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 800354e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003552:	1d1a      	adds	r2, r3, #4
 8003554:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003558:	4413      	add	r3, r2
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003564:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003574:	0023      	movs	r3, r4
 8003576:	2200      	movs	r2, #0
 8003578:	ea40 0402 	orr.w	r4, r0, r2
 800357c:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003580:	430b      	orrs	r3, r1
 8003582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003586:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800358a:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800358e:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8003592:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003596:	1d5a      	adds	r2, r3, #5
 8003598:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800359c:	4413      	add	r3, r2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80035b8:	0223      	lsls	r3, r4, #8
 80035ba:	2200      	movs	r2, #0
 80035bc:	ea40 0402 	orr.w	r4, r0, r2
 80035c0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80035c4:	430b      	orrs	r3, r1
 80035c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ca:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80035ce:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80035d2:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80035d6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80035da:	1d9a      	adds	r2, r3, #6
 80035dc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80035fc:	0423      	lsls	r3, r4, #16
 80035fe:	2200      	movs	r2, #0
 8003600:	ea40 0402 	orr.w	r4, r0, r2
 8003604:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003608:	430b      	orrs	r3, r1
 800360a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800360e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003612:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      u_steering_angular_fb.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003616:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 800361a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800361e:	1dda      	adds	r2, r3, #7
 8003620:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003624:	4413      	add	r3, r2
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003630:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003640:	0623      	lsls	r3, r4, #24
 8003642:	2200      	movs	r2, #0
 8003644:	ea40 0402 	orr.w	r4, r0, r2
 8003648:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800364c:	430b      	orrs	r3, r1
 800364e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003652:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003656:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      this->steering_angular_fb = u_steering_angular_fb.real;
 800365a:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 800365e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8003662:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
      offset += sizeof(this->steering_angular_fb);
 8003666:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800366a:	3308      	adds	r3, #8
 800366c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        double real;
        uint64_t base;
      } u_steering_rpm_fb;
      u_steering_rpm_fb.base = 0;
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800367c:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 8003680:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8003684:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003688:	4413      	add	r3, r2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003694:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003698:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800369c:	4623      	mov	r3, r4
 800369e:	4303      	orrs	r3, r0
 80036a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80036a2:	462b      	mov	r3, r5
 80036a4:	430b      	orrs	r3, r1
 80036a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036a8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80036ac:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036b0:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 80036b4:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2200      	movs	r2, #0
 80036c6:	673b      	str	r3, [r7, #112]	; 0x70
 80036c8:	677a      	str	r2, [r7, #116]	; 0x74
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036d6:	464c      	mov	r4, r9
 80036d8:	0223      	lsls	r3, r4, #8
 80036da:	4644      	mov	r4, r8
 80036dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036e0:	4644      	mov	r4, r8
 80036e2:	0222      	lsls	r2, r4, #8
 80036e4:	ea40 0402 	orr.w	r4, r0, r2
 80036e8:	66bc      	str	r4, [r7, #104]	; 0x68
 80036ea:	430b      	orrs	r3, r1
 80036ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ee:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80036f2:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036f6:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 80036fa:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80036fe:	1c9a      	adds	r2, r3, #2
 8003700:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2200      	movs	r2, #0
 800370c:	663b      	str	r3, [r7, #96]	; 0x60
 800370e:	667a      	str	r2, [r7, #100]	; 0x64
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800371c:	464c      	mov	r4, r9
 800371e:	0423      	lsls	r3, r4, #16
 8003720:	4644      	mov	r4, r8
 8003722:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003726:	4644      	mov	r4, r8
 8003728:	0422      	lsls	r2, r4, #16
 800372a:	ea40 0402 	orr.w	r4, r0, r2
 800372e:	65bc      	str	r4, [r7, #88]	; 0x58
 8003730:	430b      	orrs	r3, r1
 8003732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003734:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003738:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800373c:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 8003740:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003744:	1cda      	adds	r2, r3, #3
 8003746:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2200      	movs	r2, #0
 8003752:	653b      	str	r3, [r7, #80]	; 0x50
 8003754:	657a      	str	r2, [r7, #84]	; 0x54
 8003756:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800375a:	4623      	mov	r3, r4
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003760:	4623      	mov	r3, r4
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	64bb      	str	r3, [r7, #72]	; 0x48
 8003766:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800376a:	4623      	mov	r3, r4
 800376c:	4303      	orrs	r3, r0
 800376e:	643b      	str	r3, [r7, #64]	; 0x40
 8003770:	462b      	mov	r3, r5
 8003772:	430b      	orrs	r3, r1
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
 8003776:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800377a:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800377e:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 8003782:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003786:	1d1a      	adds	r2, r3, #4
 8003788:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800378c:	4413      	add	r3, r2
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2200      	movs	r2, #0
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
 8003796:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80037a2:	0023      	movs	r3, r4
 80037a4:	2200      	movs	r2, #0
 80037a6:	ea40 0402 	orr.w	r4, r0, r2
 80037aa:	633c      	str	r4, [r7, #48]	; 0x30
 80037ac:	430b      	orrs	r3, r1
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
 80037b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037b4:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80037b8:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 80037bc:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80037c0:	1d5a      	adds	r2, r3, #5
 80037c2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80037c6:	4413      	add	r3, r2
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2200      	movs	r2, #0
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80037dc:	0223      	lsls	r3, r4, #8
 80037de:	2200      	movs	r2, #0
 80037e0:	ea40 0402 	orr.w	r4, r0, r2
 80037e4:	623c      	str	r4, [r7, #32]
 80037e6:	430b      	orrs	r3, r1
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037ee:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80037f2:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 80037f6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80037fa:	3306      	adds	r3, #6
 80037fc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8003800:	4413      	add	r3, r2
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2200      	movs	r2, #0
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	61fa      	str	r2, [r7, #28]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	69bc      	ldr	r4, [r7, #24]
 8003816:	0423      	lsls	r3, r4, #16
 8003818:	2200      	movs	r2, #0
 800381a:	ea40 0402 	orr.w	r4, r0, r2
 800381e:	613c      	str	r4, [r7, #16]
 8003820:	430b      	orrs	r3, r1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003828:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      u_steering_rpm_fb.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800382c:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 8003830:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003834:	3307      	adds	r3, #7
 8003836:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 800383a:	4413      	add	r3, r2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2200      	movs	r2, #0
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	60fa      	str	r2, [r7, #12]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	68bc      	ldr	r4, [r7, #8]
 8003850:	0623      	lsls	r3, r4, #24
 8003852:	2200      	movs	r2, #0
 8003854:	ea40 0402 	orr.w	r4, r0, r2
 8003858:	603c      	str	r4, [r7, #0]
 800385a:	430b      	orrs	r3, r1
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003862:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
      this->steering_rpm_fb = u_steering_rpm_fb.real;
 8003866:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800386a:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 800386e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
      offset += sizeof(this->steering_rpm_fb);
 8003872:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003876:	3308      	adds	r3, #8
 8003878:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
      union {
        bool real;
        uint8_t base;
      } u_forward_motor;
      u_forward_motor.base = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	f887 33ac 	strb.w	r3, [r7, #940]	; 0x3ac
      u_forward_motor.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003882:	f897 23ac 	ldrb.w	r2, [r7, #940]	; 0x3ac
 8003886:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800388a:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 800388e:	440b      	add	r3, r1
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f887 33ac 	strb.w	r3, [r7, #940]	; 0x3ac
      this->forward_motor = u_forward_motor.real;
 800389a:	f897 23ac 	ldrb.w	r2, [r7, #940]	; 0x3ac
 800389e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      offset += sizeof(this->forward_motor);
 80038a6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80038aa:	3301      	adds	r3, #1
 80038ac:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
     return offset;
 80038b0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 80038ba:	46bd      	mov	sp, r7
 80038bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80038c0:	4770      	bx	lr
	...

080038c4 <_ZN10raibo_msgs8speed_fb7getTypeEv>:

    virtual const char * getType() override { return "raibo_msgs/speed_fb"; };
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <_ZN10raibo_msgs8speed_fb7getTypeEv+0x18>)
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	0801171c 	.word	0x0801171c

080038e0 <_ZN10raibo_msgs8speed_fb6getMD5Ev>:
    virtual const char * getMD5() override { return "960d1a8f0ecee7e59a8c5dceb958501e"; };
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <_ZN10raibo_msgs8speed_fb6getMD5Ev+0x18>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	08011730 	.word	0x08011730

080038fc <_ZN10raibo_msgs8speed_spC1Ev>:
      typedef double _bldc_speed_sp_type;
      _bldc_speed_sp_type bldc_speed_sp;
      typedef double _steering_speed_sp_type;
      _steering_speed_sp_type steering_speed_sp;

    speed_sp():
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
      bldc_speed_sp(0),
      steering_speed_sp(0)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd fc78 	bl	80011fc <_ZN3ros3MsgC1Ev>
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <_ZN10raibo_msgs8speed_spC1Ev+0x3c>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	601a      	str	r2, [r3, #0]
      bldc_speed_sp(0),
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      steering_speed_sp(0)
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    {
    }
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08011838 	.word	0x08011838

0800393c <_ZNK10raibo_msgs8speed_sp9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_bldc_speed_sp;
      u_bldc_speed_sp.real = this->bldc_speed_sp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003950:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_bldc_speed_sp.base >> (8 * 0)) & 0xFF;
 8003954:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003958:	69f9      	ldr	r1, [r7, #28]
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	4401      	add	r1, r0
 800395e:	b2d3      	uxtb	r3, r2
 8003960:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_bldc_speed_sp.base >> (8 * 1)) & 0xFF;
 8003962:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	0a02      	lsrs	r2, r0, #8
 8003970:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003974:	0a0b      	lsrs	r3, r1, #8
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	3101      	adds	r1, #1
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	4401      	add	r1, r0
 800397e:	b2d3      	uxtb	r3, r2
 8003980:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_bldc_speed_sp.base >> (8 * 2)) & 0xFF;
 8003982:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	0c02      	lsrs	r2, r0, #16
 8003990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003994:	0c0b      	lsrs	r3, r1, #16
 8003996:	69f9      	ldr	r1, [r7, #28]
 8003998:	3102      	adds	r1, #2
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	4401      	add	r1, r0
 800399e:	b2d3      	uxtb	r3, r2
 80039a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_bldc_speed_sp.base >> (8 * 3)) & 0xFF;
 80039a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	0e02      	lsrs	r2, r0, #24
 80039b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039b4:	0e0b      	lsrs	r3, r1, #24
 80039b6:	69f9      	ldr	r1, [r7, #28]
 80039b8:	3103      	adds	r1, #3
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	4401      	add	r1, r0
 80039be:	b2d3      	uxtb	r3, r2
 80039c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_bldc_speed_sp.base >> (8 * 4)) & 0xFF;
 80039c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	000a      	movs	r2, r1
 80039d0:	2300      	movs	r3, #0
 80039d2:	69f9      	ldr	r1, [r7, #28]
 80039d4:	3104      	adds	r1, #4
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	4401      	add	r1, r0
 80039da:	b2d3      	uxtb	r3, r2
 80039dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_bldc_speed_sp.base >> (8 * 5)) & 0xFF;
 80039de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	0a0a      	lsrs	r2, r1, #8
 80039ec:	2300      	movs	r3, #0
 80039ee:	69f9      	ldr	r1, [r7, #28]
 80039f0:	3105      	adds	r1, #5
 80039f2:	6838      	ldr	r0, [r7, #0]
 80039f4:	4401      	add	r1, r0
 80039f6:	b2d3      	uxtb	r3, r2
 80039f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_bldc_speed_sp.base >> (8 * 6)) & 0xFF;
 80039fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	0c0a      	lsrs	r2, r1, #16
 8003a08:	2300      	movs	r3, #0
 8003a0a:	69f9      	ldr	r1, [r7, #28]
 8003a0c:	3106      	adds	r1, #6
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	4401      	add	r1, r0
 8003a12:	b2d3      	uxtb	r3, r2
 8003a14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_bldc_speed_sp.base >> (8 * 7)) & 0xFF;
 8003a16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	0e0a      	lsrs	r2, r1, #24
 8003a24:	2300      	movs	r3, #0
 8003a26:	69f9      	ldr	r1, [r7, #28]
 8003a28:	3107      	adds	r1, #7
 8003a2a:	6838      	ldr	r0, [r7, #0]
 8003a2c:	4401      	add	r1, r0
 8003a2e:	b2d3      	uxtb	r3, r2
 8003a30:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->bldc_speed_sp);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3308      	adds	r3, #8
 8003a36:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_steering_speed_sp;
      u_steering_speed_sp.real = this->steering_speed_sp;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_steering_speed_sp.base >> (8 * 0)) & 0xFF;
 8003a42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a46:	69f9      	ldr	r1, [r7, #28]
 8003a48:	6838      	ldr	r0, [r7, #0]
 8003a4a:	4401      	add	r1, r0
 8003a4c:	b2d3      	uxtb	r3, r2
 8003a4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_steering_speed_sp.base >> (8 * 1)) & 0xFF;
 8003a50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	0a02      	lsrs	r2, r0, #8
 8003a5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a62:	0a0b      	lsrs	r3, r1, #8
 8003a64:	69f9      	ldr	r1, [r7, #28]
 8003a66:	3101      	adds	r1, #1
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	4401      	add	r1, r0
 8003a6c:	b2d3      	uxtb	r3, r2
 8003a6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_steering_speed_sp.base >> (8 * 2)) & 0xFF;
 8003a70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	0c02      	lsrs	r2, r0, #16
 8003a7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a82:	0c0b      	lsrs	r3, r1, #16
 8003a84:	69f9      	ldr	r1, [r7, #28]
 8003a86:	3102      	adds	r1, #2
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	4401      	add	r1, r0
 8003a8c:	b2d3      	uxtb	r3, r2
 8003a8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_steering_speed_sp.base >> (8 * 3)) & 0xFF;
 8003a90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	0e02      	lsrs	r2, r0, #24
 8003a9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003aa2:	0e0b      	lsrs	r3, r1, #24
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	3103      	adds	r1, #3
 8003aa8:	6838      	ldr	r0, [r7, #0]
 8003aaa:	4401      	add	r1, r0
 8003aac:	b2d3      	uxtb	r3, r2
 8003aae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_steering_speed_sp.base >> (8 * 4)) & 0xFF;
 8003ab0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	000a      	movs	r2, r1
 8003abe:	2300      	movs	r3, #0
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	3104      	adds	r1, #4
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	4401      	add	r1, r0
 8003ac8:	b2d3      	uxtb	r3, r2
 8003aca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_steering_speed_sp.base >> (8 * 5)) & 0xFF;
 8003acc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	0a0a      	lsrs	r2, r1, #8
 8003ada:	2300      	movs	r3, #0
 8003adc:	69f9      	ldr	r1, [r7, #28]
 8003ade:	3105      	adds	r1, #5
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	4401      	add	r1, r0
 8003ae4:	b2d3      	uxtb	r3, r2
 8003ae6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_steering_speed_sp.base >> (8 * 6)) & 0xFF;
 8003ae8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	0c0a      	lsrs	r2, r1, #16
 8003af6:	2300      	movs	r3, #0
 8003af8:	69f9      	ldr	r1, [r7, #28]
 8003afa:	3106      	adds	r1, #6
 8003afc:	6838      	ldr	r0, [r7, #0]
 8003afe:	4401      	add	r1, r0
 8003b00:	b2d3      	uxtb	r3, r2
 8003b02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_steering_speed_sp.base >> (8 * 7)) & 0xFF;
 8003b04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	0e0a      	lsrs	r2, r1, #24
 8003b12:	2300      	movs	r3, #0
 8003b14:	69f9      	ldr	r1, [r7, #28]
 8003b16:	3107      	adds	r1, #7
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	4401      	add	r1, r0
 8003b1c:	b2d3      	uxtb	r3, r2
 8003b1e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->steering_speed_sp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3308      	adds	r3, #8
 8003b24:	61fb      	str	r3, [r7, #28]
      return offset;
 8003b26:	69fb      	ldr	r3, [r7, #28]
    }
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3724      	adds	r7, #36	; 0x24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <_ZN10raibo_msgs8speed_sp11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003b34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b38:	b0c7      	sub	sp, #284	; 0x11c
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b40:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
    {
      int offset = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      union {
        double real;
        uint64_t base;
      } u_bldc_speed_sp;
      u_bldc_speed_sp.base = 0;
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b56:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003b5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b62:	4413      	add	r3, r2
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	461c      	mov	r4, r3
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	ea40 0804 	orr.w	r8, r0, r4
 8003b72:	ea41 0905 	orr.w	r9, r1, r5
 8003b76:	e9c7 8942 	strd	r8, r9, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b7a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2200      	movs	r2, #0
 8003b90:	469a      	mov	sl, r3
 8003b92:	4693      	mov	fp, r2
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003ba0:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003ba4:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003ba8:	ea40 0402 	orr.w	r4, r0, r2
 8003bac:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bb6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003bba:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bbe:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc6:	1c9a      	adds	r2, r3, #2
 8003bc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bcc:	4413      	add	r3, r2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bd8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003be8:	464c      	mov	r4, r9
 8003bea:	0423      	lsls	r3, r4, #16
 8003bec:	4644      	mov	r4, r8
 8003bee:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003bf2:	4644      	mov	r4, r8
 8003bf4:	0422      	lsls	r2, r4, #16
 8003bf6:	ea40 0402 	orr.w	r4, r0, r2
 8003bfa:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c04:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003c08:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c0c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c14:	1cda      	adds	r2, r3, #3
 8003c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c2a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003c2e:	4623      	mov	r3, r4
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c36:	4623      	mov	r3, r4
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c3e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003c42:	4623      	mov	r3, r4
 8003c44:	4303      	orrs	r3, r0
 8003c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c52:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003c56:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c5a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	1d1a      	adds	r2, r3, #4
 8003c64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003c84:	0023      	movs	r3, r4
 8003c86:	2200      	movs	r2, #0
 8003c88:	ea40 0402 	orr.w	r4, r0, r2
 8003c8c:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003c90:	430b      	orrs	r3, r1
 8003c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c96:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003c9a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c9e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca6:	1d5a      	adds	r2, r3, #5
 8003ca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cac:	4413      	add	r3, r2
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003cc8:	0223      	lsls	r3, r4, #8
 8003cca:	2200      	movs	r2, #0
 8003ccc:	ea40 0402 	orr.w	r4, r0, r2
 8003cd0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cda:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003cde:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ce2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cea:	1d9a      	adds	r2, r3, #6
 8003cec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cfc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003d0c:	0423      	lsls	r3, r4, #16
 8003d0e:	2200      	movs	r2, #0
 8003d10:	ea40 0402 	orr.w	r4, r0, r2
 8003d14:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d1e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003d22:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
      u_bldc_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d26:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2e:	1dda      	adds	r2, r3, #7
 8003d30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003d50:	0623      	lsls	r3, r4, #24
 8003d52:	2200      	movs	r2, #0
 8003d54:	ea40 0402 	orr.w	r4, r0, r2
 8003d58:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d62:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003d66:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
      this->bldc_speed_sp = u_bldc_speed_sp.real;
 8003d6a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d72:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->bldc_speed_sp);
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      union {
        double real;
        uint64_t base;
      } u_steering_speed_sp;
      u_steering_speed_sp.base = 0;
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d8c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003d90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d98:	4413      	add	r3, r2
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003da4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003da8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003dac:	4623      	mov	r3, r4
 8003dae:	4303      	orrs	r3, r0
 8003db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db2:	462b      	mov	r3, r5
 8003db4:	430b      	orrs	r3, r1
 8003db6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003db8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003dbc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003dc0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dce:	4413      	add	r3, r2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8003dd8:	677a      	str	r2, [r7, #116]	; 0x74
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003de6:	464c      	mov	r4, r9
 8003de8:	0223      	lsls	r3, r4, #8
 8003dea:	4644      	mov	r4, r8
 8003dec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003df0:	4644      	mov	r4, r8
 8003df2:	0222      	lsls	r2, r4, #8
 8003df4:	ea40 0402 	orr.w	r4, r0, r2
 8003df8:	66bc      	str	r4, [r7, #104]	; 0x68
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003e02:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e06:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	1c9a      	adds	r2, r3, #2
 8003e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e14:	4413      	add	r3, r2
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1e:	667a      	str	r2, [r7, #100]	; 0x64
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e2c:	464c      	mov	r4, r9
 8003e2e:	0423      	lsls	r3, r4, #16
 8003e30:	4644      	mov	r4, r8
 8003e32:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003e36:	4644      	mov	r4, r8
 8003e38:	0422      	lsls	r2, r4, #16
 8003e3a:	ea40 0402 	orr.w	r4, r0, r2
 8003e3e:	65bc      	str	r4, [r7, #88]	; 0x58
 8003e40:	430b      	orrs	r3, r1
 8003e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e44:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003e48:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e4c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e54:	1cda      	adds	r2, r3, #3
 8003e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e5a:	4413      	add	r3, r2
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2200      	movs	r2, #0
 8003e62:	653b      	str	r3, [r7, #80]	; 0x50
 8003e64:	657a      	str	r2, [r7, #84]	; 0x54
 8003e66:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e70:	4623      	mov	r3, r4
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e76:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	4303      	orrs	r3, r0
 8003e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e80:	462b      	mov	r3, r5
 8003e82:	430b      	orrs	r3, r1
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
 8003e86:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003e8a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003e8e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e9c:	4413      	add	r3, r2
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003eb2:	0023      	movs	r3, r4
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	ea40 0402 	orr.w	r4, r0, r2
 8003eba:	633c      	str	r4, [r7, #48]	; 0x30
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003ec4:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ec8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed0:	1d5a      	adds	r2, r3, #5
 8003ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ed6:	4413      	add	r3, r2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2200      	movs	r2, #0
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003eec:	0223      	lsls	r3, r4, #8
 8003eee:	2200      	movs	r2, #0
 8003ef0:	ea40 0402 	orr.w	r4, r0, r2
 8003ef4:	623c      	str	r4, [r7, #32]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003efe:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003f02:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	3306      	adds	r3, #6
 8003f0c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003f10:	4413      	add	r3, r2
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2200      	movs	r2, #0
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	61fa      	str	r2, [r7, #28]
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	69bc      	ldr	r4, [r7, #24]
 8003f26:	0423      	lsls	r3, r4, #16
 8003f28:	2200      	movs	r2, #0
 8003f2a:	ea40 0402 	orr.w	r4, r0, r2
 8003f2e:	613c      	str	r4, [r7, #16]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f38:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      u_steering_speed_sp.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f3c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f44:	3307      	adds	r3, #7
 8003f46:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003f4a:	4413      	add	r3, r2
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2200      	movs	r2, #0
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	60fa      	str	r2, [r7, #12]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	68bc      	ldr	r4, [r7, #8]
 8003f60:	0623      	lsls	r3, r4, #24
 8003f62:	2200      	movs	r2, #0
 8003f64:	ea40 0402 	orr.w	r4, r0, r2
 8003f68:	603c      	str	r4, [r7, #0]
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f72:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      this->steering_speed_sp = u_steering_speed_sp.real;
 8003f76:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8003f7a:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8003f7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      offset += sizeof(this->steering_speed_sp);
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f86:	3308      	adds	r3, #8
 8003f88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
     return offset;
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    }
 8003f90:	4618      	mov	r0, r3
 8003f92:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003f96:	46bd      	mov	sp, r7
 8003f98:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f9c:	4770      	bx	lr
	...

08003fa0 <_ZN10raibo_msgs8speed_sp7getTypeEv>:

    virtual const char * getType() override { return "raibo_msgs/speed_sp"; };
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <_ZN10raibo_msgs8speed_sp7getTypeEv+0x18>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	08011754 	.word	0x08011754

08003fbc <_ZN10raibo_msgs8speed_sp6getMD5Ev>:
    virtual const char * getMD5() override { return "c9a4a5c0478b2962a50634087c3b282f"; };
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <_ZN10raibo_msgs8speed_sp6getMD5Ev+0x18>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	08011768 	.word	0x08011768

08003fd8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	08011880 	.word	0x08011880

08003ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ffe8 	bl	8003fd8 <_ZN3ros15NodeHandleBase_C1Ev>
 8004008:	4a36      	ldr	r2, [pc, #216]	; (80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd ff7c 	bl	8001f10 <_ZN13STM32HardwareC1Ev>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800403e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f009 fee8 	bl	800de1a <memset>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f009 fedf 	bl	800de1a <memset>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004062:	2264      	movs	r2, #100	; 0x64
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f009 fed7 	bl	800de1a <memset>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8004072:	2264      	movs	r2, #100	; 0x64
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f009 fecf 	bl	800de1a <memset>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd fc06 	bl	80018e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	08011824 	.word	0x08011824

080040e8 <HAL_UART_TxCpltCallback>:

ros::Publisher speed_fb_pub_("/micro/speed_fb", &motor_fb_);
ros::Subscriber<raibo_msgs::speed_sp> speed_sp_sub_("/micro/speed_sp",
		&commandSpeedSPCallback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	nh_.getHardware()->flush();
 80040f0:	4805      	ldr	r0, [pc, #20]	; (8004108 <HAL_UART_TxCpltCallback+0x20>)
 80040f2:	f001 fdab 	bl	8005c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd ff6f 	bl	8001fdc <_ZN13STM32Hardware5flushEv>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000d08 	.word	0x20000d08

0800410c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	nh_.getHardware()->reset_rbuf();
 8004114:	4805      	ldr	r0, [pc, #20]	; (800412c <HAL_UART_RxCpltCallback+0x20>)
 8004116:	f001 fd99 	bl	8005c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800411a:	4603      	mov	r3, r0
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd ff1e 	bl	8001f5e <_ZN13STM32Hardware10reset_rbufEv>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000d08 	.word	0x20000d08

08004130 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE>:

void commandSpeedSPCallback(const raibo_msgs::speed_sp &msg) {
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
	last_time_[SPEED_SP] = nh_.now();
 8004138:	4c13      	ldr	r4, [pc, #76]	; (8004188 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x58>)
 800413a:	463b      	mov	r3, r7
 800413c:	4913      	ldr	r1, [pc, #76]	; (800418c <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x5c>)
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fd90 	bl	8005c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8004144:	4622      	mov	r2, r4
 8004146:	463b      	mov	r3, r7
 8004148:	e893 0003 	ldmia.w	r3, {r0, r1}
 800414c:	e882 0003 	stmia.w	r2, {r0, r1}
	_cmd_vel.bldc_sp = (double) msg.bldc_speed_sp;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004156:	490e      	ldr	r1, [pc, #56]	; (8004190 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x60>)
 8004158:	e9c1 2300 	strd	r2, r3, [r1]
	_cmd_vel.angle_sp = (double) msg.steering_speed_sp;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004162:	490b      	ldr	r1, [pc, #44]	; (8004190 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x60>)
 8004164:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor_fb_.bldc_rpm_sp = _cmd_vel.bldc_sp;
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x60>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	4909      	ldr	r1, [pc, #36]	; (8004194 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x64>)
 8004170:	e9c1 2302 	strd	r2, r3, [r1, #8]
	motor_fb_.steering_angle_sp = _cmd_vel.angle_sp;
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x60>)
 8004176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800417a:	4906      	ldr	r1, [pc, #24]	; (8004194 <_Z22commandSpeedSPCallbackRKN10raibo_msgs8speed_spE+0x64>)
 800417c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bd90      	pop	{r4, r7, pc}
 8004188:	20001690 	.word	0x20001690
 800418c:	20000d08 	.word	0x20000d08
 8004190:	20000c00 	.word	0x20000c00
 8004194:	20001648 	.word	0x20001648

08004198 <_Z15PIDControl_BLDCP3PIDddd>:

void PIDControl_BLDC(PID *_pid_data, double _linear_x, double _pv, double _dt) {
 8004198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800419c:	b08e      	sub	sp, #56	; 0x38
 800419e:	af00      	add	r7, sp, #0
 80041a0:	61f8      	str	r0, [r7, #28]
 80041a2:	ed87 0b04 	vstr	d0, [r7, #16]
 80041a6:	ed87 1b02 	vstr	d1, [r7, #8]
 80041aa:	ed87 2b00 	vstr	d2, [r7]
	// init function var
	double dac_speed = 0;
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double min_forward = 1600;
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	4bac      	ldr	r3, [pc, #688]	; (8004470 <_Z15PIDControl_BLDCP3PIDddd+0x2d8>)
 80041c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double min_backward = 1350;
 80041c4:	a3a2      	add	r3, pc, #648	; (adr r3, 8004450 <_Z15PIDControl_BLDCP3PIDddd+0x2b8>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//prevent sum_err overflow at the start
	if(initial_state){_pid_data->err=0; _pid_data->sum_err += _pid_data->err; initial_count++;}
 80041ce:	4ba9      	ldr	r3, [pc, #676]	; (8004474 <_Z15PIDControl_BLDCP3PIDddd+0x2dc>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d019      	beq.n	800420a <_Z15PIDControl_BLDCP3PIDddd+0x72>
 80041d6:	69f9      	ldr	r1, [r7, #28]
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80041f0:	f7fc f86c 	bl	80002cc <__adddf3>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	69f9      	ldr	r1, [r7, #28]
 80041fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80041fe:	4b9e      	ldr	r3, [pc, #632]	; (8004478 <_Z15PIDControl_BLDCP3PIDddd+0x2e0>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4b9c      	ldr	r3, [pc, #624]	; (8004478 <_Z15PIDControl_BLDCP3PIDddd+0x2e0>)
 8004208:	701a      	strb	r2, [r3, #0]
	if(initial_count>45){initial_state = false;}
 800420a:	4b9b      	ldr	r3, [pc, #620]	; (8004478 <_Z15PIDControl_BLDCP3PIDddd+0x2e0>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b2d      	cmp	r3, #45	; 0x2d
 8004210:	d902      	bls.n	8004218 <_Z15PIDControl_BLDCP3PIDddd+0x80>
 8004212:	4b98      	ldr	r3, [pc, #608]	; (8004474 <_Z15PIDControl_BLDCP3PIDddd+0x2dc>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
	//assign error var
	_pid_data->err = abs(_linear_x) - _pv;
 8004218:	ed97 0b04 	vldr	d0, [r7, #16]
 800421c:	f7fc ff9c 	bl	8001158 <_ZSt3absd>
 8004220:	ec51 0b10 	vmov	r0, r1, d0
 8004224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004228:	f7fc f84e 	bl	80002c8 <__aeabi_dsub>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	69f9      	ldr	r1, [r7, #28]
 8004232:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_pid_data->err > 1000.0){_pid_data->err = 1000.0;}
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	4b8e      	ldr	r3, [pc, #568]	; (800447c <_Z15PIDControl_BLDCP3PIDddd+0x2e4>)
 8004242:	f7fc fc89 	bl	8000b58 <__aeabi_dcmpgt>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <_Z15PIDControl_BLDCP3PIDddd+0xc0>
 800424c:	69f9      	ldr	r1, [r7, #28]
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	4b8a      	ldr	r3, [pc, #552]	; (800447c <_Z15PIDControl_BLDCP3PIDddd+0x2e4>)
 8004254:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_pid_data->err < -1000.0){_pid_data->err = -1000.0;}
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800425e:	a37e      	add	r3, pc, #504	; (adr r3, 8004458 <_Z15PIDControl_BLDCP3PIDddd+0x2c0>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc fc5a 	bl	8000b1c <__aeabi_dcmplt>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <_Z15PIDControl_BLDCP3PIDddd+0xe2>
 800426e:	69f9      	ldr	r1, [r7, #28]
 8004270:	a379      	add	r3, pc, #484	; (adr r3, 8004458 <_Z15PIDControl_BLDCP3PIDddd+0x2c0>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_pid_data->sum_err += _pid_data->err;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004286:	f7fc f821 	bl	80002cc <__adddf3>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	69f9      	ldr	r1, [r7, #28]
 8004290:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if(abs(_linear_x) > 1.2){
 8004294:	ed97 0b04 	vldr	d0, [r7, #16]
 8004298:	f7fc ff5e 	bl	8001158 <_ZSt3absd>
 800429c:	ec51 0b10 	vmov	r0, r1, d0
 80042a0:	2301      	movs	r3, #1
 80042a2:	461c      	mov	r4, r3
 80042a4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80042a8:	4b75      	ldr	r3, [pc, #468]	; (8004480 <_Z15PIDControl_BLDCP3PIDddd+0x2e8>)
 80042aa:	f7fc fc55 	bl	8000b58 <__aeabi_dcmpgt>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <_Z15PIDControl_BLDCP3PIDddd+0x120>
 80042b4:	2300      	movs	r3, #0
 80042b6:	461c      	mov	r4, r3
 80042b8:	b2e3      	uxtb	r3, r4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d073      	beq.n	80043a6 <_Z15PIDControl_BLDCP3PIDddd+0x20e>
		dac_speed = (_pid_data->kp * _pid_data->err)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80042ca:	f7fc f9b5 	bl	8000638 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4614      	mov	r4, r2
 80042d4:	461d      	mov	r5, r3
						+ (_pid_data->ki * _pid_data->sum_err * _dt)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80042e2:	f7fc f9a9 	bl	8000638 <__aeabi_dmul>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f2:	f7fc f9a1 	bl	8000638 <__aeabi_dmul>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4620      	mov	r0, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	f7fb ffe5 	bl	80002cc <__adddf3>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4690      	mov	r8, r2
 8004308:	4699      	mov	r9, r3
						+ (_pid_data->kd * ((_pid_data->err - _pid_data->err_l) / _dt));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800431c:	f7fb ffd4 	bl	80002c8 <__aeabi_dsub>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432c:	f7fc faae 	bl	800088c <__aeabi_ddiv>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4620      	mov	r0, r4
 8004336:	4629      	mov	r1, r5
 8004338:	f7fc f97e 	bl	8000638 <__aeabi_dmul>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
		dac_speed = (_pid_data->kp * _pid_data->err)
 8004340:	4640      	mov	r0, r8
 8004342:	4649      	mov	r1, r9
 8004344:	f7fb ffc2 	bl	80002cc <__adddf3>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		_pid_data->err_l = _pid_data->err;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004356:	69f9      	ldr	r1, [r7, #28]
 8004358:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (dac_speed > 4095.0) dac_speed = 4095.0;
 800435c:	a340      	add	r3, pc, #256	; (adr r3, 8004460 <_Z15PIDControl_BLDCP3PIDddd+0x2c8>)
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004366:	f7fc fbf7 	bl	8000b58 <__aeabi_dcmpgt>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <_Z15PIDControl_BLDCP3PIDddd+0x1e2>
 8004370:	a33b      	add	r3, pc, #236	; (adr r3, 8004460 <_Z15PIDControl_BLDCP3PIDddd+0x2c8>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (dac_speed < 0) dac_speed = 0;
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004386:	f7fc fbc9 	bl	8000b1c <__aeabi_dcmplt>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <_Z15PIDControl_BLDCP3PIDddd+0x204>
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		// reduce scaling time
		speed_output = dac_speed;
 800439c:	4939      	ldr	r1, [pc, #228]	; (8004484 <_Z15PIDControl_BLDCP3PIDddd+0x2ec>)
 800439e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043a2:	e9c1 2300 	strd	r2, r3, [r1]
	}
	//certain use for lower limit of the car (minimum speed at 0.9 kmh)
	if(abs(_linear_x) <= 0.3 ){_linear_x = 0.0; _pid_data->sum_err = 0; _pid_data->err = 0; speed_output = 0;}
 80043a6:	ed97 0b04 	vldr	d0, [r7, #16]
 80043aa:	f7fc fed5 	bl	8001158 <_ZSt3absd>
 80043ae:	ec51 0b10 	vmov	r0, r1, d0
 80043b2:	2301      	movs	r3, #1
 80043b4:	461c      	mov	r4, r3
 80043b6:	a32c      	add	r3, pc, #176	; (adr r3, 8004468 <_Z15PIDControl_BLDCP3PIDddd+0x2d0>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fc fbb8 	bl	8000b30 <__aeabi_dcmple>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <_Z15PIDControl_BLDCP3PIDddd+0x232>
 80043c6:	2300      	movs	r3, #0
 80043c8:	461c      	mov	r4, r3
 80043ca:	b2e3      	uxtb	r3, r4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01a      	beq.n	8004406 <_Z15PIDControl_BLDCP3PIDddd+0x26e>
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80043dc:	69f9      	ldr	r1, [r7, #28]
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80043ea:	69f9      	ldr	r1, [r7, #28]
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80043f8:	4922      	ldr	r1, [pc, #136]	; (8004484 <_Z15PIDControl_BLDCP3PIDddd+0x2ec>)
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	e9c1 2300 	strd	r2, r3, [r1]
	if(_linear_x > 0.3 && _linear_x <= 1.2){speed_output = min_forward; _pid_data->sum_err = 260; _pid_data->err = 0;}
 8004406:	a318      	add	r3, pc, #96	; (adr r3, 8004468 <_Z15PIDControl_BLDCP3PIDddd+0x2d0>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004410:	f7fc fba2 	bl	8000b58 <__aeabi_dcmpgt>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d03a      	beq.n	8004490 <_Z15PIDControl_BLDCP3PIDddd+0x2f8>
 800441a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <_Z15PIDControl_BLDCP3PIDddd+0x2e8>)
 8004420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004424:	f7fc fb84 	bl	8000b30 <__aeabi_dcmple>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d030      	beq.n	8004490 <_Z15PIDControl_BLDCP3PIDddd+0x2f8>
 800442e:	4915      	ldr	r1, [pc, #84]	; (8004484 <_Z15PIDControl_BLDCP3PIDddd+0x2ec>)
 8004430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004434:	e9c1 2300 	strd	r2, r3, [r1]
 8004438:	69f9      	ldr	r1, [r7, #28]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <_Z15PIDControl_BLDCP3PIDddd+0x2f0>)
 8004440:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004444:	69f9      	ldr	r1, [r7, #28]
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	e01d      	b.n	800448c <_Z15PIDControl_BLDCP3PIDddd+0x2f4>
 8004450:	00000000 	.word	0x00000000
 8004454:	40951800 	.word	0x40951800
 8004458:	00000000 	.word	0x00000000
 800445c:	c08f4000 	.word	0xc08f4000
 8004460:	00000000 	.word	0x00000000
 8004464:	40affe00 	.word	0x40affe00
 8004468:	33333333 	.word	0x33333333
 800446c:	3fd33333 	.word	0x3fd33333
 8004470:	40990000 	.word	0x40990000
 8004474:	20000000 	.word	0x20000000
 8004478:	20000cd8 	.word	0x20000cd8
 800447c:	408f4000 	.word	0x408f4000
 8004480:	3ff33333 	.word	0x3ff33333
 8004484:	20000cd0 	.word	0x20000cd0
 8004488:	40704000 	.word	0x40704000
 800448c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if(_linear_x < -0.3 && _linear_x >= -1.2){speed_output = min_backward; _pid_data->sum_err = 260; _pid_data->err = 0;}
 8004490:	a33e      	add	r3, pc, #248	; (adr r3, 800458c <_Z15PIDControl_BLDCP3PIDddd+0x3f4>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800449a:	f7fc fb3f 	bl	8000b1c <__aeabi_dcmplt>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01b      	beq.n	80044dc <_Z15PIDControl_BLDCP3PIDddd+0x344>
 80044a4:	a33b      	add	r3, pc, #236	; (adr r3, 8004594 <_Z15PIDControl_BLDCP3PIDddd+0x3fc>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044ae:	f7fc fb49 	bl	8000b44 <__aeabi_dcmpge>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d011      	beq.n	80044dc <_Z15PIDControl_BLDCP3PIDddd+0x344>
 80044b8:	4931      	ldr	r1, [pc, #196]	; (8004580 <_Z15PIDControl_BLDCP3PIDddd+0x3e8>)
 80044ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044be:	e9c1 2300 	strd	r2, r3, [r1]
 80044c2:	69f9      	ldr	r1, [r7, #28]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <_Z15PIDControl_BLDCP3PIDddd+0x3ec>)
 80044ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80044ce:	69f9      	ldr	r1, [r7, #28]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(_linear_x > 0.0){
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044e8:	f7fc fb36 	bl	8000b58 <__aeabi_dcmpgt>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d013      	beq.n	800451a <_Z15PIDControl_BLDCP3PIDddd+0x382>
		motor_fb_.forward_motor = true;
 80044f2:	4b25      	ldr	r3, [pc, #148]	; (8004588 <_Z15PIDControl_BLDCP3PIDddd+0x3f0>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		if(_pid_data->sum_err <= 260){dac_speed = min_forward;}
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <_Z15PIDControl_BLDCP3PIDddd+0x3ec>)
 8004506:	f7fc fb13 	bl	8000b30 <__aeabi_dcmple>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d027      	beq.n	8004560 <_Z15PIDControl_BLDCP3PIDddd+0x3c8>
 8004510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004514:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004518:	e022      	b.n	8004560 <_Z15PIDControl_BLDCP3PIDddd+0x3c8>
	}
	else if(_linear_x < 0.0){
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004526:	f7fc faf9 	bl	8000b1c <__aeabi_dcmplt>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <_Z15PIDControl_BLDCP3PIDddd+0x3c0>
		motor_fb_.forward_motor = false;
 8004530:	4b15      	ldr	r3, [pc, #84]	; (8004588 <_Z15PIDControl_BLDCP3PIDddd+0x3f0>)
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		if(_pid_data->sum_err <= 260){dac_speed = min_backward;}
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <_Z15PIDControl_BLDCP3PIDddd+0x3ec>)
 8004544:	f7fc faf4 	bl	8000b30 <__aeabi_dcmple>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <_Z15PIDControl_BLDCP3PIDddd+0x3c8>
 800454e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004552:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004556:	e003      	b.n	8004560 <_Z15PIDControl_BLDCP3PIDddd+0x3c8>
	}
	else{
		motor_fb_.forward_motor = false;
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <_Z15PIDControl_BLDCP3PIDddd+0x3f0>)
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}

	motor_fb_.bldc_kmph_fb = _pv; // don't change it's for controllino
 8004560:	4909      	ldr	r1, [pc, #36]	; (8004588 <_Z15PIDControl_BLDCP3PIDddd+0x3f0>)
 8004562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004566:	e9c1 2308 	strd	r2, r3, [r1, #32]

	motor_fb_.bldc_mps_fb = dac_speed; //in real situation the feedback should be speed_output for accurate speed output.
 800456a:	4907      	ldr	r1, [pc, #28]	; (8004588 <_Z15PIDControl_BLDCP3PIDddd+0x3f0>)
 800456c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004570:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 8004574:	bf00      	nop
 8004576:	3738      	adds	r7, #56	; 0x38
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800457e:	bf00      	nop
 8004580:	20000cd0 	.word	0x20000cd0
 8004584:	40704000 	.word	0x40704000
 8004588:	20001648 	.word	0x20001648
 800458c:	33333333 	.word	0x33333333
 8004590:	bfd33333 	.word	0xbfd33333
 8004594:	33333333 	.word	0x33333333
 8004598:	bff33333 	.word	0xbff33333
 800459c:	00000000 	.word	0x00000000

080045a0 <_Z15DACControlSpeedd>:

void DACControlSpeed(double _linear_x) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	ed87 0b00 	vstr	d0, [r7]
	PIDControl_BLDC(&_MotorBLDC, _linear_x, _hallBLDC.kmh, 0.5);
 80045aa:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <_Z15DACControlSpeedd+0x138>)
 80045ac:	ed93 7b04 	vldr	d7, [r3, #16]
 80045b0:	ed9f 2b43 	vldr	d2, [pc, #268]	; 80046c0 <_Z15DACControlSpeedd+0x120>
 80045b4:	eeb0 1a47 	vmov.f32	s2, s14
 80045b8:	eef0 1a67 	vmov.f32	s3, s15
 80045bc:	ed97 0b00 	vldr	d0, [r7]
 80045c0:	4846      	ldr	r0, [pc, #280]	; (80046dc <_Z15DACControlSpeedd+0x13c>)
 80045c2:	f7ff fde9 	bl	8004198 <_Z15PIDControl_BLDCP3PIDddd>

	if(!hold_bldc_sp && motor_fb_.forward_motor && speed_output>=1600){
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <_Z15DACControlSpeedd+0x140>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f083 0301 	eor.w	r3, r3, #1
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01d      	beq.n	8004610 <_Z15DACControlSpeedd+0x70>
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <_Z15DACControlSpeedd+0x144>)
 80045d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <_Z15DACControlSpeedd+0x70>
 80045de:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <_Z15DACControlSpeedd+0x148>)
 80045e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	4b40      	ldr	r3, [pc, #256]	; (80046ec <_Z15DACControlSpeedd+0x14c>)
 80045ea:	f7fc faab 	bl	8000b44 <__aeabi_dcmpge>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <_Z15DACControlSpeedd+0x70>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed_output);
 80045f4:	4b3c      	ldr	r3, [pc, #240]	; (80046e8 <_Z15DACControlSpeedd+0x148>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
 80045fe:	f7fc faf3 	bl	8000be8 <__aeabi_d2uiz>
 8004602:	4603      	mov	r3, r0
 8004604:	2200      	movs	r2, #0
 8004606:	2100      	movs	r1, #0
 8004608:	4839      	ldr	r0, [pc, #228]	; (80046f0 <_Z15DACControlSpeedd+0x150>)
 800460a:	f002 ff96 	bl	800753a <HAL_DAC_SetValue>
 800460e:	e04a      	b.n	80046a6 <_Z15DACControlSpeedd+0x106>
	}
	else if(!hold_bldc_sp && !motor_fb_.forward_motor && speed_output>=1350){
 8004610:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <_Z15DACControlSpeedd+0x140>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f083 0301 	eor.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <_Z15DACControlSpeedd+0xc0>
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <_Z15DACControlSpeedd+0x144>)
 8004620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004624:	f083 0301 	eor.w	r3, r3, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <_Z15DACControlSpeedd+0xc0>
 800462e:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <_Z15DACControlSpeedd+0x148>)
 8004630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004634:	a324      	add	r3, pc, #144	; (adr r3, 80046c8 <_Z15DACControlSpeedd+0x128>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fc fa83 	bl	8000b44 <__aeabi_dcmpge>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <_Z15DACControlSpeedd+0xc0>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed_output);
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <_Z15DACControlSpeedd+0x148>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	f7fc facb 	bl	8000be8 <__aeabi_d2uiz>
 8004652:	4603      	mov	r3, r0
 8004654:	2200      	movs	r2, #0
 8004656:	2100      	movs	r1, #0
 8004658:	4825      	ldr	r0, [pc, #148]	; (80046f0 <_Z15DACControlSpeedd+0x150>)
 800465a:	f002 ff6e 	bl	800753a <HAL_DAC_SetValue>
 800465e:	e022      	b.n	80046a6 <_Z15DACControlSpeedd+0x106>
	}
	else if(hold_bldc_sp){
 8004660:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <_Z15DACControlSpeedd+0x140>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <_Z15DACControlSpeedd+0xfa>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8004668:	2300      	movs	r3, #0
 800466a:	2200      	movs	r2, #0
 800466c:	2100      	movs	r1, #0
 800466e:	4820      	ldr	r0, [pc, #128]	; (80046f0 <_Z15DACControlSpeedd+0x150>)
 8004670:	f002 ff63 	bl	800753a <HAL_DAC_SetValue>
		if(_hallBLDC.kmh < 0.2){
 8004674:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <_Z15DACControlSpeedd+0x138>)
 8004676:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800467a:	a315      	add	r3, pc, #84	; (adr r3, 80046d0 <_Z15DACControlSpeedd+0x130>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fc fa4c 	bl	8000b1c <__aeabi_dcmplt>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00d      	beq.n	80046a6 <_Z15DACControlSpeedd+0x106>
			HAL_Delay(500);
 800468a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800468e:	f002 fdab 	bl	80071e8 <HAL_Delay>
			hold_bldc_sp = false;
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <_Z15DACControlSpeedd+0x140>)
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e005      	b.n	80046a6 <_Z15DACControlSpeedd+0x106>
		}
	}
	else{
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800469a:	2300      	movs	r3, #0
 800469c:	2200      	movs	r2, #0
 800469e:	2100      	movs	r1, #0
 80046a0:	4813      	ldr	r0, [pc, #76]	; (80046f0 <_Z15DACControlSpeedd+0x150>)
 80046a2:	f002 ff4a 	bl	800753a <HAL_DAC_SetValue>
	}

	motor_fb_.bldc_rpm_fb = _MotorBLDC.sum_err;
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <_Z15DACControlSpeedd+0x13c>)
 80046a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80046ac:	490d      	ldr	r1, [pc, #52]	; (80046e4 <_Z15DACControlSpeedd+0x144>)
 80046ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	f3af 8000 	nop.w
 80046c0:	00000000 	.word	0x00000000
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	00000000 	.word	0x00000000
 80046cc:	40951800 	.word	0x40951800
 80046d0:	9999999a 	.word	0x9999999a
 80046d4:	3fc99999 	.word	0x3fc99999
 80046d8:	20000c20 	.word	0x20000c20
 80046dc:	20000c70 	.word	0x20000c70
 80046e0:	20000cd9 	.word	0x20000cd9
 80046e4:	20001648 	.word	0x20001648
 80046e8:	20000cd0 	.word	0x20000cd0
 80046ec:	40990000 	.word	0x40990000
 80046f0:	20000370 	.word	0x20000370
 80046f4:	00000000 	.word	0x00000000

080046f8 <_Z16Steering_Controliii>:

void Steering_Control(int sp, int ap ,int dt){
 80046f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046fc:	b088      	sub	sp, #32
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
	time = HAL_GetTick();
 8004706:	f002 fd63 	bl	80071d0 <HAL_GetTick>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	4b92      	ldr	r3, [pc, #584]	; (8004958 <_Z16Steering_Controliii+0x260>)
 8004710:	601a      	str	r2, [r3, #0]
	int err_dt = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
	int desire_pose_tmp = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
	int desire_pose = sp;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	617b      	str	r3, [r7, #20]

	if(desire_pose != desire_pose_tmp){dt_init = true; desire_pose_tmp = sp; /*_MotorSteering.sum_err = 0; _MotorSteering.err_l = 0;*/}
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	429a      	cmp	r2, r3
 8004724:	d004      	beq.n	8004730 <_Z16Steering_Controliii+0x38>
 8004726:	4b8d      	ldr	r3, [pc, #564]	; (800495c <_Z16Steering_Controliii+0x264>)
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	61bb      	str	r3, [r7, #24]
	if(dt_init){time_tmp = time; dt_init = false;}
 8004730:	4b8a      	ldr	r3, [pc, #552]	; (800495c <_Z16Steering_Controliii+0x264>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d006      	beq.n	8004746 <_Z16Steering_Controliii+0x4e>
 8004738:	4b87      	ldr	r3, [pc, #540]	; (8004958 <_Z16Steering_Controliii+0x260>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a88      	ldr	r2, [pc, #544]	; (8004960 <_Z16Steering_Controliii+0x268>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b86      	ldr	r3, [pc, #536]	; (800495c <_Z16Steering_Controliii+0x264>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]

	_MotorSteering.err = sp-ap;
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	4618      	mov	r0, r3
 800474e:	f7fb ff09 	bl	8000564 <__aeabi_i2d>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4983      	ldr	r1, [pc, #524]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004758:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_MotorSteering.err > 1000.0){_MotorSteering.err = 1000.0;}
 800475c:	4b81      	ldr	r3, [pc, #516]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 800475e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	4b80      	ldr	r3, [pc, #512]	; (8004968 <_Z16Steering_Controliii+0x270>)
 8004768:	f7fc f9f6 	bl	8000b58 <__aeabi_dcmpgt>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <_Z16Steering_Controliii+0x86>
 8004772:	497c      	ldr	r1, [pc, #496]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <_Z16Steering_Controliii+0x270>)
 800477a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_MotorSteering.err < -1000.0){_MotorSteering.err = -1000.0;}
 800477e:	4b79      	ldr	r3, [pc, #484]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004780:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004784:	a372      	add	r3, pc, #456	; (adr r3, 8004950 <_Z16Steering_Controliii+0x258>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fc f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <_Z16Steering_Controliii+0xa8>
 8004794:	4973      	ldr	r1, [pc, #460]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004796:	a36e      	add	r3, pc, #440	; (adr r3, 8004950 <_Z16Steering_Controliii+0x258>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(time - time_tmp >= dt){
 80047a0:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <_Z16Steering_Controliii+0x260>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b6e      	ldr	r3, [pc, #440]	; (8004960 <_Z16Steering_Controliii+0x268>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	dc54      	bgt.n	800485a <_Z16Steering_Controliii+0x162>
		if(abs(_MotorSteering.err)>=10){
 80047b0:	4b6c      	ldr	r3, [pc, #432]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 80047b2:	ed93 7b06 	vldr	d7, [r3, #24]
 80047b6:	eeb0 0a47 	vmov.f32	s0, s14
 80047ba:	eef0 0a67 	vmov.f32	s1, s15
 80047be:	f7fc fccb 	bl	8001158 <_ZSt3absd>
 80047c2:	ec51 0b10 	vmov	r0, r1, d0
 80047c6:	2301      	movs	r3, #1
 80047c8:	461c      	mov	r4, r3
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	4b67      	ldr	r3, [pc, #412]	; (800496c <_Z16Steering_Controliii+0x274>)
 80047d0:	f7fc f9b8 	bl	8000b44 <__aeabi_dcmpge>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <_Z16Steering_Controliii+0xe6>
 80047da:	2300      	movs	r3, #0
 80047dc:	461c      	mov	r4, r3
 80047de:	b2e3      	uxtb	r3, r4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00c      	beq.n	80047fe <_Z16Steering_Controliii+0x106>
		_MotorSteering.sum_err += _MotorSteering.err;
 80047e4:	4b5f      	ldr	r3, [pc, #380]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 80047e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80047ea:	4b5e      	ldr	r3, [pc, #376]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 80047ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80047f0:	f7fb fd6c 	bl	80002cc <__adddf3>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	495a      	ldr	r1, [pc, #360]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 80047fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		}
		err_dt = (_MotorSteering.err - _MotorSteering.err_l)/(dt/1000);
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004800:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004804:	4b57      	ldr	r3, [pc, #348]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004806:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800480a:	f7fb fd5d 	bl	80002c8 <__aeabi_dsub>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4614      	mov	r4, r2
 8004814:	461d      	mov	r5, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a55      	ldr	r2, [pc, #340]	; (8004970 <_Z16Steering_Controliii+0x278>)
 800481a:	fb82 1203 	smull	r1, r2, r2, r3
 800481e:	1192      	asrs	r2, r2, #6
 8004820:	17db      	asrs	r3, r3, #31
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	4618      	mov	r0, r3
 8004826:	f7fb fe9d 	bl	8000564 <__aeabi_i2d>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4620      	mov	r0, r4
 8004830:	4629      	mov	r1, r5
 8004832:	f7fc f82b 	bl	800088c <__aeabi_ddiv>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f7fc f9ab 	bl	8000b98 <__aeabi_d2iz>
 8004842:	4603      	mov	r3, r0
 8004844:	61fb      	str	r3, [r7, #28]
		_MotorSteering.err_l = _MotorSteering.err;
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004848:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800484c:	4945      	ldr	r1, [pc, #276]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 800484e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		time_tmp = time;
 8004852:	4b41      	ldr	r3, [pc, #260]	; (8004958 <_Z16Steering_Controliii+0x260>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a42      	ldr	r2, [pc, #264]	; (8004960 <_Z16Steering_Controliii+0x268>)
 8004858:	6013      	str	r3, [r2, #0]
	}

	_encoder.steering_speed = (_MotorSteering.kp*_MotorSteering.err)
 800485a:	4b42      	ldr	r3, [pc, #264]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 800485c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004860:	4b40      	ldr	r3, [pc, #256]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004862:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004866:	f7fb fee7 	bl	8000638 <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4614      	mov	r4, r2
 8004870:	461d      	mov	r5, r3
			+ (_MotorSteering.ki*_MotorSteering.sum_err)
 8004872:	4b3c      	ldr	r3, [pc, #240]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004874:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004878:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 800487a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800487e:	f7fb fedb 	bl	8000638 <__aeabi_dmul>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4620      	mov	r0, r4
 8004888:	4629      	mov	r1, r5
 800488a:	f7fb fd1f 	bl	80002cc <__adddf3>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4690      	mov	r8, r2
 8004894:	4699      	mov	r9, r3
			+ (_MotorSteering.kd * err_dt);
 8004896:	4b33      	ldr	r3, [pc, #204]	; (8004964 <_Z16Steering_Controliii+0x26c>)
 8004898:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800489c:	69f8      	ldr	r0, [r7, #28]
 800489e:	f7fb fe61 	bl	8000564 <__aeabi_i2d>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fb fec5 	bl	8000638 <__aeabi_dmul>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4640      	mov	r0, r8
 80048b4:	4649      	mov	r1, r9
 80048b6:	f7fb fd09 	bl	80002cc <__adddf3>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
	_encoder.steering_speed = (_MotorSteering.kp*_MotorSteering.err)
 80048be:	4610      	mov	r0, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	f7fc f969 	bl	8000b98 <__aeabi_d2iz>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 80048ca:	6213      	str	r3, [r2, #32]

	if(_encoder.steering_speed > 0){
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dd0c      	ble.n	80048ee <_Z16Steering_Controliii+0x1f6>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048da:	4827      	ldr	r0, [pc, #156]	; (8004978 <_Z16Steering_Controliii+0x280>)
 80048dc:	f003 ff96 	bl	800880c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 80048e0:	2201      	movs	r2, #1
 80048e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048e6:	4824      	ldr	r0, [pc, #144]	; (8004978 <_Z16Steering_Controliii+0x280>)
 80048e8:	f003 ff90 	bl	800880c <HAL_GPIO_WritePin>
 80048ec:	e025      	b.n	800493a <_Z16Steering_Controliii+0x242>
	}
	else if(_encoder.steering_speed < 0){
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da11      	bge.n	800491a <_Z16Steering_Controliii+0x222>
		_encoder.steering_speed *= -1;
 80048f6:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	425b      	negs	r3, r3
 80048fc:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 80048fe:	6213      	str	r3, [r2, #32]
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8004900:	2201      	movs	r2, #1
 8004902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004906:	481c      	ldr	r0, [pc, #112]	; (8004978 <_Z16Steering_Controliii+0x280>)
 8004908:	f003 ff80 	bl	800880c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004912:	4819      	ldr	r0, [pc, #100]	; (8004978 <_Z16Steering_Controliii+0x280>)
 8004914:	f003 ff7a 	bl	800880c <HAL_GPIO_WritePin>
 8004918:	e00f      	b.n	800493a <_Z16Steering_Controliii+0x242>
	}
	else if(_encoder.steering_speed == 0){
 800491a:	4b16      	ldr	r3, [pc, #88]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <_Z16Steering_Controliii+0x242>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8004922:	2200      	movs	r2, #0
 8004924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004928:	4813      	ldr	r0, [pc, #76]	; (8004978 <_Z16Steering_Controliii+0x280>)
 800492a:	f003 ff6f 	bl	800880c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 800492e:	2200      	movs	r2, #0
 8004930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004934:	4810      	ldr	r0, [pc, #64]	; (8004978 <_Z16Steering_Controliii+0x280>)
 8004936:	f003 ff69 	bl	800880c <HAL_GPIO_WritePin>
	}

//	sprintf((char*)val,"Cureent_speed %d\r\n", _encoder.steering_speed);
//	HAL_UART_Transmit(&huart3, val, strlen((char*)val), 1000);

	if(_encoder.steering_speed > 1000) _encoder.steering_speed=1000;
 800493a:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004942:	dd1b      	ble.n	800497c <_Z16Steering_Controliii+0x284>
 8004944:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <_Z16Steering_Controliii+0x27c>)
 8004946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800494a:	621a      	str	r2, [r3, #32]
 800494c:	e021      	b.n	8004992 <_Z16Steering_Controliii+0x29a>
 800494e:	bf00      	nop
 8004950:	00000000 	.word	0x00000000
 8004954:	c08f4000 	.word	0xc08f4000
 8004958:	20000cf0 	.word	0x20000cf0
 800495c:	20000002 	.word	0x20000002
 8004960:	20000cf4 	.word	0x20000cf4
 8004964:	20000ca0 	.word	0x20000ca0
 8004968:	408f4000 	.word	0x408f4000
 800496c:	40240000 	.word	0x40240000
 8004970:	10624dd3 	.word	0x10624dd3
 8004974:	20000c48 	.word	0x20000c48
 8004978:	40021400 	.word	0x40021400
	else if(_encoder.steering_speed<200 && _encoder.steering_speed>0) _encoder.steering_speed=200;
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <_Z16Steering_Controliii+0x320>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	2bc7      	cmp	r3, #199	; 0xc7
 8004982:	dc06      	bgt.n	8004992 <_Z16Steering_Controliii+0x29a>
 8004984:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <_Z16Steering_Controliii+0x320>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	2b00      	cmp	r3, #0
 800498a:	dd02      	ble.n	8004992 <_Z16Steering_Controliii+0x29a>
 800498c:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <_Z16Steering_Controliii+0x320>)
 800498e:	22c8      	movs	r2, #200	; 0xc8
 8004990:	621a      	str	r2, [r3, #32]

	if(abs(_MotorSteering.err)<=10){
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <_Z16Steering_Controliii+0x324>)
 8004994:	ed93 7b06 	vldr	d7, [r3, #24]
 8004998:	eeb0 0a47 	vmov.f32	s0, s14
 800499c:	eef0 0a67 	vmov.f32	s1, s15
 80049a0:	f7fc fbda 	bl	8001158 <_ZSt3absd>
 80049a4:	ec51 0b10 	vmov	r0, r1, d0
 80049a8:	2301      	movs	r3, #1
 80049aa:	461c      	mov	r4, r3
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <_Z16Steering_Controliii+0x328>)
 80049b2:	f7fc f8bd 	bl	8000b30 <__aeabi_dcmple>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <_Z16Steering_Controliii+0x2c8>
 80049bc:	2300      	movs	r3, #0
 80049be:	461c      	mov	r4, r3
 80049c0:	b2e3      	uxtb	r3, r4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <_Z16Steering_Controliii+0x2d4>
		_encoder.steering_speed = 0;
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <_Z16Steering_Controliii+0x320>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	621a      	str	r2, [r3, #32]
	}
	TIM4->CCR1 = _encoder.steering_speed;
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <_Z16Steering_Controliii+0x320>)
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <_Z16Steering_Controliii+0x32c>)
 80049d2:	635a      	str	r2, [r3, #52]	; 0x34
//	if(_MotorSteering.sum_err > -650.0 && _MotorSteering.sum_err < 650.0)steering_PID_state = true;
//	if(_MotorSteering.sum_err < -650.0 && _MotorSteering.sum_err > 650.0)steering_PID_state = false;

	motor_fb_.steering_angle_sp = sp;
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7fb fdc5 	bl	8000564 <__aeabi_i2d>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4912      	ldr	r1, [pc, #72]	; (8004a28 <_Z16Steering_Controliii+0x330>)
 80049e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	motor_fb_.steering_angular_fb = _encoder.encoder_pose;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <_Z16Steering_Controliii+0x320>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fb fdbb 	bl	8000564 <__aeabi_i2d>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	490d      	ldr	r1, [pc, #52]	; (8004a28 <_Z16Steering_Controliii+0x330>)
 80049f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	motor_fb_.steering_rpm_fb = TIM4->CCR1;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <_Z16Steering_Controliii+0x32c>)
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fb fda1 	bl	8000544 <__aeabi_ui2d>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4908      	ldr	r1, [pc, #32]	; (8004a28 <_Z16Steering_Controliii+0x330>)
 8004a08:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
//	motor_fb_.bldc_mps_fb = _MotorSteering.err;
//	motor_fb_.bldc_kmph_fb = _MotorSteering.sum_err;
//	motor_fb_.bldc_rpm_fb = _encoder.steering_speed;

}
 8004a0c:	bf00      	nop
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a16:	bf00      	nop
 8004a18:	20000c48 	.word	0x20000c48
 8004a1c:	20000ca0 	.word	0x20000ca0
 8004a20:	40240000 	.word	0x40240000
 8004a24:	40000800 	.word	0x40000800
 8004a28:	20001648 	.word	0x20001648

08004a2c <_Z13Steering_Initv>:

void Steering_Init(){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
	bool set_centure = true;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
	bool set_wheel = false;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73bb      	strb	r3, [r7, #14]
	bool seton_right = true;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	737b      	strb	r3, [r7, #13]
	bool seton_left = false;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	733b      	strb	r3, [r7, #12]
	int go_right, go_left = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	607b      	str	r3, [r7, #4]

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.0);
 8004a46:	2300      	movs	r3, #0
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	485e      	ldr	r0, [pc, #376]	; (8004bc8 <_Z13Steering_Initv+0x19c>)
 8004a4e:	f002 fd74 	bl	800753a <HAL_DAC_SetValue>
	while(set_centure){
 8004a52:	e065      	b.n	8004b20 <_Z13Steering_Initv+0xf4>
		if(seton_right){ //6
 8004a54:	7b7b      	ldrb	r3, [r7, #13]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d026      	beq.n	8004aa8 <_Z13Steering_Initv+0x7c>
			while(!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)){
 8004a5a:	e00f      	b.n	8004a7c <_Z13Steering_Initv+0x50>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a62:	485a      	ldr	r0, [pc, #360]	; (8004bcc <_Z13Steering_Initv+0x1a0>)
 8004a64:	f003 fed2 	bl	800880c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a6e:	4857      	ldr	r0, [pc, #348]	; (8004bcc <_Z13Steering_Initv+0x1a0>)
 8004a70:	f003 fecc 	bl	800880c <HAL_GPIO_WritePin>
				TIM4->CCR1 = 300;
 8004a74:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <_Z13Steering_Initv+0x1a4>)
 8004a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a7a:	635a      	str	r2, [r3, #52]	; 0x34
			while(!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)){
 8004a7c:	2140      	movs	r1, #64	; 0x40
 8004a7e:	4855      	ldr	r0, [pc, #340]	; (8004bd4 <_Z13Steering_Initv+0x1a8>)
 8004a80:	f003 feac 	bl	80087dc <HAL_GPIO_ReadPin>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e3      	bne.n	8004a5c <_Z13Steering_Initv+0x30>
			}
			TIM4->CCR1 = 0;
 8004a94:	4b4e      	ldr	r3, [pc, #312]	; (8004bd0 <_Z13Steering_Initv+0x1a4>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34
			go_right = _encoder.encoder_pose;
 8004a9a:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <_Z13Steering_Initv+0x1ac>)
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60bb      	str	r3, [r7, #8]
			seton_left = true;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	733b      	strb	r3, [r7, #12]
			seton_right	= false;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	737b      	strb	r3, [r7, #13]
		}
		HAL_Delay(600);
 8004aa8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004aac:	f002 fb9c 	bl	80071e8 <HAL_Delay>
		if(seton_left){ //5
 8004ab0:	7b3b      	ldrb	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d030      	beq.n	8004b18 <_Z13Steering_Initv+0xec>
			while(!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)){
 8004ab6:	e00f      	b.n	8004ad8 <_Z13Steering_Initv+0xac>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004abe:	4843      	ldr	r0, [pc, #268]	; (8004bcc <_Z13Steering_Initv+0x1a0>)
 8004ac0:	f003 fea4 	bl	800880c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004aca:	4840      	ldr	r0, [pc, #256]	; (8004bcc <_Z13Steering_Initv+0x1a0>)
 8004acc:	f003 fe9e 	bl	800880c <HAL_GPIO_WritePin>
				TIM4->CCR1 = 300;
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <_Z13Steering_Initv+0x1a4>)
 8004ad2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ad6:	635a      	str	r2, [r3, #52]	; 0x34
			while(!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)){
 8004ad8:	2120      	movs	r1, #32
 8004ada:	483e      	ldr	r0, [pc, #248]	; (8004bd4 <_Z13Steering_Initv+0x1a8>)
 8004adc:	f003 fe7e 	bl	80087dc <HAL_GPIO_ReadPin>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e3      	bne.n	8004ab8 <_Z13Steering_Initv+0x8c>
			}
			TIM4->CCR1 = 0;
 8004af0:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <_Z13Steering_Initv+0x1a4>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34
			go_left = _encoder.encoder_pose;
 8004af6:	4b38      	ldr	r3, [pc, #224]	; (8004bd8 <_Z13Steering_Initv+0x1ac>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	607b      	str	r3, [r7, #4]
			setpoint_middle = (go_left + go_right)/2;
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4413      	add	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	da00      	bge.n	8004b08 <_Z13Steering_Initv+0xdc>
 8004b06:	3301      	adds	r3, #1
 8004b08:	105b      	asrs	r3, r3, #1
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <_Z13Steering_Initv+0x1b0>)
 8004b0e:	601a      	str	r2, [r3, #0]
			seton_left = false;
 8004b10:	2300      	movs	r3, #0
 8004b12:	733b      	strb	r3, [r7, #12]
			seton_right	= false;
 8004b14:	2300      	movs	r3, #0
 8004b16:	737b      	strb	r3, [r7, #13]
		}
		set_wheel = true;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73bb      	strb	r3, [r7, #14]
		set_centure = false;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	73fb      	strb	r3, [r7, #15]
	while(set_centure){
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d196      	bne.n	8004a54 <_Z13Steering_Initv+0x28>
	}
	HAL_Delay(600);
 8004b26:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004b2a:	f002 fb5d 	bl	80071e8 <HAL_Delay>
	while(set_wheel){
 8004b2e:	e041      	b.n	8004bb4 <_Z13Steering_Initv+0x188>
		Steering_Control(setpoint_middle,_encoder.encoder_pose,100);
 8004b30:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <_Z13Steering_Initv+0x1b0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a28      	ldr	r2, [pc, #160]	; (8004bd8 <_Z13Steering_Initv+0x1ac>)
 8004b36:	69d1      	ldr	r1, [r2, #28]
 8004b38:	2264      	movs	r2, #100	; 0x64
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fddc 	bl	80046f8 <_Z16Steering_Controliii>
		if(_encoder.encoder_pose<=setpoint_middle+5 && _encoder.encoder_pose>=setpoint_middle-5){
 8004b40:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <_Z13Steering_Initv+0x1ac>)
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <_Z13Steering_Initv+0x1b0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3305      	adds	r3, #5
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	dc32      	bgt.n	8004bb4 <_Z13Steering_Initv+0x188>
 8004b4e:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <_Z13Steering_Initv+0x1ac>)
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <_Z13Steering_Initv+0x1b0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3b05      	subs	r3, #5
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	db2b      	blt.n	8004bb4 <_Z13Steering_Initv+0x188>
			htim3.Instance->CNT = (setpoint_middle-htim3.Instance->CNT)+500;
 8004b5c:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <_Z13Steering_Initv+0x1b0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	4b1f      	ldr	r3, [pc, #124]	; (8004be0 <_Z13Steering_Initv+0x1b4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1ad2      	subs	r2, r2, r3
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <_Z13Steering_Initv+0x1b4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CCR1 = 0;
 8004b74:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <_Z13Steering_Initv+0x1a4>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34
			setpoint_middle = 500; // +- ~190
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <_Z13Steering_Initv+0x1b0>)
 8004b7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b80:	601a      	str	r2, [r3, #0]
			setpoint_left = 500 - ((go_right - go_left)/2); //300 - left
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	da00      	bge.n	8004b8e <_Z13Steering_Initv+0x162>
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	105b      	asrs	r3, r3, #1
 8004b90:	425b      	negs	r3, r3
 8004b92:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004b96:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <_Z13Steering_Initv+0x1b8>)
 8004b98:	6013      	str	r3, [r2, #0]
			setpoint_right = 500 + ((go_right - go_left)/2); //~700 - right
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da00      	bge.n	8004ba6 <_Z13Steering_Initv+0x17a>
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	105b      	asrs	r3, r3, #1
 8004ba8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004bac:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <_Z13Steering_Initv+0x1bc>)
 8004bae:	6013      	str	r3, [r2, #0]
			set_wheel = false;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73bb      	strb	r3, [r7, #14]
	while(set_wheel){
 8004bb4:	7bbb      	ldrb	r3, [r7, #14]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ba      	bne.n	8004b30 <_Z13Steering_Initv+0x104>
//			sprintf((char*)val,"Cureent %d, Left %d,Right %d\r\n", htim3.Instance->CNT, setpoint_left, setpoint_right);
//			HAL_UART_Transmit(&huart3, val, strlen((char*)val), 1000);
		}

	}
	steering_init = true;
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <_Z13Steering_Initv+0x1c0>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000370 	.word	0x20000370
 8004bcc:	40021400 	.word	0x40021400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	20000c48 	.word	0x20000c48
 8004bdc:	20000d04 	.word	0x20000d04
 8004be0:	200004cc 	.word	0x200004cc
 8004be4:	20000d00 	.word	0x20000d00
 8004be8:	20000cfc 	.word	0x20000cfc
 8004bec:	20000cf8 	.word	0x20000cf8

08004bf0 <_Z9ros_setupv>:

void ros_setup(void) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
	nh_.initNode();
 8004bf6:	482e      	ldr	r0, [pc, #184]	; (8004cb0 <_Z9ros_setupv+0xc0>)
 8004bf8:	f001 f870 	bl	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh_.advertise(speed_fb_pub_);
 8004bfc:	492d      	ldr	r1, [pc, #180]	; (8004cb4 <_Z9ros_setupv+0xc4>)
 8004bfe:	482c      	ldr	r0, [pc, #176]	; (8004cb0 <_Z9ros_setupv+0xc0>)
 8004c00:	f001 f889 	bl	8005d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh_.subscribe(speed_sp_sub_);
 8004c04:	492c      	ldr	r1, [pc, #176]	; (8004cb8 <_Z9ros_setupv+0xc8>)
 8004c06:	482a      	ldr	r0, [pc, #168]	; (8004cb0 <_Z9ros_setupv+0xc0>)
 8004c08:	f001 f8b5 	bl	8005d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

	motor_fb_.bldc_rpm_sp = 0.0;
 8004c0c:	492b      	ldr	r1, [pc, #172]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	motor_fb_.bldc_rpm_fb = 0.0;
 8004c1a:	4928      	ldr	r1, [pc, #160]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor_fb_.bldc_mps_fb = 0.0;
 8004c28:	4924      	ldr	r1, [pc, #144]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9c1 2306 	strd	r2, r3, [r1, #24]
	motor_fb_.bldc_kmph_fb = 0.0;
 8004c36:	4921      	ldr	r1, [pc, #132]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9c1 2308 	strd	r2, r3, [r1, #32]
	motor_fb_.steering_angle_sp = 0.0;
 8004c44:	491d      	ldr	r1, [pc, #116]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	motor_fb_.steering_angular_fb = 0.0;
 8004c52:	491a      	ldr	r1, [pc, #104]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	motor_fb_.steering_rpm_fb = 0.0;
 8004c60:	4916      	ldr	r1, [pc, #88]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	motor_fb_.forward_motor = true;
 8004c6e:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <_Z9ros_setupv+0xcc>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	ros::Time ros_time_setup = nh_.now();
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <_Z9ros_setupv+0xc0>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fff2 	bl	8005c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>

	for (int i = 0; i < 4; ++i) {
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e00b      	b.n	8004c9e <_Z9ros_setupv+0xae>
		last_time_[i] = ros_time_setup;
 8004c86:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <_Z9ros_setupv+0xd0>)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	1d3a      	adds	r2, r7, #4
 8004c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c94:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 4; ++i) {
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	ddf0      	ble.n	8004c86 <_Z9ros_setupv+0x96>
	}
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000d08 	.word	0x20000d08
 8004cb4:	200016b0 	.word	0x200016b0
 8004cb8:	200016c8 	.word	0x200016c8
 8004cbc:	20001648 	.word	0x20001648
 8004cc0:	20001690 	.word	0x20001690
 8004cc4:	00000000 	.word	0x00000000

08004cc8 <_Z8ros_loopv>:

void ros_loop(void) {
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b08b      	sub	sp, #44	; 0x2c
 8004ccc:	af00      	add	r7, sp, #0
	ros::Time time_now = nh_.now();
 8004cce:	463b      	mov	r3, r7
 8004cd0:	497d      	ldr	r1, [pc, #500]	; (8004ec8 <_Z8ros_loopv+0x200>)
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 ffc6 	bl	8005c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
	if ((time_now - last_time_[SPEED_SP]).toSec() > 1.0) {
 8004cd8:	f107 0308 	add.w	r3, r7, #8
 8004cdc:	4639      	mov	r1, r7
 8004cde:	4a7b      	ldr	r2, [pc, #492]	; (8004ecc <_Z8ros_loopv+0x204>)
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc fa15 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fc fa48 	bl	8001180 <_ZNK3ros8Duration5toSecEv>
 8004cf0:	ec51 0b10 	vmov	r0, r1, d0
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	461c      	mov	r4, r3
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	4b74      	ldr	r3, [pc, #464]	; (8004ed0 <_Z8ros_loopv+0x208>)
 8004cfe:	f7fb ff2b 	bl	8000b58 <__aeabi_dcmpgt>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <_Z8ros_loopv+0x44>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	b2e3      	uxtb	r3, r4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <_Z8ros_loopv+0x66>
		_cmd_vel.bldc_sp = 0.0;
 8004d12:	4970      	ldr	r1, [pc, #448]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9c1 2300 	strd	r2, r3, [r1]
		_cmd_vel.angle_sp = 0.0;
 8004d20:	496c      	ldr	r1, [pc, #432]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}

	if ((time_now - last_time_[PUBLISH]).toSec() > 0.03) {
 8004d2e:	f107 0310 	add.w	r3, r7, #16
 8004d32:	4639      	mov	r1, r7
 8004d34:	4a68      	ldr	r2, [pc, #416]	; (8004ed8 <_Z8ros_loopv+0x210>)
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc f9ea 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 8004d3c:	f107 0310 	add.w	r3, r7, #16
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fc fa1d 	bl	8001180 <_ZNK3ros8Duration5toSecEv>
 8004d46:	ec51 0b10 	vmov	r0, r1, d0
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	461c      	mov	r4, r3
 8004d4e:	a358      	add	r3, pc, #352	; (adr r3, 8004eb0 <_Z8ros_loopv+0x1e8>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb ff00 	bl	8000b58 <__aeabi_dcmpgt>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <_Z8ros_loopv+0x9a>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	461c      	mov	r4, r3
 8004d62:	b2e3      	uxtb	r3, r4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <_Z8ros_loopv+0xb6>
		speed_fb_pub_.publish(&motor_fb_);
 8004d68:	495c      	ldr	r1, [pc, #368]	; (8004edc <_Z8ros_loopv+0x214>)
 8004d6a:	485d      	ldr	r0, [pc, #372]	; (8004ee0 <_Z8ros_loopv+0x218>)
 8004d6c:	f7fd f89d 	bl	8001eaa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		last_time_[PUBLISH] = time_now;
 8004d70:	4b56      	ldr	r3, [pc, #344]	; (8004ecc <_Z8ros_loopv+0x204>)
 8004d72:	3308      	adds	r3, #8
 8004d74:	463a      	mov	r2, r7
 8004d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d7a:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	if ((time_now - last_time_[BLDC]).toSec() > 0.01) {
 8004d7e:	f107 0318 	add.w	r3, r7, #24
 8004d82:	4639      	mov	r1, r7
 8004d84:	4a57      	ldr	r2, [pc, #348]	; (8004ee4 <_Z8ros_loopv+0x21c>)
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc f9c2 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 8004d8c:	f107 0318 	add.w	r3, r7, #24
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fc f9f5 	bl	8001180 <_ZNK3ros8Duration5toSecEv>
 8004d96:	ec51 0b10 	vmov	r0, r1, d0
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	461c      	mov	r4, r3
 8004d9e:	a346      	add	r3, pc, #280	; (adr r3, 8004eb8 <_Z8ros_loopv+0x1f0>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fed8 	bl	8000b58 <__aeabi_dcmpgt>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <_Z8ros_loopv+0xea>
 8004dae:	2300      	movs	r3, #0
 8004db0:	461c      	mov	r4, r3
 8004db2:	b2e3      	uxtb	r3, r4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00f      	beq.n	8004dd8 <_Z8ros_loopv+0x110>
		DACControlSpeed(_cmd_vel.bldc_sp);
 8004db8:	4b46      	ldr	r3, [pc, #280]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004dba:	ed93 7b00 	vldr	d7, [r3]
 8004dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8004dc2:	eef0 0a67 	vmov.f32	s1, s15
 8004dc6:	f7ff fbeb 	bl	80045a0 <_Z15DACControlSpeedd>
		last_time_[BLDC] = time_now;
 8004dca:	4b40      	ldr	r3, [pc, #256]	; (8004ecc <_Z8ros_loopv+0x204>)
 8004dcc:	3310      	adds	r3, #16
 8004dce:	463a      	mov	r2, r7
 8004dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dd4:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	if ((time_now - last_time_[STEERING]).toSec() > 0.01) {
 8004dd8:	f107 0320 	add.w	r3, r7, #32
 8004ddc:	4639      	mov	r1, r7
 8004dde:	4a42      	ldr	r2, [pc, #264]	; (8004ee8 <_Z8ros_loopv+0x220>)
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fc f995 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 8004de6:	f107 0320 	add.w	r3, r7, #32
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fc f9c8 	bl	8001180 <_ZNK3ros8Duration5toSecEv>
 8004df0:	ec51 0b10 	vmov	r0, r1, d0
 8004df4:	2301      	movs	r3, #1
 8004df6:	461c      	mov	r4, r3
 8004df8:	a32f      	add	r3, pc, #188	; (adr r3, 8004eb8 <_Z8ros_loopv+0x1f0>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb feab 	bl	8000b58 <__aeabi_dcmpgt>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <_Z8ros_loopv+0x144>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	461c      	mov	r4, r3
 8004e0c:	b2e3      	uxtb	r3, r4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d045      	beq.n	8004e9e <_Z8ros_loopv+0x1d6>
		if(_cmd_vel.angle_sp > 37){_cmd_vel.angle_sp = 37;} // limit right
 8004e12:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004e14:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	4b33      	ldr	r3, [pc, #204]	; (8004eec <_Z8ros_loopv+0x224>)
 8004e1e:	f7fb fe9b 	bl	8000b58 <__aeabi_dcmpgt>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <_Z8ros_loopv+0x16c>
 8004e28:	492a      	ldr	r1, [pc, #168]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <_Z8ros_loopv+0x224>)
 8004e30:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(_cmd_vel.angle_sp < -37){_cmd_vel.angle_sp = -37;} // limit left
 8004e34:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004e36:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <_Z8ros_loopv+0x228>)
 8004e40:	f7fb fe6c 	bl	8000b1c <__aeabi_dcmplt>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <_Z8ros_loopv+0x18e>
 8004e4a:	4922      	ldr	r1, [pc, #136]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <_Z8ros_loopv+0x228>)
 8004e52:	e9c1 2304 	strd	r2, r3, [r1, #16]
		Steering_Control(int((_cmd_vel.angle_sp*10.89)+500),_encoder.encoder_pose,100);
 8004e56:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <_Z8ros_loopv+0x20c>)
 8004e58:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e5c:	a318      	add	r3, pc, #96	; (adr r3, 8004ec0 <_Z8ros_loopv+0x1f8>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f7fb fbe9 	bl	8000638 <__aeabi_dmul>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <_Z8ros_loopv+0x22c>)
 8004e74:	f7fb fa2a 	bl	80002cc <__adddf3>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f7fb fe8a 	bl	8000b98 <__aeabi_d2iz>
 8004e84:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <_Z8ros_loopv+0x230>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	2264      	movs	r2, #100	; 0x64
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f7ff fc34 	bl	80046f8 <_Z16Steering_Controliii>
		last_time_[STEERING] = time_now;
 8004e90:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <_Z8ros_loopv+0x204>)
 8004e92:	3318      	adds	r3, #24
 8004e94:	463a      	mov	r2, r7
 8004e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e9a:	e883 0003 	stmia.w	r3, {r0, r1}
	}

	nh_.spinOnce();
 8004e9e:	480a      	ldr	r0, [pc, #40]	; (8004ec8 <_Z8ros_loopv+0x200>)
 8004ea0:	f000 ff94 	bl	8005dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004ea4:	bf00      	nop
 8004ea6:	372c      	adds	r7, #44	; 0x2c
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}
 8004eac:	f3af 8000 	nop.w
 8004eb0:	eb851eb8 	.word	0xeb851eb8
 8004eb4:	3f9eb851 	.word	0x3f9eb851
 8004eb8:	47ae147b 	.word	0x47ae147b
 8004ebc:	3f847ae1 	.word	0x3f847ae1
 8004ec0:	147ae148 	.word	0x147ae148
 8004ec4:	4025c7ae 	.word	0x4025c7ae
 8004ec8:	20000d08 	.word	0x20000d08
 8004ecc:	20001690 	.word	0x20001690
 8004ed0:	3ff00000 	.word	0x3ff00000
 8004ed4:	20000c00 	.word	0x20000c00
 8004ed8:	20001698 	.word	0x20001698
 8004edc:	20001648 	.word	0x20001648
 8004ee0:	200016b0 	.word	0x200016b0
 8004ee4:	200016a0 	.word	0x200016a0
 8004ee8:	200016a8 	.word	0x200016a8
 8004eec:	40428000 	.word	0x40428000
 8004ef0:	c0428000 	.word	0xc0428000
 8004ef4:	407f4000 	.word	0x407f4000
 8004ef8:	20000c48 	.word	0x20000c48
 8004efc:	00000000 	.word	0x00000000

08004f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f04:	f002 f913 	bl	800712e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f08:	f000 f8f0 	bl	80050ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f0c:	f000 fc68 	bl	80057e0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004f10:	f000 fc40 	bl	8005794 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8004f14:	f000 fbd8 	bl	80056c8 <_ZL19MX_USART3_UART_Initv>
  MX_ETH_Init();
 8004f18:	f000 f99a 	bl	8005250 <_ZL11MX_ETH_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8004f1c:	f000 fc08 	bl	8005730 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_DAC_Init();
 8004f20:	f000 f962 	bl	80051e8 <_ZL11MX_DAC_Initv>
  MX_TIM1_Init();
 8004f24:	f000 f9e6 	bl	80052f4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8004f28:	f000 fa48 	bl	80053bc <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8004f2c:	f000 faa4 	bl	8005478 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8004f30:	f000 fb6c 	bl	800560c <_ZL12MX_TIM5_Initv>
  MX_TIM4_Init();
 8004f34:	f000 fb00 	bl	8005538 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

// ROS
	ros_setup();
 8004f38:	f7ff fe5a 	bl	8004bf0 <_Z9ros_setupv>

	// Interrupt
	HAL_TIM_Base_Start_IT(&htim2);
 8004f3c:	485a      	ldr	r0, [pc, #360]	; (80050a8 <main+0x1a8>)
 8004f3e:	f004 ff53 	bl	8009de8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8004f42:	485a      	ldr	r0, [pc, #360]	; (80050ac <main+0x1ac>)
 8004f44:	f004 ff50 	bl	8009de8 <HAL_TIM_Base_Start_IT>

	//PWM
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4859      	ldr	r0, [pc, #356]	; (80050b0 <main+0x1b0>)
 8004f4c:	f005 f81c 	bl	8009f88 <HAL_TIM_PWM_Start>

	// Hall & Encoder
	htim3.Instance->CNT = 500;
 8004f50:	4b58      	ldr	r3, [pc, #352]	; (80050b4 <main+0x1b4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8004f5a:	213c      	movs	r1, #60	; 0x3c
 8004f5c:	4856      	ldr	r0, [pc, #344]	; (80050b8 <main+0x1b8>)
 8004f5e:	f005 f9b3 	bl	800a2c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004f62:	213c      	movs	r1, #60	; 0x3c
 8004f64:	4853      	ldr	r0, [pc, #332]	; (80050b4 <main+0x1b4>)
 8004f66:	f005 f9af 	bl	800a2c8 <HAL_TIM_Encoder_Start>

	// DAC
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4853      	ldr	r0, [pc, #332]	; (80050bc <main+0x1bc>)
 8004f6e:	f002 fa92 	bl	8007496 <HAL_DAC_Start>

	//PID Parameter Initial
	_MotorBLDC.kp = 80;
 8004f72:	4953      	ldr	r1, [pc, #332]	; (80050c0 <main+0x1c0>)
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4b52      	ldr	r3, [pc, #328]	; (80050c4 <main+0x1c4>)
 8004f7a:	e9c1 2300 	strd	r2, r3, [r1]
	_MotorBLDC.ki = 10;
 8004f7e:	4950      	ldr	r1, [pc, #320]	; (80050c0 <main+0x1c0>)
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	4b50      	ldr	r3, [pc, #320]	; (80050c8 <main+0x1c8>)
 8004f86:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_MotorBLDC.kd = 0;
 8004f8a:	494d      	ldr	r1, [pc, #308]	; (80050c0 <main+0x1c0>)
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_MotorBLDC.sum_err = 0;
 8004f98:	4949      	ldr	r1, [pc, #292]	; (80050c0 <main+0x1c0>)
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	_MotorSteering.kp = 1.5;
 8004fa6:	4949      	ldr	r1, [pc, #292]	; (80050cc <main+0x1cc>)
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	4b48      	ldr	r3, [pc, #288]	; (80050d0 <main+0x1d0>)
 8004fae:	e9c1 2300 	strd	r2, r3, [r1]
	_MotorSteering.ki = 0.001;
 8004fb2:	4946      	ldr	r1, [pc, #280]	; (80050cc <main+0x1cc>)
 8004fb4:	a33a      	add	r3, pc, #232	; (adr r3, 80050a0 <main+0x1a0>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_MotorSteering.kd = 5;
 8004fbe:	4943      	ldr	r1, [pc, #268]	; (80050cc <main+0x1cc>)
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <main+0x1d4>)
 8004fc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_MotorSteering.sum_err = 0.0;
 8004fca:	4940      	ldr	r1, [pc, #256]	; (80050cc <main+0x1cc>)
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	//Set the mid point of the encoder before initiate
	htim3.Instance->CNT = 500;
 8004fd8:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <main+0x1b4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
	Steering_Init();
 8004fe2:	f7ff fd23 	bl	8004a2c <_Z13Steering_Initv>

	HAL_Delay(1000);
 8004fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fea:	f002 f8fd 	bl	80071e8 <HAL_Delay>
  {
//	  steering_PID_state = false;
//	  number_testing = 0;


	   if(initial_loop){pre_bldc_sp = _cmd_vel.bldc_sp; initial_loop = false;}
 8004fee:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <main+0x1d8>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <main+0x108>
 8004ff6:	4b39      	ldr	r3, [pc, #228]	; (80050dc <main+0x1dc>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	4938      	ldr	r1, [pc, #224]	; (80050e0 <main+0x1e0>)
 8004ffe:	e9c1 2300 	strd	r2, r3, [r1]
 8005002:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <main+0x1d8>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
	   lastest_bldc_sp = _cmd_vel.bldc_sp;
 8005008:	4b34      	ldr	r3, [pc, #208]	; (80050dc <main+0x1dc>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	4935      	ldr	r1, [pc, #212]	; (80050e4 <main+0x1e4>)
 8005010:	e9c1 2300 	strd	r2, r3, [r1]
	   if(pre_bldc_sp>0 && lastest_bldc_sp <=0){hold_bldc_sp = true; pre_bldc_sp = lastest_bldc_sp;}
 8005014:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <main+0x1e0>)
 8005016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	f7fb fd99 	bl	8000b58 <__aeabi_dcmpgt>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d014      	beq.n	8005056 <main+0x156>
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <main+0x1e4>)
 800502e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	f7fb fd79 	bl	8000b30 <__aeabi_dcmple>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <main+0x156>
 8005044:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <main+0x1e8>)
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <main+0x1e4>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	4923      	ldr	r1, [pc, #140]	; (80050e0 <main+0x1e0>)
 8005052:	e9c1 2300 	strd	r2, r3, [r1]
	   if(pre_bldc_sp<=0 && lastest_bldc_sp >0){hold_bldc_sp = true; pre_bldc_sp = lastest_bldc_sp;}
 8005056:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <main+0x1e0>)
 8005058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	f7fb fd64 	bl	8000b30 <__aeabi_dcmple>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d014      	beq.n	8005098 <main+0x198>
 800506e:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <main+0x1e4>)
 8005070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	f7fb fd6c 	bl	8000b58 <__aeabi_dcmpgt>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <main+0x198>
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <main+0x1e8>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <main+0x1e4>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	4913      	ldr	r1, [pc, #76]	; (80050e0 <main+0x1e0>)
 8005094:	e9c1 2300 	strd	r2, r3, [r1]

	   ros_loop();
 8005098:	f7ff fe16 	bl	8004cc8 <_Z8ros_loopv>
	   if(initial_loop){pre_bldc_sp = _cmd_vel.bldc_sp; initial_loop = false;}
 800509c:	e7a7      	b.n	8004fee <main+0xee>
 800509e:	bf00      	nop
 80050a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80050a4:	3f50624d 	.word	0x3f50624d
 80050a8:	20000480 	.word	0x20000480
 80050ac:	20000564 	.word	0x20000564
 80050b0:	20000518 	.word	0x20000518
 80050b4:	200004cc 	.word	0x200004cc
 80050b8:	20000434 	.word	0x20000434
 80050bc:	20000370 	.word	0x20000370
 80050c0:	20000c70 	.word	0x20000c70
 80050c4:	40540000 	.word	0x40540000
 80050c8:	40240000 	.word	0x40240000
 80050cc:	20000ca0 	.word	0x20000ca0
 80050d0:	3ff80000 	.word	0x3ff80000
 80050d4:	40140000 	.word	0x40140000
 80050d8:	20000001 	.word	0x20000001
 80050dc:	20000c00 	.word	0x20000c00
 80050e0:	20000ce0 	.word	0x20000ce0
 80050e4:	20000ce8 	.word	0x20000ce8
 80050e8:	20000cd9 	.word	0x20000cd9

080050ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b094      	sub	sp, #80	; 0x50
 80050f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050f2:	f107 0320 	add.w	r3, r7, #32
 80050f6:	2230      	movs	r2, #48	; 0x30
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f008 fe8d 	bl	800de1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	60da      	str	r2, [r3, #12]
 800510e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005110:	f003 fcf8 	bl	8008b04 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005114:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <_Z18SystemClock_Configv+0xf4>)
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	4a31      	ldr	r2, [pc, #196]	; (80051e0 <_Z18SystemClock_Configv+0xf4>)
 800511a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511e:	6413      	str	r3, [r2, #64]	; 0x40
 8005120:	4b2f      	ldr	r3, [pc, #188]	; (80051e0 <_Z18SystemClock_Configv+0xf4>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800512c:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <_Z18SystemClock_Configv+0xf8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <_Z18SystemClock_Configv+0xf8>)
 8005132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <_Z18SystemClock_Configv+0xf8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005144:	2301      	movs	r3, #1
 8005146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005148:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800514e:	2302      	movs	r3, #2
 8005150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005158:	2304      	movs	r3, #4
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800515c:	23d8      	movs	r3, #216	; 0xd8
 800515e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005160:	2302      	movs	r3, #2
 8005162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8005164:	2309      	movs	r3, #9
 8005166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005168:	f107 0320 	add.w	r3, r7, #32
 800516c:	4618      	mov	r0, r3
 800516e:	f003 fd29 	bl	8008bc4 <HAL_RCC_OscConfig>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8005182:	f000 fce5 	bl	8005b50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005186:	f003 fccd 	bl	8008b24 <HAL_PWREx_EnableOverDrive>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 800519a:	f000 fcd9 	bl	8005b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800519e:	230f      	movs	r3, #15
 80051a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051a2:	2302      	movs	r3, #2
 80051a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80051aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80051ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80051b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80051b6:	f107 030c 	add.w	r3, r7, #12
 80051ba:	2107      	movs	r1, #7
 80051bc:	4618      	mov	r0, r3
 80051be:	f003 ffa5 	bl	800910c <HAL_RCC_ClockConfig>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 80051d2:	f000 fcbd 	bl	8005b50 <Error_Handler>
  }
}
 80051d6:	bf00      	nop
 80051d8:	3750      	adds	r7, #80	; 0x50
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40007000 	.word	0x40007000

080051e8 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80051ee:	463b      	mov	r3, r7
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <_ZL11MX_DAC_Initv+0x60>)
 80051f8:	4a14      	ldr	r2, [pc, #80]	; (800524c <_ZL11MX_DAC_Initv+0x64>)
 80051fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80051fc:	4812      	ldr	r0, [pc, #72]	; (8005248 <_ZL11MX_DAC_Initv+0x60>)
 80051fe:	f002 f928 	bl	8007452 <HAL_DAC_Init>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8005212:	f000 fc9d 	bl	8005b50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005216:	2300      	movs	r3, #0
 8005218:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800521e:	463b      	mov	r3, r7
 8005220:	2200      	movs	r2, #0
 8005222:	4619      	mov	r1, r3
 8005224:	4808      	ldr	r0, [pc, #32]	; (8005248 <_ZL11MX_DAC_Initv+0x60>)
 8005226:	f002 f9ad 	bl	8007584 <HAL_DAC_ConfigChannel>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 800523a:	f000 fc89 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000370 	.word	0x20000370
 800524c:	40007400 	.word	0x40007400

08005250 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8005254:	4b21      	ldr	r3, [pc, #132]	; (80052dc <_ZL11MX_ETH_Initv+0x8c>)
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <_ZL11MX_ETH_Initv+0x90>)
 8005258:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800525a:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <_ZL11MX_ETH_Initv+0x94>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <_ZL11MX_ETH_Initv+0x94>)
 8005262:	2280      	movs	r2, #128	; 0x80
 8005264:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <_ZL11MX_ETH_Initv+0x94>)
 8005268:	22e1      	movs	r2, #225	; 0xe1
 800526a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <_ZL11MX_ETH_Initv+0x94>)
 800526e:	2200      	movs	r2, #0
 8005270:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <_ZL11MX_ETH_Initv+0x94>)
 8005274:	2200      	movs	r2, #0
 8005276:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <_ZL11MX_ETH_Initv+0x94>)
 800527a:	2200      	movs	r2, #0
 800527c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800527e:	4b17      	ldr	r3, [pc, #92]	; (80052dc <_ZL11MX_ETH_Initv+0x8c>)
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <_ZL11MX_ETH_Initv+0x94>)
 8005282:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005284:	4b15      	ldr	r3, [pc, #84]	; (80052dc <_ZL11MX_ETH_Initv+0x8c>)
 8005286:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800528a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <_ZL11MX_ETH_Initv+0x8c>)
 800528e:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <_ZL11MX_ETH_Initv+0x98>)
 8005290:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <_ZL11MX_ETH_Initv+0x8c>)
 8005294:	4a15      	ldr	r2, [pc, #84]	; (80052ec <_ZL11MX_ETH_Initv+0x9c>)
 8005296:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <_ZL11MX_ETH_Initv+0x8c>)
 800529a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800529e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80052a0:	480e      	ldr	r0, [pc, #56]	; (80052dc <_ZL11MX_ETH_Initv+0x8c>)
 80052a2:	f002 fdc9 	bl	8007e38 <HAL_ETH_Init>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 80052b6:	f000 fc4b 	bl	8005b50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80052ba:	2238      	movs	r2, #56	; 0x38
 80052bc:	2100      	movs	r1, #0
 80052be:	480c      	ldr	r0, [pc, #48]	; (80052f0 <_ZL11MX_ETH_Initv+0xa0>)
 80052c0:	f008 fdab 	bl	800de1a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <_ZL11MX_ETH_Initv+0xa0>)
 80052c6:	2221      	movs	r2, #33	; 0x21
 80052c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <_ZL11MX_ETH_Initv+0xa0>)
 80052cc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80052d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <_ZL11MX_ETH_Initv+0xa0>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000384 	.word	0x20000384
 80052e0:	40028000 	.word	0x40028000
 80052e4:	200016f8 	.word	0x200016f8
 80052e8:	20000278 	.word	0x20000278
 80052ec:	200001d8 	.word	0x200001d8
 80052f0:	20000338 	.word	0x20000338

080052f4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08c      	sub	sp, #48	; 0x30
 80052f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	2224      	movs	r2, #36	; 0x24
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f008 fd89 	bl	800de1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005308:	463b      	mov	r3, r7
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005312:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 8005314:	4a28      	ldr	r2, [pc, #160]	; (80053b8 <_ZL12MX_TIM1_Initv+0xc4>)
 8005316:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005318:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800531e:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8005324:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 8005326:	f64e 2260 	movw	r2, #60000	; 0xea60
 800532a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800532c:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 800532e:	2200      	movs	r2, #0
 8005330:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 8005334:	2200      	movs	r2, #0
 8005336:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 800533a:	2200      	movs	r2, #0
 800533c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800533e:	2303      	movs	r3, #3
 8005340:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005356:	2301      	movs	r3, #1
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800535a:	2300      	movs	r3, #0
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	4619      	mov	r1, r3
 8005368:	4812      	ldr	r0, [pc, #72]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 800536a:	f004 ff07 	bl	800a17c <HAL_TIM_Encoder_Init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <_ZL12MX_TIM1_Initv+0x8e>
  {
    Error_Handler();
 800537e:	f000 fbe7 	bl	8005b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005382:	2300      	movs	r3, #0
 8005384:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800538e:	463b      	mov	r3, r7
 8005390:	4619      	mov	r1, r3
 8005392:	4808      	ldr	r0, [pc, #32]	; (80053b4 <_ZL12MX_TIM1_Initv+0xc0>)
 8005394:	f005 ff0a 	bl	800b1ac <HAL_TIMEx_MasterConfigSynchronization>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <_ZL12MX_TIM1_Initv+0xb8>
  {
    Error_Handler();
 80053a8:	f000 fbd2 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80053ac:	bf00      	nop
 80053ae:	3730      	adds	r7, #48	; 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000434 	.word	0x20000434
 80053b8:	40010000 	.word	0x40010000

080053bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053c2:	f107 0310 	add.w	r3, r7, #16
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	605a      	str	r2, [r3, #4]
 80053d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80053da:	4b25      	ldr	r3, [pc, #148]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 80053dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 540-1;
 80053e2:	4b23      	ldr	r3, [pc, #140]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 80053e4:	f240 221b 	movw	r2, #539	; 0x21b
 80053e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ea:	4b21      	ldr	r3, [pc, #132]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 80053f0:	4b1f      	ldr	r3, [pc, #124]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 80053f2:	4a20      	ldr	r2, [pc, #128]	; (8005474 <_ZL12MX_TIM2_Initv+0xb8>)
 80053f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053fc:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 80053fe:	2200      	movs	r2, #0
 8005400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005402:	481b      	ldr	r0, [pc, #108]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 8005404:	f004 fc98 	bl	8009d38 <HAL_TIM_Base_Init>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8005418:	f000 fb9a 	bl	8005b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800541c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005422:	f107 0310 	add.w	r3, r7, #16
 8005426:	4619      	mov	r1, r3
 8005428:	4811      	ldr	r0, [pc, #68]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 800542a:	f005 fa0f 	bl	800a84c <HAL_TIM_ConfigClockSource>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800543e:	f000 fb87 	bl	8005b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4808      	ldr	r0, [pc, #32]	; (8005470 <_ZL12MX_TIM2_Initv+0xb4>)
 8005450:	f005 feac 	bl	800b1ac <HAL_TIMEx_MasterConfigSynchronization>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8005464:	f000 fb74 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005468:	bf00      	nop
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000480 	.word	0x20000480
 8005474:	000186a0 	.word	0x000186a0

08005478 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800547e:	f107 030c 	add.w	r3, r7, #12
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f008 fcc7 	bl	800de1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800548c:	463b      	mov	r3, r7
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005496:	4b26      	ldr	r3, [pc, #152]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 8005498:	4a26      	ldr	r2, [pc, #152]	; (8005534 <_ZL12MX_TIM3_Initv+0xbc>)
 800549a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 800549e:	2201      	movs	r2, #1
 80054a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054a2:	4b23      	ldr	r3, [pc, #140]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 80054aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054b0:	4b1f      	ldr	r3, [pc, #124]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b6:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80054bc:	2303      	movs	r3, #3
 80054be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054c4:	2301      	movs	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054d0:	2300      	movs	r3, #0
 80054d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054d4:	2301      	movs	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80054d8:	2300      	movs	r3, #0
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	4619      	mov	r1, r3
 80054e6:	4812      	ldr	r0, [pc, #72]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 80054e8:	f004 fe48 	bl	800a17c <HAL_TIM_Encoder_Init>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 80054fc:	f000 fb28 	bl	8005b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005500:	2300      	movs	r3, #0
 8005502:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005508:	463b      	mov	r3, r7
 800550a:	4619      	mov	r1, r3
 800550c:	4808      	ldr	r0, [pc, #32]	; (8005530 <_ZL12MX_TIM3_Initv+0xb8>)
 800550e:	f005 fe4d 	bl	800b1ac <HAL_TIMEx_MasterConfigSynchronization>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8005522:	f000 fb15 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005526:	bf00      	nop
 8005528:	3730      	adds	r7, #48	; 0x30
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200004cc 	.word	0x200004cc
 8005534:	40000400 	.word	0x40000400

08005538 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800553e:	f107 031c 	add.w	r3, r7, #28
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	605a      	str	r2, [r3, #4]
 8005548:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800554a:	463b      	mov	r3, r7
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	611a      	str	r2, [r3, #16]
 8005558:	615a      	str	r2, [r3, #20]
 800555a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 800555e:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <_ZL12MX_TIM4_Initv+0xd0>)
 8005560:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 8005564:	2201      	movs	r2, #1
 8005566:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005568:	4b26      	ldr	r3, [pc, #152]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800556e:	4b25      	ldr	r3, [pc, #148]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 8005570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005574:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005576:	4b23      	ldr	r3, [pc, #140]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 8005578:	2200      	movs	r2, #0
 800557a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800557c:	4b21      	ldr	r3, [pc, #132]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 800557e:	2200      	movs	r2, #0
 8005580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005582:	4820      	ldr	r0, [pc, #128]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 8005584:	f004 fca8 	bl	8009ed8 <HAL_TIM_PWM_Init>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <_ZL12MX_TIM4_Initv+0x64>
  {
    Error_Handler();
 8005598:	f000 fada 	bl	8005b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80055a4:	f107 031c 	add.w	r3, r7, #28
 80055a8:	4619      	mov	r1, r3
 80055aa:	4816      	ldr	r0, [pc, #88]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 80055ac:	f005 fdfe 	bl	800b1ac <HAL_TIMEx_MasterConfigSynchronization>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <_ZL12MX_TIM4_Initv+0x8c>
  {
    Error_Handler();
 80055c0:	f000 fac6 	bl	8005b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055c4:	2360      	movs	r3, #96	; 0x60
 80055c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055d4:	463b      	mov	r3, r7
 80055d6:	2200      	movs	r2, #0
 80055d8:	4619      	mov	r1, r3
 80055da:	480a      	ldr	r0, [pc, #40]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 80055dc:	f005 f822 	bl	800a624 <HAL_TIM_PWM_ConfigChannel>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <_ZL12MX_TIM4_Initv+0xbc>
  {
    Error_Handler();
 80055f0:	f000 faae 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80055f4:	4803      	ldr	r0, [pc, #12]	; (8005604 <_ZL12MX_TIM4_Initv+0xcc>)
 80055f6:	f001 fabf 	bl	8006b78 <HAL_TIM_MspPostInit>

}
 80055fa:	bf00      	nop
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000518 	.word	0x20000518
 8005608:	40000800 	.word	0x40000800

0800560c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005612:	f107 0310 	add.w	r3, r7, #16
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800562a:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 800562c:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <_ZL12MX_TIM5_Initv+0xb8>)
 800562e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 540-1;
 8005630:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 8005632:	f240 221b 	movw	r2, #539	; 0x21b
 8005636:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005638:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 800563a:	2200      	movs	r2, #0
 800563c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 8005640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005644:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005646:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 8005648:	2200      	movs	r2, #0
 800564a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 800564e:	2200      	movs	r2, #0
 8005650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005652:	481b      	ldr	r0, [pc, #108]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 8005654:	f004 fb70 	bl	8009d38 <HAL_TIM_Base_Init>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <_ZL12MX_TIM5_Initv+0x60>
  {
    Error_Handler();
 8005668:	f000 fa72 	bl	8005b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800566c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005672:	f107 0310 	add.w	r3, r7, #16
 8005676:	4619      	mov	r1, r3
 8005678:	4811      	ldr	r0, [pc, #68]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 800567a:	f005 f8e7 	bl	800a84c <HAL_TIM_ConfigClockSource>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 800568e:	f000 fa5f 	bl	8005b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800569a:	1d3b      	adds	r3, r7, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4808      	ldr	r0, [pc, #32]	; (80056c0 <_ZL12MX_TIM5_Initv+0xb4>)
 80056a0:	f005 fd84 	bl	800b1ac <HAL_TIMEx_MasterConfigSynchronization>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 80056b4:	f000 fa4c 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80056b8:	bf00      	nop
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000564 	.word	0x20000564
 80056c4:	40000c00 	.word	0x40000c00

080056c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80056cc:	4b16      	ldr	r3, [pc, #88]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <_ZL19MX_USART3_UART_Initv+0x64>)
 80056d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056d4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80056d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80056da:	4b13      	ldr	r3, [pc, #76]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056dc:	2200      	movs	r2, #0
 80056de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056ee:	220c      	movs	r2, #12
 80056f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005700:	2200      	movs	r2, #0
 8005702:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005704:	4b08      	ldr	r3, [pc, #32]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005706:	2200      	movs	r2, #0
 8005708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800570a:	4807      	ldr	r0, [pc, #28]	; (8005728 <_ZL19MX_USART3_UART_Initv+0x60>)
 800570c:	f005 fdfa 	bl	800b304 <HAL_UART_Init>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8005720:	f000 fa16 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005724:	bf00      	nop
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200005b0 	.word	0x200005b0
 800572c:	40004800 	.word	0x40004800

08005730 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005734:	4b16      	ldr	r3, [pc, #88]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8005736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800573a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800573e:	2206      	movs	r2, #6
 8005740:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005742:	4b13      	ldr	r3, [pc, #76]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8005744:	2202      	movs	r2, #2
 8005746:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8005750:	2202      	movs	r2, #2
 8005752:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005754:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8005756:	2201      	movs	r2, #1
 8005758:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800575a:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800575c:	2200      	movs	r2, #0
 800575e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8005762:	2200      	movs	r2, #0
 8005764:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8005768:	2201      	movs	r2, #1
 800576a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005772:	4807      	ldr	r0, [pc, #28]	; (8005790 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8005774:	f003 f87d 	bl	8008872 <HAL_PCD_Init>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf14      	ite	ne
 800577e:	2301      	movne	r3, #1
 8005780:	2300      	moveq	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8005788:	f000 f9e2 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800578c:	bf00      	nop
 800578e:	bd80      	pop	{r7, pc}
 8005790:	200006f8 	.word	0x200006f8

08005794 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <_ZL11MX_DMA_Initv+0x48>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	4a0f      	ldr	r2, [pc, #60]	; (80057dc <_ZL11MX_DMA_Initv+0x48>)
 80057a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057a4:	6313      	str	r3, [r2, #48]	; 0x30
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <_ZL11MX_DMA_Initv+0x48>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ae:	607b      	str	r3, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80057b2:	2200      	movs	r2, #0
 80057b4:	2100      	movs	r1, #0
 80057b6:	200c      	movs	r0, #12
 80057b8:	f001 fe15 	bl	80073e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80057bc:	200c      	movs	r0, #12
 80057be:	f001 fe2e 	bl	800741e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80057c2:	2200      	movs	r2, #0
 80057c4:	2100      	movs	r1, #0
 80057c6:	200e      	movs	r0, #14
 80057c8:	f001 fe0d 	bl	80073e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80057cc:	200e      	movs	r0, #14
 80057ce:	f001 fe26 	bl	800741e <HAL_NVIC_EnableIRQ>

}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800

080057e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	605a      	str	r2, [r3, #4]
 80057f0:	609a      	str	r2, [r3, #8]
 80057f2:	60da      	str	r2, [r3, #12]
 80057f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80057f6:	4b69      	ldr	r3, [pc, #420]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	4a68      	ldr	r2, [pc, #416]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 80057fc:	f043 0310 	orr.w	r3, r3, #16
 8005800:	6313      	str	r3, [r2, #48]	; 0x30
 8005802:	4b66      	ldr	r3, [pc, #408]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800580e:	4b63      	ldr	r3, [pc, #396]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	4a62      	ldr	r2, [pc, #392]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005814:	f043 0304 	orr.w	r3, r3, #4
 8005818:	6313      	str	r3, [r2, #48]	; 0x30
 800581a:	4b60      	ldr	r3, [pc, #384]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005826:	4b5d      	ldr	r3, [pc, #372]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	4a5c      	ldr	r2, [pc, #368]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 800582c:	f043 0320 	orr.w	r3, r3, #32
 8005830:	6313      	str	r3, [r2, #48]	; 0x30
 8005832:	4b5a      	ldr	r3, [pc, #360]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800583e:	4b57      	ldr	r3, [pc, #348]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a56      	ldr	r2, [pc, #344]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b54      	ldr	r3, [pc, #336]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005856:	4b51      	ldr	r3, [pc, #324]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	4a50      	ldr	r2, [pc, #320]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	6313      	str	r3, [r2, #48]	; 0x30
 8005862:	4b4e      	ldr	r3, [pc, #312]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800586e:	4b4b      	ldr	r3, [pc, #300]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	4a4a      	ldr	r2, [pc, #296]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	6313      	str	r3, [r2, #48]	; 0x30
 800587a:	4b48      	ldr	r3, [pc, #288]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005886:	4b45      	ldr	r3, [pc, #276]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	4a44      	ldr	r2, [pc, #272]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	6313      	str	r3, [r2, #48]	; 0x30
 8005892:	4b42      	ldr	r3, [pc, #264]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800589e:	4b3f      	ldr	r3, [pc, #252]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4a3e      	ldr	r2, [pc, #248]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 80058a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a8:	6313      	str	r3, [r2, #48]	; 0x30
 80058aa:	4b3c      	ldr	r3, [pc, #240]	; (800599c <_ZL12MX_GPIO_Initv+0x1bc>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80058b6:	2200      	movs	r2, #0
 80058b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80058bc:	4838      	ldr	r0, [pc, #224]	; (80059a0 <_ZL12MX_GPIO_Initv+0x1c0>)
 80058be:	f002 ffa5 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80058c2:	2200      	movs	r2, #0
 80058c4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80058c8:	4836      	ldr	r0, [pc, #216]	; (80059a4 <_ZL12MX_GPIO_Initv+0x1c4>)
 80058ca:	f002 ff9f 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80058ce:	2200      	movs	r2, #0
 80058d0:	2140      	movs	r1, #64	; 0x40
 80058d2:	4835      	ldr	r0, [pc, #212]	; (80059a8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80058d4:	f002 ff9a 	bl	800880c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80058d8:	2360      	movs	r3, #96	; 0x60
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058dc:	2300      	movs	r3, #0
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e8:	4619      	mov	r1, r3
 80058ea:	4830      	ldr	r0, [pc, #192]	; (80059ac <_ZL12MX_GPIO_Initv+0x1cc>)
 80058ec:	f002 fdca 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80058f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005904:	4619      	mov	r1, r3
 8005906:	482a      	ldr	r0, [pc, #168]	; (80059b0 <_ZL12MX_GPIO_Initv+0x1d0>)
 8005908:	f002 fdbc 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800590c:	2306      	movs	r3, #6
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005910:	2300      	movs	r3, #0
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800591c:	4619      	mov	r1, r3
 800591e:	4821      	ldr	r0, [pc, #132]	; (80059a4 <_ZL12MX_GPIO_Initv+0x1c4>)
 8005920:	f002 fdb0 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005924:	f244 0381 	movw	r3, #16513	; 0x4081
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800592a:	2301      	movs	r3, #1
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592e:	2300      	movs	r3, #0
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005932:	2300      	movs	r3, #0
 8005934:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800593a:	4619      	mov	r1, r3
 800593c:	4818      	ldr	r0, [pc, #96]	; (80059a0 <_ZL12MX_GPIO_Initv+0x1c0>)
 800593e:	f002 fda1 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005942:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005948:	2301      	movs	r3, #1
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005950:	2300      	movs	r3, #0
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005958:	4619      	mov	r1, r3
 800595a:	4812      	ldr	r0, [pc, #72]	; (80059a4 <_ZL12MX_GPIO_Initv+0x1c4>)
 800595c:	f002 fd92 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005964:	2301      	movs	r3, #1
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596c:	2300      	movs	r3, #0
 800596e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005974:	4619      	mov	r1, r3
 8005976:	480c      	ldr	r0, [pc, #48]	; (80059a8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8005978:	f002 fd84 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005980:	2300      	movs	r3, #0
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005984:	2300      	movs	r3, #0
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800598c:	4619      	mov	r1, r3
 800598e:	4806      	ldr	r0, [pc, #24]	; (80059a8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8005990:	f002 fd78 	bl	8008484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005994:	bf00      	nop
 8005996:	3738      	adds	r7, #56	; 0x38
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40023800 	.word	0x40023800
 80059a0:	40020400 	.word	0x40020400
 80059a4:	40021400 	.word	0x40021400
 80059a8:	40021800 	.word	0x40021800
 80059ac:	40021000 	.word	0x40021000
 80059b0:	40020800 	.word	0x40020800
 80059b4:	00000000 	.word	0x00000000

080059b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c8:	d15d      	bne.n	8005a86 <HAL_TIM_PeriodElapsedCallback+0xce>
		_hallBLDC.delta_encoder = htim1.Instance->CNT - 30000;
 80059ca:	4b53      	ldr	r3, [pc, #332]	; (8005b18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	4b52      	ldr	r3, [pc, #328]	; (8005b1c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80059d4:	4413      	add	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	b21a      	sxth	r2, r3
 80059da:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80059dc:	831a      	strh	r2, [r3, #24]
		_hallBLDC.pps = abs(_hallBLDC.delta_encoder) * 2.0f;
 80059de:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80059e0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfb8      	it	lt
 80059e8:	425b      	neglt	r3, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059f8:	ee17 0a90 	vmov	r0, s15
 80059fc:	f7fa fdc4 	bl	8000588 <__aeabi_f2d>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4946      	ldr	r1, [pc, #280]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005a06:	e9c1 2300 	strd	r2, r3, [r1]
		_hallBLDC.rpm = _hallBLDC.pps * 60 / 200.0;
 8005a0a:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	4b43      	ldr	r3, [pc, #268]	; (8005b24 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005a16:	f7fa fe0f 	bl	8000638 <__aeabi_dmul>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4610      	mov	r0, r2
 8005a20:	4619      	mov	r1, r3
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	4b40      	ldr	r3, [pc, #256]	; (8005b28 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005a28:	f7fa ff30 	bl	800088c <__aeabi_ddiv>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	493b      	ldr	r1, [pc, #236]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005a32:	e9c1 2302 	strd	r2, r3, [r1, #8]
		_hallBLDC.kmh = (_hallBLDC.rpm * 60 * 1.276096f)/1000;
 8005a36:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005a38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005a42:	f7fa fdf9 	bl	8000638 <__aeabi_dmul>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	a330      	add	r3, pc, #192	; (adr r3, 8005b10 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fdf0 	bl	8000638 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8005a66:	f7fa ff11 	bl	800088c <__aeabi_ddiv>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	492c      	ldr	r1, [pc, #176]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005a70:	e9c1 2304 	strd	r2, r3, [r1, #16]

//		sprintf((char*)val,"%d\r\n", _hallBLDC.delta_encoder);
//		HAL_UART_Transmit(&huart3, val, strlen((char*)val), 1000);

		htim1.Instance->CNT = 30000;
 8005a74:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f247 5230 	movw	r2, #30000	; 0x7530
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8005a7e:	2101      	movs	r1, #1
 8005a80:	482b      	ldr	r0, [pc, #172]	; (8005b30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005a82:	f002 fedc 	bl	800883e <HAL_GPIO_TogglePin>
	}
	if(htim->Instance == TIM5){
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d139      	bne.n	8005b04 <HAL_TIM_PeriodElapsedCallback+0x14c>
		if(steering_init){
 8005a90:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d02f      	beq.n	8005af8 <HAL_TIM_PeriodElapsedCallback+0x140>
			if(htim3.Instance -> CNT > setpoint_right && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6)){
 8005a98:	4b28      	ldr	r3, [pc, #160]	; (8005b3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d908      	bls.n	8005ab8 <HAL_TIM_PeriodElapsedCallback+0x100>
 8005aa6:	2140      	movs	r1, #64	; 0x40
 8005aa8:	4826      	ldr	r0, [pc, #152]	; (8005b44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005aaa:	f002 fe97 	bl	80087dc <HAL_GPIO_ReadPin>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <HAL_TIM_PeriodElapsedCallback+0x100>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <HAL_TIM_PeriodElapsedCallback+0x102>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <HAL_TIM_PeriodElapsedCallback+0x110>
				htim3.Instance -> CNT = setpoint_right;
 8005abe:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if(htim3.Instance -> CNT < setpoint_left && HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5)){
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d208      	bcs.n	8005ae8 <HAL_TIM_PeriodElapsedCallback+0x130>
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	481a      	ldr	r0, [pc, #104]	; (8005b44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005ada:	f002 fe7f 	bl	80087dc <HAL_GPIO_ReadPin>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_TIM_PeriodElapsedCallback+0x130>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_TIM_PeriodElapsedCallback+0x132>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_PeriodElapsedCallback+0x140>
				htim3.Instance -> CNT = setpoint_left;
 8005aee:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}
		_encoder.encoder_pose = htim3.Instance -> CNT;
 8005af8:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	461a      	mov	r2, r3
 8005b00:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8005b02:	61da      	str	r2, [r3, #28]
//		sprintf((char*)val,"%d\r\n", _encoder.encoder_pose);
//		HAL_UART_Transmit(&huart3, val, strlen((char*)val), 1000);
	}
}
 8005b04:	bf00      	nop
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	f3af 8000 	nop.w
 8005b10:	a0000000 	.word	0xa0000000
 8005b14:	3ff46ae3 	.word	0x3ff46ae3
 8005b18:	20000434 	.word	0x20000434
 8005b1c:	ffff8ad0 	.word	0xffff8ad0
 8005b20:	20000c20 	.word	0x20000c20
 8005b24:	404e0000 	.word	0x404e0000
 8005b28:	40690000 	.word	0x40690000
 8005b2c:	408f4000 	.word	0x408f4000
 8005b30:	40020400 	.word	0x40020400
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	20000cf8 	.word	0x20000cf8
 8005b3c:	200004cc 	.word	0x200004cc
 8005b40:	20000cfc 	.word	0x20000cfc
 8005b44:	40021000 	.word	0x40021000
 8005b48:	20000d00 	.word	0x20000d00
 8005b4c:	20000c48 	.word	0x20000c48

08005b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b54:	b672      	cpsid	i
}
 8005b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b58:	e7fe      	b.n	8005b58 <Error_Handler+0x8>

08005b5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e00c      	b.n	8005b84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	fa22 f103 	lsr.w	r1, r2, r3
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	b2ca      	uxtb	r2, r1
 8005b7c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d9ef      	bls.n	8005b6a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e010      	b.n	8005bd0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	00d2      	lsls	r2, r2, #3
 8005bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d9eb      	bls.n	8005bae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	08011868 	.word	0x08011868

08005c04 <_ZN3ros10SubscriberIN10raibo_msgs8speed_spEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff ffe5 	bl	8005be4 <_ZN3ros11Subscriber_C1Ev>
 8005c1a:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <_ZN3ros10SubscriberIN10raibo_msgs8speed_spEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3310      	adds	r3, #16
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fd fe69 	bl	80038fc <_ZN10raibo_msgs8speed_spC1Ev>
    cb_(cb),
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
    endpoint_(endpoint)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c
  {
    topic_ = topic_name;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]
  };
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	0801180c 	.word	0x0801180c

08005c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
  }
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
  }

  Time now()
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  {
    uint32_t ms = hardware_.time();
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fc fa54 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 8005c78:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fb faac 	bl	80011d8 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	099a      	lsrs	r2, r3, #6
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005c90:	441a      	add	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8005c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9e:	099b      	lsrs	r3, r3, #6
 8005ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8005cac:	fb03 f202 	mul.w	r2, r3, r2
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8005cb6:	441a      	add	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fb f9f8 	bl	80010b8 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005cc8:	bf00      	nop
  }
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	10624dd3 	.word	0x10624dd3
 8005cd8:	000f4240 	.word	0x000f4240

08005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fc f92d 	bl	8001f48 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e01d      	b.n	8005d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d111      	bne.n	8005d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	60da      	str	r2, [r3, #12]
        return true;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e006      	b.n	8005d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b18      	cmp	r3, #24
 8005d66:	ddde      	ble.n	8005d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8005d68:	2300      	movs	r3, #0
  }
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e018      	b.n	8005db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	605a      	str	r2, [r3, #4]
        return true;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e006      	b.n	8005dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b18      	cmp	r3, #24
 8005dbc:	dde3      	ble.n	8005d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8005dbe:	2300      	movs	r3, #0
  }
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fc f9a1 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 8005dde:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d903      	bls.n	8005dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d903      	bls.n	8005e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d014      	beq.n	8005e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fc f976 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad2      	subs	r2, r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf8c      	ite	hi
 8005e44:	2301      	movhi	r3, #1
 8005e46:	2300      	movls	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 8005e4e:	f06f 0301 	mvn.w	r3, #1
 8005e52:	e1a5      	b.n	80061a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fc f891 	bl	8001f80 <_ZN13STM32Hardware4readEv>
 8005e5e:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f2c0 8178 	blt.w	8006158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	441a      	add	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005e7e:	2b07      	cmp	r3, #7
 8005e80:	d11e      	bne.n	8005ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	b2d1      	uxtb	r1, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4413      	add	r3, r2
 8005e98:	460a      	mov	r2, r1
 8005e9a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005ea4:	1e5a      	subs	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1b4      	bne.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2208      	movs	r2, #8
 8005eba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005ebe:	e7af      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d128      	bne.n	8005f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2bff      	cmp	r3, #255	; 0xff
 8005ece:	d10d      	bne.n	8005eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f103 0214 	add.w	r2, r3, #20
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005eea:	e799      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fc f915 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	4293      	cmp	r3, r2
 8005f02:	bf8c      	ite	hi
 8005f04:	2301      	movhi	r3, #1
 8005f06:	2300      	movls	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d088      	beq.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8005f16:	f06f 0301 	mvn.w	r3, #1
 8005f1a:	e141      	b.n	80061a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d118      	bne.n	8005f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2bfe      	cmp	r3, #254	; 0xfe
 8005f2a:	d107      	bne.n	8005f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005f3a:	e771      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f47f af68 	bne.w	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f929 	bl	80061a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005f56:	e763      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d113      	bne.n	8005f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005f88:	e74a      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d110      	bne.n	8005fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	441a      	add	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005fb4:	e734      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d116      	bne.n	8005fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005fc6:	425a      	negs	r2, r3
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	bf58      	it	pl
 8005fce:	4253      	negpl	r3, r2
 8005fd0:	2bff      	cmp	r3, #255	; 0xff
 8005fd2:	d107      	bne.n	8005fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005fe2:	e71d      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005fec:	e718      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	d10f      	bne.n	8006018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8006016:	e703      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800601e:	2b06      	cmp	r3, #6
 8006020:	d117      	bne.n	8006052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	441a      	add	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2207      	movs	r2, #7
 8006038:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f47f aeec 	bne.w	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2208      	movs	r2, #8
 800604c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006050:	e6e6      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006058:	2b08      	cmp	r3, #8
 800605a:	f47f aee1 	bne.w	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800606c:	425a      	negs	r2, r3
 800606e:	b2db      	uxtb	r3, r3
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	bf58      	it	pl
 8006074:	4253      	negpl	r3, r2
 8006076:	2bff      	cmp	r3, #255	; 0xff
 8006078:	f47f aed2 	bne.w	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d110      	bne.n	80060a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f88e 	bl	80061a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f8a9 	bl	80061e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a6:	e07b      	b.n	80061a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80060ae:	2b0a      	cmp	r3, #10
 80060b0:	d109      	bne.n	80060c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f970 	bl	80063a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80060c4:	e6ac      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d10e      	bne.n	80060ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fb fd3f 	bl	8001b62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80060ec:	e698      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80060f4:	2b0b      	cmp	r3, #11
 80060f6:	d106      	bne.n	8006106 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
 8006104:	e68c      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800610c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f43f ae80 	beq.w	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006126:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006130:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800613a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8006152:	4611      	mov	r1, r2
 8006154:	4798      	blx	r3
    while (true)
 8006156:	e663      	b.n	8005e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 8006158:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00f      	beq.n	8006184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006172:	4293      	cmp	r3, r2
 8006174:	d906      	bls.n	8006184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f816 	bl	80061a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8006184:	7dbb      	ldrb	r3, [r7, #22]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 800618a:	f06f 0303 	mvn.w	r3, #3
 800618e:	e006      	b.n	800619e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 8006196:	f06f 0302 	mvn.w	r3, #2
 800619a:	e000      	b.n	800619e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 800619c:	2300      	movs	r3, #0
 800619e:	bf00      	nop
  }
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fb f831 	bl	800121c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f107 020c 	add.w	r2, r7, #12
 80061c4:	210a      	movs	r1, #10
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
    rt_time = hardware_.time();
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fb ffa6 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 80061d4:	4602      	mov	r2, r0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80061dc:	bf00      	nop
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b08b      	sub	sp, #44	; 0x2c
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fb f903 	bl	80013fc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80061f6:	2300      	movs	r3, #0
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e062      	b.n	80062c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d056      	beq.n	80062bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	b29b      	uxth	r3, r3
 8006220:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4608      	mov	r0, r1
 800625c:	4798      	blx	r3
 800625e:	4603      	mov	r3, r0
 8006260:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4608      	mov	r0, r1
 800628a:	4798      	blx	r3
 800628c:	4603      	mov	r3, r0
 800628e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8006290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006294:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681c      	ldr	r4, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fb fe11 	bl	8001ed2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80062b0:	4601      	mov	r1, r0
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	461a      	mov	r2, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	3301      	adds	r3, #1
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2b18      	cmp	r3, #24
 80062c6:	dd99      	ble.n	80061fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
 80062cc:	e05e      	b.n	800638c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80062d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d053      	beq.n	8006386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80062e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006304:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4608      	mov	r0, r1
 8006320:	4798      	blx	r3
 8006322:	4603      	mov	r3, r0
 8006324:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800632e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006336:	f202 2222 	addw	r2, r2, #546	; 0x222
 800633a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4608      	mov	r0, r1
 8006346:	4798      	blx	r3
 8006348:	4603      	mov	r3, r0
 800634a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800634c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006350:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681c      	ldr	r4, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	f202 2222 	addw	r2, r2, #546	; 0x222
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3304      	adds	r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4608      	mov	r0, r1
 8006378:	4798      	blx	r3
 800637a:	4601      	mov	r1, r0
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	461a      	mov	r2, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	3301      	adds	r3, #1
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	2b18      	cmp	r3, #24
 8006390:	dd9d      	ble.n	80062ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800639a:	bf00      	nop
 800639c:	372c      	adds	r7, #44	; 0x2c
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd90      	pop	{r4, r7, pc}
	...

080063a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa ff32 	bl	800121c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fb feaf 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 80063c2:	4602      	mov	r2, r0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80063ce:	f107 0308 	add.w	r3, r7, #8
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fa ff91 	bl	80012fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4915      	ldr	r1, [pc, #84]	; (8006434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80063e0:	fba1 1303 	umull	r1, r3, r1, r3
 80063e4:	099b      	lsrs	r3, r3, #6
 80063e6:	4413      	add	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80063ea:	6939      	ldr	r1, [r7, #16]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80063f0:	fba3 0302 	umull	r0, r3, r3, r2
 80063f4:	099b      	lsrs	r3, r3, #6
 80063f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063fa:	fb00 f303 	mul.w	r3, r0, r3
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	4a0d      	ldr	r2, [pc, #52]	; (8006438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8006402:	fb02 f303 	mul.w	r3, r2, r3
 8006406:	440b      	add	r3, r1
 8006408:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800640a:	f107 0308 	add.w	r3, r7, #8
 800640e:	3304      	adds	r3, #4
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f8a6 	bl	8006564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	4618      	mov	r0, r3
 800641e:	f7fb fe7f 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 8006422:	4602      	mov	r2, r0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800642a:	bf00      	nop
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	10624dd3 	.word	0x10624dd3
 8006438:	000f4240 	.word	0x000f4240

0800643c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b63      	cmp	r3, #99	; 0x63
 800644c:	dd09      	ble.n	8006462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006454:	f083 0301 	eor.w	r3, r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800645e:	2300      	movs	r3, #0
 8006460:	e079      	b.n	8006556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800646e:	3207      	adds	r2, #7
 8006470:	4611      	mov	r1, r2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	22ff      	movs	r2, #255	; 0xff
 800647c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	22fe      	movs	r2, #254	; 0xfe
 8006484:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	b29b      	uxth	r3, r3
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b29b      	uxth	r3, r3
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80064ae:	4413      	add	r3, r2
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	43db      	mvns	r3, r3
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	121b      	asrs	r3, r3, #8
 80064cc:	b21b      	sxth	r3, r3
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80064da:	2305      	movs	r3, #5
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e00c      	b.n	80064fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	4413      	add	r3, r2
 80064e6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	3306      	adds	r3, #6
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	429a      	cmp	r2, r3
 8006502:	dded      	ble.n	80064e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	3307      	adds	r3, #7
 8006508:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	425a      	negs	r2, r3
 800650e:	b2db      	uxtb	r3, r3
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	bf58      	it	pl
 8006514:	4253      	negpl	r3, r2
 8006516:	b2da      	uxtb	r2, r3
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	6179      	str	r1, [r7, #20]
 800651e:	43d2      	mvns	r2, r2
 8006520:	b2d1      	uxtb	r1, r2
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	460a      	mov	r2, r1
 8006528:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006532:	dc0a      	bgt.n	800654a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1d18      	adds	r0, r3, #4
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4619      	mov	r1, r3
 8006542:	f7fb fda7 	bl	8002094 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	e005      	b.n	8006556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800654a:	4905      	ldr	r1, [pc, #20]	; (8006560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f849 	bl	80065e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8006552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	0801178c 	.word	0x0801178c

08006564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4618      	mov	r0, r3
 8006574:	f7fb fdd4 	bl	8002120 <_ZN13STM32Hardware4timeEv>
 8006578:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4915      	ldr	r1, [pc, #84]	; (80065d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8006582:	fba1 1303 	umull	r1, r3, r1, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	1e5a      	subs	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800659a:	fba3 0302 	umull	r0, r3, r3, r2
 800659e:	099b      	lsrs	r3, r3, #6
 80065a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065a4:	fb00 f303 	mul.w	r3, r0, r3
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	4a0c      	ldr	r2, [pc, #48]	; (80065dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80065ac:	fb02 f303 	mul.w	r3, r2, r3
 80065b0:	1aca      	subs	r2, r1, r3
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80065b4:	4413      	add	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7fa fd74 	bl	80010b8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	10624dd3 	.word	0x10624dd3
 80065dc:	000f4240 	.word	0x000f4240
 80065e0:	3b9aca00 	.word	0x3b9aca00

080065e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	2103      	movs	r1, #3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f804 	bl	8006600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	460b      	mov	r3, r1
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800660e:	f107 0314 	add.w	r3, r7, #20
 8006612:	4618      	mov	r0, r3
 8006614:	f7fb f8b6 	bl	8001784 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f107 0214 	add.w	r2, r7, #20
 800662a:	2107      	movs	r1, #7
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	4798      	blx	r3
  }
 8006630:	bf00      	nop
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8006638:	b5b0      	push	{r4, r5, r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d121      	bne.n	800668c <_Z41__static_initialization_and_destruction_0ii+0x54>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800664e:	4293      	cmp	r3, r2
 8006650:	d11c      	bne.n	800668c <_Z41__static_initialization_and_destruction_0ii+0x54>
ros::NodeHandle nh_;
 8006652:	4810      	ldr	r0, [pc, #64]	; (8006694 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8006654:	f7fd fcd0 	bl	8003ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
raibo_msgs::speed_fb motor_fb_;
 8006658:	480f      	ldr	r0, [pc, #60]	; (8006698 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800665a:	f7fb fd6d 	bl	8002138 <_ZN10raibo_msgs8speed_fbC1Ev>
ros::Time last_time_[4];
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8006660:	2403      	movs	r4, #3
 8006662:	461d      	mov	r5, r3
 8006664:	e004      	b.n	8006670 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006666:	4628      	mov	r0, r5
 8006668:	f7fa fdb6 	bl	80011d8 <_ZN3ros4TimeC1Ev>
 800666c:	3508      	adds	r5, #8
 800666e:	3c01      	subs	r4, #1
 8006670:	2c00      	cmp	r4, #0
 8006672:	daf8      	bge.n	8006666 <_Z41__static_initialization_and_destruction_0ii+0x2e>
ros::Publisher speed_fb_pub_("/micro/speed_fb", &motor_fb_);
 8006674:	2300      	movs	r3, #0
 8006676:	4a08      	ldr	r2, [pc, #32]	; (8006698 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8006678:	4909      	ldr	r1, [pc, #36]	; (80066a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800667a:	480a      	ldr	r0, [pc, #40]	; (80066a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800667c:	f7fb fbfe 	bl	8001e7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
		&commandSpeedSPCallback);
 8006680:	2301      	movs	r3, #1
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8006684:	4909      	ldr	r1, [pc, #36]	; (80066ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8006686:	480a      	ldr	r0, [pc, #40]	; (80066b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006688:	f7ff fabc 	bl	8005c04 <_ZN3ros10SubscriberIN10raibo_msgs8speed_spEvEC1EPKcPFvRKS2_Ei>
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bdb0      	pop	{r4, r5, r7, pc}
 8006694:	20000d08 	.word	0x20000d08
 8006698:	20001648 	.word	0x20001648
 800669c:	20001690 	.word	0x20001690
 80066a0:	080117c8 	.word	0x080117c8
 80066a4:	200016b0 	.word	0x200016b0
 80066a8:	08004131 	.word	0x08004131
 80066ac:	080117d8 	.word	0x080117d8
 80066b0:	200016c8 	.word	0x200016c8

080066b4 <_ZN3ros10SubscriberIN10raibo_msgs8speed_spEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3310      	adds	r3, #16
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fd fa35 	bl	8003b34 <_ZN10raibo_msgs8speed_sp11deserializeEPh>
    this->cb_(msg);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	3210      	adds	r2, #16
 80066d2:	4610      	mov	r0, r2
 80066d4:	4798      	blx	r3
  }
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_ZN3ros10SubscriberIN10raibo_msgs8speed_spEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  }
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <_ZN3ros10SubscriberIN10raibo_msgs8speed_spEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3310      	adds	r3, #16
 8006702:	4618      	mov	r0, r3
 8006704:	f7fd fc4c 	bl	8003fa0 <_ZN10raibo_msgs8speed_sp7getTypeEv>
 8006708:	4603      	mov	r3, r0
  }
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <_ZN3ros10SubscriberIN10raibo_msgs8speed_spEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3310      	adds	r3, #16
 800671e:	4618      	mov	r0, r3
 8006720:	f7fd fc4c 	bl	8003fbc <_ZN10raibo_msgs8speed_sp6getMD5Ev>
 8006724:	4603      	mov	r3, r0
  }
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
    return configured_;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <_GLOBAL__sub_I_DMARxDscrTab>:
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
 800674c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006750:	2001      	movs	r0, #1
 8006752:	f7ff ff71 	bl	8006638 <_Z41__static_initialization_and_destruction_0ii>
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <HAL_MspInit+0x44>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	4a0e      	ldr	r2, [pc, #56]	; (800679c <HAL_MspInit+0x44>)
 8006764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006768:	6413      	str	r3, [r2, #64]	; 0x40
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <HAL_MspInit+0x44>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <HAL_MspInit+0x44>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	4a08      	ldr	r2, [pc, #32]	; (800679c <HAL_MspInit+0x44>)
 800677c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006780:	6453      	str	r3, [r2, #68]	; 0x44
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <HAL_MspInit+0x44>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40023800 	.word	0x40023800

080067a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	; 0x28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a8:	f107 0314 	add.w	r3, r7, #20
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a15      	ldr	r2, [pc, #84]	; (8006814 <HAL_DAC_MspInit+0x74>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d123      	bne.n	800680a <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <HAL_DAC_MspInit+0x78>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	4a14      	ldr	r2, [pc, #80]	; (8006818 <HAL_DAC_MspInit+0x78>)
 80067c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067cc:	6413      	str	r3, [r2, #64]	; 0x40
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <HAL_DAC_MspInit+0x78>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <HAL_DAC_MspInit+0x78>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	4a0e      	ldr	r2, [pc, #56]	; (8006818 <HAL_DAC_MspInit+0x78>)
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	6313      	str	r3, [r2, #48]	; 0x30
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <HAL_DAC_MspInit+0x78>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80067f2:	2310      	movs	r3, #16
 80067f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067f6:	2303      	movs	r3, #3
 80067f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	4619      	mov	r1, r3
 8006804:	4805      	ldr	r0, [pc, #20]	; (800681c <HAL_DAC_MspInit+0x7c>)
 8006806:	f001 fe3d 	bl	8008484 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800680a:	bf00      	nop
 800680c:	3728      	adds	r7, #40	; 0x28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40007400 	.word	0x40007400
 8006818:	40023800 	.word	0x40023800
 800681c:	40020000 	.word	0x40020000

08006820 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08e      	sub	sp, #56	; 0x38
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a4e      	ldr	r2, [pc, #312]	; (8006978 <HAL_ETH_MspInit+0x158>)
 800683e:	4293      	cmp	r3, r2
 8006840:	f040 8096 	bne.w	8006970 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006844:	4b4d      	ldr	r3, [pc, #308]	; (800697c <HAL_ETH_MspInit+0x15c>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	4a4c      	ldr	r2, [pc, #304]	; (800697c <HAL_ETH_MspInit+0x15c>)
 800684a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800684e:	6313      	str	r3, [r2, #48]	; 0x30
 8006850:	4b4a      	ldr	r3, [pc, #296]	; (800697c <HAL_ETH_MspInit+0x15c>)
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	4b47      	ldr	r3, [pc, #284]	; (800697c <HAL_ETH_MspInit+0x15c>)
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	4a46      	ldr	r2, [pc, #280]	; (800697c <HAL_ETH_MspInit+0x15c>)
 8006862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006866:	6313      	str	r3, [r2, #48]	; 0x30
 8006868:	4b44      	ldr	r3, [pc, #272]	; (800697c <HAL_ETH_MspInit+0x15c>)
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4b41      	ldr	r3, [pc, #260]	; (800697c <HAL_ETH_MspInit+0x15c>)
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	4a40      	ldr	r2, [pc, #256]	; (800697c <HAL_ETH_MspInit+0x15c>)
 800687a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800687e:	6313      	str	r3, [r2, #48]	; 0x30
 8006880:	4b3e      	ldr	r3, [pc, #248]	; (800697c <HAL_ETH_MspInit+0x15c>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800688c:	4b3b      	ldr	r3, [pc, #236]	; (800697c <HAL_ETH_MspInit+0x15c>)
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	4a3a      	ldr	r2, [pc, #232]	; (800697c <HAL_ETH_MspInit+0x15c>)
 8006892:	f043 0304 	orr.w	r3, r3, #4
 8006896:	6313      	str	r3, [r2, #48]	; 0x30
 8006898:	4b38      	ldr	r3, [pc, #224]	; (800697c <HAL_ETH_MspInit+0x15c>)
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068a4:	4b35      	ldr	r3, [pc, #212]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	4a34      	ldr	r2, [pc, #208]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	6313      	str	r3, [r2, #48]	; 0x30
 80068b0:	4b32      	ldr	r3, [pc, #200]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068bc:	4b2f      	ldr	r3, [pc, #188]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	4a2e      	ldr	r2, [pc, #184]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068c2:	f043 0302 	orr.w	r3, r3, #2
 80068c6:	6313      	str	r3, [r2, #48]	; 0x30
 80068c8:	4b2c      	ldr	r3, [pc, #176]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80068d4:	4b29      	ldr	r3, [pc, #164]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	4a28      	ldr	r2, [pc, #160]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068de:	6313      	str	r3, [r2, #48]	; 0x30
 80068e0:	4b26      	ldr	r3, [pc, #152]	; (800697c <HAL_ETH_MspInit+0x15c>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80068ec:	2332      	movs	r3, #50	; 0x32
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f0:	2302      	movs	r3, #2
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f8:	2303      	movs	r3, #3
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068fc:	230b      	movs	r3, #11
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006904:	4619      	mov	r1, r3
 8006906:	481e      	ldr	r0, [pc, #120]	; (8006980 <HAL_ETH_MspInit+0x160>)
 8006908:	f001 fdbc 	bl	8008484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800690c:	2386      	movs	r3, #134	; 0x86
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006910:	2302      	movs	r3, #2
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006914:	2300      	movs	r3, #0
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006918:	2303      	movs	r3, #3
 800691a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800691c:	230b      	movs	r3, #11
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006924:	4619      	mov	r1, r3
 8006926:	4817      	ldr	r0, [pc, #92]	; (8006984 <HAL_ETH_MspInit+0x164>)
 8006928:	f001 fdac 	bl	8008484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800692c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006932:	2302      	movs	r3, #2
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006936:	2300      	movs	r3, #0
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800693a:	2303      	movs	r3, #3
 800693c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800693e:	230b      	movs	r3, #11
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006946:	4619      	mov	r1, r3
 8006948:	480f      	ldr	r0, [pc, #60]	; (8006988 <HAL_ETH_MspInit+0x168>)
 800694a:	f001 fd9b 	bl	8008484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800694e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006954:	2302      	movs	r3, #2
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006958:	2300      	movs	r3, #0
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800695c:	2303      	movs	r3, #3
 800695e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006960:	230b      	movs	r3, #11
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006968:	4619      	mov	r1, r3
 800696a:	4808      	ldr	r0, [pc, #32]	; (800698c <HAL_ETH_MspInit+0x16c>)
 800696c:	f001 fd8a 	bl	8008484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8006970:	bf00      	nop
 8006972:	3738      	adds	r7, #56	; 0x38
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40028000 	.word	0x40028000
 800697c:	40023800 	.word	0x40023800
 8006980:	40020800 	.word	0x40020800
 8006984:	40020000 	.word	0x40020000
 8006988:	40020400 	.word	0x40020400
 800698c:	40021800 	.word	0x40021800

08006990 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	; 0x30
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006998:	f107 031c 	add.w	r3, r7, #28
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	609a      	str	r2, [r3, #8]
 80069a4:	60da      	str	r2, [r3, #12]
 80069a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a3c      	ldr	r2, [pc, #240]	; (8006aa0 <HAL_TIM_Encoder_MspInit+0x110>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d129      	bne.n	8006a06 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80069b2:	4b3c      	ldr	r3, [pc, #240]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	4a3b      	ldr	r2, [pc, #236]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	6453      	str	r3, [r2, #68]	; 0x44
 80069be:	4b39      	ldr	r3, [pc, #228]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 80069c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	4a35      	ldr	r2, [pc, #212]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 80069d0:	f043 0310 	orr.w	r3, r3, #16
 80069d4:	6313      	str	r3, [r2, #48]	; 0x30
 80069d6:	4b33      	ldr	r3, [pc, #204]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80069e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80069e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e8:	2302      	movs	r3, #2
 80069ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069f0:	2300      	movs	r3, #0
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80069f4:	2301      	movs	r3, #1
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069f8:	f107 031c 	add.w	r3, r7, #28
 80069fc:	4619      	mov	r1, r3
 80069fe:	482a      	ldr	r0, [pc, #168]	; (8006aa8 <HAL_TIM_Encoder_MspInit+0x118>)
 8006a00:	f001 fd40 	bl	8008484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006a04:	e048      	b.n	8006a98 <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM3)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a28      	ldr	r2, [pc, #160]	; (8006aac <HAL_TIM_Encoder_MspInit+0x11c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d143      	bne.n	8006a98 <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a10:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	4a23      	ldr	r2, [pc, #140]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1c:	4b21      	ldr	r3, [pc, #132]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6313      	str	r3, [r2, #48]	; 0x30
 8006a34:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a46:	f043 0304 	orr.w	r3, r3, #4
 8006a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4c:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <HAL_TIM_Encoder_MspInit+0x114>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a58:	2340      	movs	r3, #64	; 0x40
 8006a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a6c:	f107 031c 	add.w	r3, r7, #28
 8006a70:	4619      	mov	r1, r3
 8006a72:	480f      	ldr	r0, [pc, #60]	; (8006ab0 <HAL_TIM_Encoder_MspInit+0x120>)
 8006a74:	f001 fd06 	bl	8008484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a84:	2300      	movs	r3, #0
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a8c:	f107 031c 	add.w	r3, r7, #28
 8006a90:	4619      	mov	r1, r3
 8006a92:	4808      	ldr	r0, [pc, #32]	; (8006ab4 <HAL_TIM_Encoder_MspInit+0x124>)
 8006a94:	f001 fcf6 	bl	8008484 <HAL_GPIO_Init>
}
 8006a98:	bf00      	nop
 8006a9a:	3730      	adds	r7, #48	; 0x30
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40020000 	.word	0x40020000
 8006ab4:	40020800 	.word	0x40020800

08006ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d114      	bne.n	8006af4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006aca:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <HAL_TIM_Base_MspInit+0x78>)
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_TIM_Base_MspInit+0x78>)
 8006ad0:	f043 0301 	orr.w	r3, r3, #1
 8006ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ad6:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <HAL_TIM_Base_MspInit+0x78>)
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	201c      	movs	r0, #28
 8006ae8:	f000 fc7d 	bl	80073e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006aec:	201c      	movs	r0, #28
 8006aee:	f000 fc96 	bl	800741e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006af2:	e018      	b.n	8006b26 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a0e      	ldr	r2, [pc, #56]	; (8006b34 <HAL_TIM_Base_MspInit+0x7c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d113      	bne.n	8006b26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006afe:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <HAL_TIM_Base_MspInit+0x78>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	4a0b      	ldr	r2, [pc, #44]	; (8006b30 <HAL_TIM_Base_MspInit+0x78>)
 8006b04:	f043 0308 	orr.w	r3, r3, #8
 8006b08:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <HAL_TIM_Base_MspInit+0x78>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006b16:	2200      	movs	r2, #0
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2032      	movs	r0, #50	; 0x32
 8006b1c:	f000 fc63 	bl	80073e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006b20:	2032      	movs	r0, #50	; 0x32
 8006b22:	f000 fc7c 	bl	800741e <HAL_NVIC_EnableIRQ>
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40000c00 	.word	0x40000c00

08006b38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <HAL_TIM_PWM_MspInit+0x38>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d10b      	bne.n	8006b62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <HAL_TIM_PWM_MspInit+0x3c>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <HAL_TIM_PWM_MspInit+0x3c>)
 8006b50:	f043 0304 	orr.w	r3, r3, #4
 8006b54:	6413      	str	r3, [r2, #64]	; 0x40
 8006b56:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <HAL_TIM_PWM_MspInit+0x3c>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40023800 	.word	0x40023800

08006b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <HAL_TIM_MspPostInit+0x64>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d11c      	bne.n	8006bd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b9a:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <HAL_TIM_MspPostInit+0x68>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <HAL_TIM_MspPostInit+0x68>)
 8006ba0:	f043 0308 	orr.w	r3, r3, #8
 8006ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <HAL_TIM_MspPostInit+0x68>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bc8:	f107 030c 	add.w	r3, r7, #12
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4805      	ldr	r0, [pc, #20]	; (8006be4 <HAL_TIM_MspPostInit+0x6c>)
 8006bd0:	f001 fc58 	bl	8008484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006bd4:	bf00      	nop
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40020c00 	.word	0x40020c00

08006be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b0aa      	sub	sp, #168	; 0xa8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c00:	f107 0310 	add.w	r3, r7, #16
 8006c04:	2284      	movs	r2, #132	; 0x84
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f007 f906 	bl	800de1a <memset>
  if(huart->Instance==USART3)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a54      	ldr	r2, [pc, #336]	; (8006d64 <HAL_UART_MspInit+0x17c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	f040 80a1 	bne.w	8006d5c <HAL_UART_MspInit+0x174>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006c20:	2300      	movs	r3, #0
 8006c22:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f002 fc95 	bl	8009558 <HAL_RCCEx_PeriphCLKConfig>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006c34:	f7fe ff8c 	bl	8005b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c38:	4b4b      	ldr	r3, [pc, #300]	; (8006d68 <HAL_UART_MspInit+0x180>)
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <HAL_UART_MspInit+0x180>)
 8006c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c42:	6413      	str	r3, [r2, #64]	; 0x40
 8006c44:	4b48      	ldr	r3, [pc, #288]	; (8006d68 <HAL_UART_MspInit+0x180>)
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c50:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <HAL_UART_MspInit+0x180>)
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	4a44      	ldr	r2, [pc, #272]	; (8006d68 <HAL_UART_MspInit+0x180>)
 8006c56:	f043 0308 	orr.w	r3, r3, #8
 8006c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5c:	4b42      	ldr	r3, [pc, #264]	; (8006d68 <HAL_UART_MspInit+0x180>)
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c70:	2302      	movs	r3, #2
 8006c72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c82:	2307      	movs	r3, #7
 8006c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4837      	ldr	r0, [pc, #220]	; (8006d6c <HAL_UART_MspInit+0x184>)
 8006c90:	f001 fbf8 	bl	8008484 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006c94:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006c96:	4a37      	ldr	r2, [pc, #220]	; (8006d74 <HAL_UART_MspInit+0x18c>)
 8006c98:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006c9a:	4b35      	ldr	r3, [pc, #212]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ca0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ca2:	4b33      	ldr	r3, [pc, #204]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ca8:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cae:	4b30      	ldr	r3, [pc, #192]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cb4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cbc:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006cc2:	4b2b      	ldr	r3, [pc, #172]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006cc8:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cce:	4b28      	ldr	r3, [pc, #160]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006cd4:	4826      	ldr	r0, [pc, #152]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cd6:	f000 fca5 	bl	8007624 <HAL_DMA_Init>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8006ce0:	f7fe ff36 	bl	8005b50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a22      	ldr	r2, [pc, #136]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006ce8:	675a      	str	r2, [r3, #116]	; 0x74
 8006cea:	4a21      	ldr	r2, [pc, #132]	; (8006d70 <HAL_UART_MspInit+0x188>)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006cf0:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006cf2:	4a22      	ldr	r2, [pc, #136]	; (8006d7c <HAL_UART_MspInit+0x194>)
 8006cf4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8006cf6:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cfc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cfe:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d00:	2240      	movs	r2, #64	; 0x40
 8006d02:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d04:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d10:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d12:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d18:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006d1e:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d24:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d2a:	4b13      	ldr	r3, [pc, #76]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006d30:	4811      	ldr	r0, [pc, #68]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d32:	f000 fc77 	bl	8007624 <HAL_DMA_Init>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8006d3c:	f7fe ff08 	bl	8005b50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a0d      	ldr	r2, [pc, #52]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d44:	671a      	str	r2, [r3, #112]	; 0x70
 8006d46:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <HAL_UART_MspInit+0x190>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2100      	movs	r1, #0
 8006d50:	2027      	movs	r0, #39	; 0x27
 8006d52:	f000 fb48 	bl	80073e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d56:	2027      	movs	r0, #39	; 0x27
 8006d58:	f000 fb61 	bl	800741e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006d5c:	bf00      	nop
 8006d5e:	37a8      	adds	r7, #168	; 0xa8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40004800 	.word	0x40004800
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	40020c00 	.word	0x40020c00
 8006d70:	20000638 	.word	0x20000638
 8006d74:	40026028 	.word	0x40026028
 8006d78:	20000698 	.word	0x20000698
 8006d7c:	40026058 	.word	0x40026058

08006d80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b0ac      	sub	sp, #176	; 0xb0
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	609a      	str	r2, [r3, #8]
 8006d94:	60da      	str	r2, [r3, #12]
 8006d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d98:	f107 0318 	add.w	r3, r7, #24
 8006d9c:	2284      	movs	r2, #132	; 0x84
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f007 f83a 	bl	800de1a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dae:	d159      	bne.n	8006e64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006db0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006db4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006dbc:	f107 0318 	add.w	r3, r7, #24
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 fbc9 	bl	8009558 <HAL_RCCEx_PeriphCLKConfig>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8006dcc:	f7fe fec0 	bl	8005b50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dd0:	4b26      	ldr	r3, [pc, #152]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	6313      	str	r3, [r2, #48]	; 0x30
 8006ddc:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006de8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df0:	2302      	movs	r3, #2
 8006df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e02:	230a      	movs	r3, #10
 8006e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4818      	ldr	r0, [pc, #96]	; (8006e70 <HAL_PCD_MspInit+0xf0>)
 8006e10:	f001 fb38 	bl	8008484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006e28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4810      	ldr	r0, [pc, #64]	; (8006e70 <HAL_PCD_MspInit+0xf0>)
 8006e30:	f001 fb28 	bl	8008484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e34:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e38:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3e:	6353      	str	r3, [r2, #52]	; 0x34
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e50:	4a06      	ldr	r2, [pc, #24]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e56:	6453      	str	r3, [r2, #68]	; 0x44
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <HAL_PCD_MspInit+0xec>)
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006e64:	bf00      	nop
 8006e66:	37b0      	adds	r7, #176	; 0xb0
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40020000 	.word	0x40020000

08006e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006e78:	e7fe      	b.n	8006e78 <NMI_Handler+0x4>

08006e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e7e:	e7fe      	b.n	8006e7e <HardFault_Handler+0x4>

08006e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e84:	e7fe      	b.n	8006e84 <MemManage_Handler+0x4>

08006e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e86:	b480      	push	{r7}
 8006e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e8a:	e7fe      	b.n	8006e8a <BusFault_Handler+0x4>

08006e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e90:	e7fe      	b.n	8006e90 <UsageFault_Handler+0x4>

08006e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e92:	b480      	push	{r7}
 8006e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e96:	bf00      	nop
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006eb2:	bf00      	nop
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ec0:	f000 f972 	bl	80071a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ec4:	bf00      	nop
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006ecc:	4802      	ldr	r0, [pc, #8]	; (8006ed8 <DMA1_Stream1_IRQHandler+0x10>)
 8006ece:	f000 fd49 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006ed2:	bf00      	nop
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000638 	.word	0x20000638

08006edc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006ee0:	4802      	ldr	r0, [pc, #8]	; (8006eec <DMA1_Stream3_IRQHandler+0x10>)
 8006ee2:	f000 fd3f 	bl	8007964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006ee6:	bf00      	nop
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000698 	.word	0x20000698

08006ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ef4:	4802      	ldr	r0, [pc, #8]	; (8006f00 <TIM2_IRQHandler+0x10>)
 8006ef6:	f003 fa75 	bl	800a3e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000480 	.word	0x20000480

08006f04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006f08:	4802      	ldr	r0, [pc, #8]	; (8006f14 <USART3_IRQHandler+0x10>)
 8006f0a:	f004 fb09 	bl	800b520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	200005b0 	.word	0x200005b0

08006f18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006f1c:	4802      	ldr	r0, [pc, #8]	; (8006f28 <TIM5_IRQHandler+0x10>)
 8006f1e:	f003 fa61 	bl	800a3e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006f22:	bf00      	nop
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000564 	.word	0x20000564

08006f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return 1;
 8006f30:	2301      	movs	r3, #1
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <_kill>:

int _kill(int pid, int sig)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f46:	f006 ffbb 	bl	800dec0 <__errno>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2216      	movs	r2, #22
 8006f4e:	601a      	str	r2, [r3, #0]
  return -1;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <_exit>:

void _exit (int status)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ffe7 	bl	8006f3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8006f6e:	e7fe      	b.n	8006f6e <_exit+0x12>

08006f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e00a      	b.n	8006f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006f82:	f3af 8000 	nop.w
 8006f86:	4601      	mov	r1, r0
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	60ba      	str	r2, [r7, #8]
 8006f8e:	b2ca      	uxtb	r2, r1
 8006f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	3301      	adds	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	dbf0      	blt.n	8006f82 <_read+0x12>
  }

  return len;
 8006fa0:	687b      	ldr	r3, [r7, #4]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b086      	sub	sp, #24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e009      	b.n	8006fd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	60ba      	str	r2, [r7, #8]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	dbf1      	blt.n	8006fbc <_write+0x12>
  }
  return len;
 8006fd8:	687b      	ldr	r3, [r7, #4]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <_close>:

int _close(int file)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800700a:	605a      	str	r2, [r3, #4]
  return 0;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <_isatty>:

int _isatty(int file)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007022:	2301      	movs	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
	...

0800704c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <_sbrk+0x5c>)
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <_sbrk+0x60>)
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007060:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <_sbrk+0x64>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d102      	bne.n	800706e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <_sbrk+0x64>)
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <_sbrk+0x68>)
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <_sbrk+0x64>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	429a      	cmp	r2, r3
 800707a:	d207      	bcs.n	800708c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800707c:	f006 ff20 	bl	800dec0 <__errno>
 8007080:	4603      	mov	r3, r0
 8007082:	220c      	movs	r2, #12
 8007084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800708a:	e009      	b.n	80070a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800708c:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <_sbrk+0x64>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <_sbrk+0x64>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4413      	add	r3, r2
 800709a:	4a05      	ldr	r2, [pc, #20]	; (80070b0 <_sbrk+0x64>)
 800709c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800709e:	68fb      	ldr	r3, [r7, #12]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20050000 	.word	0x20050000
 80070ac:	00000400 	.word	0x00000400
 80070b0:	20001700 	.word	0x20001700
 80070b4:	20001858 	.word	0x20001858

080070b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <SystemInit+0x20>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	4a05      	ldr	r2, [pc, #20]	; (80070d8 <SystemInit+0x20>)
 80070c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e000ed00 	.word	0xe000ed00

080070dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80070dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80070e0:	480d      	ldr	r0, [pc, #52]	; (8007118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80070e2:	490e      	ldr	r1, [pc, #56]	; (800711c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80070e4:	4a0e      	ldr	r2, [pc, #56]	; (8007120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80070e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070e8:	e002      	b.n	80070f0 <LoopCopyDataInit>

080070ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070ee:	3304      	adds	r3, #4

080070f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070f4:	d3f9      	bcc.n	80070ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80070f8:	4c0b      	ldr	r4, [pc, #44]	; (8007128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80070fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070fc:	e001      	b.n	8007102 <LoopFillZerobss>

080070fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007100:	3204      	adds	r2, #4

08007102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007104:	d3fb      	bcc.n	80070fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007106:	f7ff ffd7 	bl	80070b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800710a:	f006 fedf 	bl	800decc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800710e:	f7fd fef7 	bl	8004f00 <main>
  bx  lr    
 8007112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007114:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800711c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8007120:	08011d64 	.word	0x08011d64
  ldr r2, =_sbss
 8007124:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8007128:	20001854 	.word	0x20001854

0800712c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800712c:	e7fe      	b.n	800712c <ADC_IRQHandler>

0800712e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007132:	2003      	movs	r0, #3
 8007134:	f000 f94c 	bl	80073d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007138:	2000      	movs	r0, #0
 800713a:	f000 f805 	bl	8007148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800713e:	f7ff fb0b 	bl	8006758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007150:	4b12      	ldr	r3, [pc, #72]	; (800719c <HAL_InitTick+0x54>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <HAL_InitTick+0x58>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	4619      	mov	r1, r3
 800715a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800715e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007162:	fbb2 f3f3 	udiv	r3, r2, r3
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f967 	bl	800743a <HAL_SYSTICK_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e00e      	b.n	8007194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b0f      	cmp	r3, #15
 800717a:	d80a      	bhi.n	8007192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800717c:	2200      	movs	r2, #0
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007184:	f000 f92f 	bl	80073e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007188:	4a06      	ldr	r2, [pc, #24]	; (80071a4 <HAL_InitTick+0x5c>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e000      	b.n	8007194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000004 	.word	0x20000004
 80071a0:	2000000c 	.word	0x2000000c
 80071a4:	20000008 	.word	0x20000008

080071a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <HAL_IncTick+0x20>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_IncTick+0x24>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4413      	add	r3, r2
 80071b8:	4a04      	ldr	r2, [pc, #16]	; (80071cc <HAL_IncTick+0x24>)
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	2000000c 	.word	0x2000000c
 80071cc:	20001704 	.word	0x20001704

080071d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  return uwTick;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <HAL_GetTick+0x14>)
 80071d6:	681b      	ldr	r3, [r3, #0]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20001704 	.word	0x20001704

080071e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071f0:	f7ff ffee 	bl	80071d0 <HAL_GetTick>
 80071f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007200:	d005      	beq.n	800720e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <HAL_Delay+0x44>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800720e:	bf00      	nop
 8007210:	f7ff ffde 	bl	80071d0 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	429a      	cmp	r2, r3
 800721e:	d8f7      	bhi.n	8007210 <HAL_Delay+0x28>
  {
  }
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	2000000c 	.word	0x2000000c

08007230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <__NVIC_SetPriorityGrouping+0x40>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800724c:	4013      	ands	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007258:	4b06      	ldr	r3, [pc, #24]	; (8007274 <__NVIC_SetPriorityGrouping+0x44>)
 800725a:	4313      	orrs	r3, r2
 800725c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800725e:	4a04      	ldr	r2, [pc, #16]	; (8007270 <__NVIC_SetPriorityGrouping+0x40>)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	60d3      	str	r3, [r2, #12]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	e000ed00 	.word	0xe000ed00
 8007274:	05fa0000 	.word	0x05fa0000

08007278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <__NVIC_GetPriorityGrouping+0x18>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	f003 0307 	and.w	r3, r3, #7
}
 8007286:	4618      	mov	r0, r3
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800729e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	db0b      	blt.n	80072be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	f003 021f 	and.w	r2, r3, #31
 80072ac:	4907      	ldr	r1, [pc, #28]	; (80072cc <__NVIC_EnableIRQ+0x38>)
 80072ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	2001      	movs	r0, #1
 80072b6:	fa00 f202 	lsl.w	r2, r0, r2
 80072ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	e000e100 	.word	0xe000e100

080072d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db0a      	blt.n	80072fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	490c      	ldr	r1, [pc, #48]	; (800731c <__NVIC_SetPriority+0x4c>)
 80072ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ee:	0112      	lsls	r2, r2, #4
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	440b      	add	r3, r1
 80072f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072f8:	e00a      	b.n	8007310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	4908      	ldr	r1, [pc, #32]	; (8007320 <__NVIC_SetPriority+0x50>)
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	3b04      	subs	r3, #4
 8007308:	0112      	lsls	r2, r2, #4
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	440b      	add	r3, r1
 800730e:	761a      	strb	r2, [r3, #24]
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	e000e100 	.word	0xe000e100
 8007320:	e000ed00 	.word	0xe000ed00

08007324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f1c3 0307 	rsb	r3, r3, #7
 800733e:	2b04      	cmp	r3, #4
 8007340:	bf28      	it	cs
 8007342:	2304      	movcs	r3, #4
 8007344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	3304      	adds	r3, #4
 800734a:	2b06      	cmp	r3, #6
 800734c:	d902      	bls.n	8007354 <NVIC_EncodePriority+0x30>
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	3b03      	subs	r3, #3
 8007352:	e000      	b.n	8007356 <NVIC_EncodePriority+0x32>
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43da      	mvns	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	401a      	ands	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800736c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	43d9      	mvns	r1, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800737c:	4313      	orrs	r3, r2
         );
}
 800737e:	4618      	mov	r0, r3
 8007380:	3724      	adds	r7, #36	; 0x24
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3b01      	subs	r3, #1
 8007398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800739c:	d301      	bcc.n	80073a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800739e:	2301      	movs	r3, #1
 80073a0:	e00f      	b.n	80073c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073a2:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <SysTick_Config+0x40>)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073aa:	210f      	movs	r1, #15
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073b0:	f7ff ff8e 	bl	80072d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <SysTick_Config+0x40>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073ba:	4b04      	ldr	r3, [pc, #16]	; (80073cc <SysTick_Config+0x40>)
 80073bc:	2207      	movs	r2, #7
 80073be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	e000e010 	.word	0xe000e010

080073d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ff29 	bl	8007230 <__NVIC_SetPriorityGrouping>
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b086      	sub	sp, #24
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	4603      	mov	r3, r0
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073f8:	f7ff ff3e 	bl	8007278 <__NVIC_GetPriorityGrouping>
 80073fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	6978      	ldr	r0, [r7, #20]
 8007404:	f7ff ff8e 	bl	8007324 <NVIC_EncodePriority>
 8007408:	4602      	mov	r2, r0
 800740a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff ff5d 	bl	80072d0 <__NVIC_SetPriority>
}
 8007416:	bf00      	nop
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	4603      	mov	r3, r0
 8007426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff ff31 	bl	8007294 <__NVIC_EnableIRQ>
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff ffa2 	bl	800738c <SysTick_Config>
 8007448:	4603      	mov	r3, r0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e014      	b.n	800748e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	791b      	ldrb	r3, [r3, #4]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff f993 	bl	80067a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	795b      	ldrb	r3, [r3, #5]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_DAC_Start+0x16>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e040      	b.n	800752e <HAL_DAC_Start+0x98>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6819      	ldr	r1, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2201      	movs	r2, #1
 80074c6:	409a      	lsls	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10f      	bne.n	80074f6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80074e0:	2b3c      	cmp	r3, #60	; 0x3c
 80074e2:	d11d      	bne.n	8007520 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	605a      	str	r2, [r3, #4]
 80074f4:	e014      	b.n	8007520 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	213c      	movs	r1, #60	; 0x3c
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	429a      	cmp	r2, r3
 800750e:	d107      	bne.n	8007520 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0202 	orr.w	r2, r2, #2
 800751e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800753a:	b480      	push	{r7}
 800753c:	b087      	sub	sp, #28
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
 8007546:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	3308      	adds	r3, #8
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e004      	b.n	800756e <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	3314      	adds	r3, #20
 800756c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	461a      	mov	r2, r3
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	795b      	ldrb	r3, [r3, #5]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_DAC_ConfigChannel+0x18>
 8007598:	2302      	movs	r3, #2
 800759a:	e03c      	b.n	8007616 <HAL_DAC_ConfigChannel+0x92>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 0310 	and.w	r3, r3, #16
 80075b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43db      	mvns	r3, r3
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4013      	ands	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6819      	ldr	r1, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	22c0      	movs	r2, #192	; 0xc0
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43da      	mvns	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	400a      	ands	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007630:	f7ff fdce 	bl	80071d0 <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e099      	b.n	8007774 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007660:	e00f      	b.n	8007682 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007662:	f7ff fdb5 	bl	80071d0 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b05      	cmp	r3, #5
 800766e:	d908      	bls.n	8007682 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2203      	movs	r2, #3
 800767a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e078      	b.n	8007774 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e8      	bne.n	8007662 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4b38      	ldr	r3, [pc, #224]	; (800777c <HAL_DMA_Init+0x158>)
 800769c:	4013      	ands	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d107      	bne.n	80076ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	4313      	orrs	r3, r2
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f023 0307 	bic.w	r3, r3, #7
 8007702:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b04      	cmp	r3, #4
 8007714:	d117      	bne.n	8007746 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fb09 	bl	8007d40 <DMA_CheckFifoParam>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2240      	movs	r2, #64	; 0x40
 8007738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007742:	2301      	movs	r3, #1
 8007744:	e016      	b.n	8007774 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fac0 	bl	8007cd4 <DMA_CalcBaseAndBitshift>
 8007754:	4603      	mov	r3, r0
 8007756:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775c:	223f      	movs	r2, #63	; 0x3f
 800775e:	409a      	lsls	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	f010803f 	.word	0xf010803f

08007780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007796:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_DMA_Start_IT+0x26>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e048      	b.n	8007838 <HAL_DMA_Start_IT+0xb8>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d137      	bne.n	800782a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2202      	movs	r2, #2
 80077be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fa52 	bl	8007c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	223f      	movs	r2, #63	; 0x3f
 80077da:	409a      	lsls	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0216 	orr.w	r2, r2, #22
 80077ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0208 	orr.w	r2, r2, #8
 8007816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e005      	b.n	8007836 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007836:	7dfb      	ldrb	r3, [r7, #23]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800784e:	f7ff fcbf 	bl	80071d0 <HAL_GetTick>
 8007852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d008      	beq.n	8007872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e052      	b.n	8007918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0216 	bic.w	r2, r2, #22
 8007880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <HAL_DMA_Abort+0x62>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0208 	bic.w	r2, r2, #8
 80078b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0201 	bic.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078c2:	e013      	b.n	80078ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078c4:	f7ff fc84 	bl	80071d0 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d90c      	bls.n	80078ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2203      	movs	r2, #3
 80078dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e015      	b.n	8007918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e4      	bne.n	80078c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	223f      	movs	r2, #63	; 0x3f
 8007900:	409a      	lsls	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d004      	beq.n	800793e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e00c      	b.n	8007958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2205      	movs	r2, #5
 8007942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0201 	bic.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007970:	4b8e      	ldr	r3, [pc, #568]	; (8007bac <HAL_DMA_IRQHandler+0x248>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a8e      	ldr	r2, [pc, #568]	; (8007bb0 <HAL_DMA_IRQHandler+0x24c>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0a9b      	lsrs	r3, r3, #10
 800797c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798e:	2208      	movs	r2, #8
 8007990:	409a      	lsls	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4013      	ands	r3, r2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01a      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d013      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0204 	bic.w	r2, r2, #4
 80079b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	2208      	movs	r2, #8
 80079be:	409a      	lsls	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c8:	f043 0201 	orr.w	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d4:	2201      	movs	r2, #1
 80079d6:	409a      	lsls	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d012      	beq.n	8007a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f2:	2201      	movs	r2, #1
 80079f4:	409a      	lsls	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fe:	f043 0202 	orr.w	r2, r3, #2
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4013      	ands	r3, r2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d012      	beq.n	8007a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	2204      	movs	r2, #4
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	f043 0204 	orr.w	r2, r3, #4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a40:	2210      	movs	r2, #16
 8007a42:	409a      	lsls	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d043      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d03c      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5e:	2210      	movs	r2, #16
 8007a60:	409a      	lsls	r2, r3
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d018      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d108      	bne.n	8007a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d024      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	4798      	blx	r3
 8007a92:	e01f      	b.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01b      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	4798      	blx	r3
 8007aa4:	e016      	b.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0208 	bic.w	r2, r2, #8
 8007ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad8:	2220      	movs	r2, #32
 8007ada:	409a      	lsls	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 808f 	beq.w	8007c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8087 	beq.w	8007c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afa:	2220      	movs	r2, #32
 8007afc:	409a      	lsls	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d136      	bne.n	8007b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0216 	bic.w	r2, r2, #22
 8007b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <HAL_DMA_IRQHandler+0x1da>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0208 	bic.w	r2, r2, #8
 8007b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b52:	223f      	movs	r2, #63	; 0x3f
 8007b54:	409a      	lsls	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d07e      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
        }
        return;
 8007b7a:	e079      	b.n	8007c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01d      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10d      	bne.n	8007bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d031      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
 8007ba8:	e02c      	b.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
 8007baa:	bf00      	nop
 8007bac:	20000004 	.word	0x20000004
 8007bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d023      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4798      	blx	r3
 8007bc4:	e01e      	b.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10f      	bne.n	8007bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0210 	bic.w	r2, r2, #16
 8007be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d032      	beq.n	8007c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d022      	beq.n	8007c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d307      	bcc.n	8007c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f2      	bne.n	8007c30 <HAL_DMA_IRQHandler+0x2cc>
 8007c4a:	e000      	b.n	8007c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4798      	blx	r3
 8007c6e:	e000      	b.n	8007c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007c70:	bf00      	nop
    }
  }
}
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d108      	bne.n	8007cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007cb6:	e007      	b.n	8007cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	60da      	str	r2, [r3, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	3b10      	subs	r3, #16
 8007ce4:	4a13      	ldr	r2, [pc, #76]	; (8007d34 <DMA_CalcBaseAndBitshift+0x60>)
 8007ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cea:	091b      	lsrs	r3, r3, #4
 8007cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007cee:	4a12      	ldr	r2, [pc, #72]	; (8007d38 <DMA_CalcBaseAndBitshift+0x64>)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d908      	bls.n	8007d14 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <DMA_CalcBaseAndBitshift+0x68>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	659a      	str	r2, [r3, #88]	; 0x58
 8007d12:	e006      	b.n	8007d22 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <DMA_CalcBaseAndBitshift+0x68>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	aaaaaaab 	.word	0xaaaaaaab
 8007d38:	0801191c 	.word	0x0801191c
 8007d3c:	fffffc00 	.word	0xfffffc00

08007d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11f      	bne.n	8007d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d856      	bhi.n	8007e0e <DMA_CheckFifoParam+0xce>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <DMA_CheckFifoParam+0x28>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d8b 	.word	0x08007d8b
 8007d70:	08007d79 	.word	0x08007d79
 8007d74:	08007e0f 	.word	0x08007e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d046      	beq.n	8007e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d88:	e043      	b.n	8007e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d92:	d140      	bne.n	8007e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d98:	e03d      	b.n	8007e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da2:	d121      	bne.n	8007de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d837      	bhi.n	8007e1a <DMA_CheckFifoParam+0xda>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <DMA_CheckFifoParam+0x70>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dc1 	.word	0x08007dc1
 8007db4:	08007dc7 	.word	0x08007dc7
 8007db8:	08007dc1 	.word	0x08007dc1
 8007dbc:	08007dd9 	.word	0x08007dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc4:	e030      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d025      	beq.n	8007e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dd6:	e022      	b.n	8007e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007de0:	d11f      	bne.n	8007e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007de6:	e01c      	b.n	8007e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d903      	bls.n	8007df6 <DMA_CheckFifoParam+0xb6>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d003      	beq.n	8007dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007df4:	e018      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfa:	e015      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00e      	beq.n	8007e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	e00b      	b.n	8007e26 <DMA_CheckFifoParam+0xe6>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e00a      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e12:	bf00      	nop
 8007e14:	e008      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e16:	bf00      	nop
 8007e18:	e006      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e1a:	bf00      	nop
 8007e1c:	e004      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e1e:	bf00      	nop
 8007e20:	e002      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <DMA_CheckFifoParam+0xe8>
      break;
 8007e26:	bf00      	nop
    }
  } 
  
  return status; 
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop

08007e38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e06a      	b.n	8007f20 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d106      	bne.n	8007e62 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2223      	movs	r2, #35	; 0x23
 8007e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7fe fcdf 	bl	8006820 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e62:	4b31      	ldr	r3, [pc, #196]	; (8007f28 <HAL_ETH_Init+0xf0>)
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	4a30      	ldr	r2, [pc, #192]	; (8007f28 <HAL_ETH_Init+0xf0>)
 8007e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e6e:	4b2e      	ldr	r3, [pc, #184]	; (8007f28 <HAL_ETH_Init+0xf0>)
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e76:	60bb      	str	r3, [r7, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007e7a:	4b2c      	ldr	r3, [pc, #176]	; (8007f2c <HAL_ETH_Init+0xf4>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4a2b      	ldr	r2, [pc, #172]	; (8007f2c <HAL_ETH_Init+0xf4>)
 8007e80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e84:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007e86:	4b29      	ldr	r3, [pc, #164]	; (8007f2c <HAL_ETH_Init+0xf4>)
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	4927      	ldr	r1, [pc, #156]	; (8007f2c <HAL_ETH_Init+0xf4>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007e94:	4b25      	ldr	r3, [pc, #148]	; (8007f2c <HAL_ETH_Init+0xf4>)
 8007e96:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6812      	ldr	r2, [r2, #0]
 8007ea6:	f043 0301 	orr.w	r3, r3, #1
 8007eaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007eb0:	f7ff f98e 	bl	80071d0 <HAL_GetTick>
 8007eb4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007eb6:	e011      	b.n	8007edc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007eb8:	f7ff f98a 	bl	80071d0 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007ec6:	d909      	bls.n	8007edc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2204      	movs	r2, #4
 8007ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	22e0      	movs	r2, #224	; 0xe0
 8007ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e021      	b.n	8007f20 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e4      	bne.n	8007eb8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f958 	bl	80081a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9ff 	bl	80082f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa55 	bl	80083aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	461a      	mov	r2, r3
 8007f06:	2100      	movs	r1, #0
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f9bd 	bl	8008288 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2210      	movs	r2, #16
 8007f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	40013800 	.word	0x40013800

08007f30 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4b51      	ldr	r3, [pc, #324]	; (800808c <ETH_SetMACConfig+0x15c>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	7c1b      	ldrb	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <ETH_SetMACConfig+0x28>
 8007f52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007f56:	e000      	b.n	8007f5a <ETH_SetMACConfig+0x2a>
 8007f58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	7c5b      	ldrb	r3, [r3, #17]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <ETH_SetMACConfig+0x38>
 8007f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f66:	e000      	b.n	8007f6a <ETH_SetMACConfig+0x3a>
 8007f68:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007f6a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007f70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	7fdb      	ldrb	r3, [r3, #31]
 8007f76:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007f78:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	7f92      	ldrb	r2, [r2, #30]
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	d102      	bne.n	8007f8e <ETH_SetMACConfig+0x5e>
 8007f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f8c:	e000      	b.n	8007f90 <ETH_SetMACConfig+0x60>
 8007f8e:	2200      	movs	r2, #0
                        macconf->Speed |
 8007f90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	7f1b      	ldrb	r3, [r3, #28]
 8007f96:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007f98:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007f9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	791b      	ldrb	r3, [r3, #4]
 8007fa4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007fa6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	d102      	bne.n	8007fb8 <ETH_SetMACConfig+0x88>
 8007fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb6:	e000      	b.n	8007fba <ETH_SetMACConfig+0x8a>
 8007fb8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007fba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	7bdb      	ldrb	r3, [r3, #15]
 8007fc0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007fc2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007fc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fd0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007fea:	2001      	movs	r0, #1
 8007fec:	f7ff f8fc 	bl	80071e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008006:	4013      	ands	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008016:	2a00      	cmp	r2, #0
 8008018:	d101      	bne.n	800801e <ETH_SetMACConfig+0xee>
 800801a:	2280      	movs	r2, #128	; 0x80
 800801c:	e000      	b.n	8008020 <ETH_SetMACConfig+0xf0>
 800801e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008020:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8008026:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800802e:	2a01      	cmp	r2, #1
 8008030:	d101      	bne.n	8008036 <ETH_SetMACConfig+0x106>
 8008032:	2208      	movs	r2, #8
 8008034:	e000      	b.n	8008038 <ETH_SetMACConfig+0x108>
 8008036:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8008038:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8008040:	2a01      	cmp	r2, #1
 8008042:	d101      	bne.n	8008048 <ETH_SetMACConfig+0x118>
 8008044:	2204      	movs	r2, #4
 8008046:	e000      	b.n	800804a <ETH_SetMACConfig+0x11a>
 8008048:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800804a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8008052:	2a01      	cmp	r2, #1
 8008054:	d101      	bne.n	800805a <ETH_SetMACConfig+0x12a>
 8008056:	2202      	movs	r2, #2
 8008058:	e000      	b.n	800805c <ETH_SetMACConfig+0x12c>
 800805a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800805c:	4313      	orrs	r3, r2
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008074:	2001      	movs	r0, #1
 8008076:	f7ff f8b7 	bl	80071e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	619a      	str	r2, [r3, #24]
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	ff20810f 	.word	0xff20810f

08008090 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4b3d      	ldr	r3, [pc, #244]	; (80081a0 <ETH_SetDMAConfig+0x110>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	7b1b      	ldrb	r3, [r3, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <ETH_SetDMAConfig+0x2c>
 80080b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80080ba:	e000      	b.n	80080be <ETH_SetDMAConfig+0x2e>
 80080bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	7b5b      	ldrb	r3, [r3, #13]
 80080c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80080c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	7f52      	ldrb	r2, [r2, #29]
 80080ca:	2a00      	cmp	r2, #0
 80080cc:	d102      	bne.n	80080d4 <ETH_SetDMAConfig+0x44>
 80080ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080d2:	e000      	b.n	80080d6 <ETH_SetDMAConfig+0x46>
 80080d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80080d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	7b9b      	ldrb	r3, [r3, #14]
 80080dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80080de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80080e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	7f1b      	ldrb	r3, [r3, #28]
 80080ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80080ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	7f9b      	ldrb	r3, [r3, #30]
 80080f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80080f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80080fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008102:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8008104:	4313      	orrs	r3, r2
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008114:	461a      	mov	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008126:	2001      	movs	r0, #1
 8008128:	f7ff f85e 	bl	80071e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008134:	461a      	mov	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	791b      	ldrb	r3, [r3, #4]
 800813e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008144:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800814a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008150:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008158:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800815a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8008162:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008168:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008176:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008184:	2001      	movs	r0, #1
 8008186:	f7ff f82f 	bl	80071e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008192:	461a      	mov	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6013      	str	r3, [r2, #0]
}
 8008198:	bf00      	nop
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	f8de3f23 	.word	0xf8de3f23

080081a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b0a6      	sub	sp, #152	; 0x98
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80081e0:	2300      	movs	r3, #0
 80081e2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80081f4:	2300      	movs	r3, #0
 80081f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008200:	2300      	movs	r3, #0
 8008202:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008206:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800820a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800820c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008210:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008212:	2300      	movs	r3, #0
 8008214:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff fe86 	bl	8007f30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8008224:	2301      	movs	r3, #1
 8008226:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8008228:	2301      	movs	r3, #1
 800822a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008232:	2301      	movs	r3, #1
 8008234:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008236:	2300      	movs	r3, #0
 8008238:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800823a:	2300      	movs	r3, #0
 800823c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8008240:	2300      	movs	r3, #0
 8008242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008246:	2300      	movs	r3, #0
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008250:	2301      	movs	r3, #1
 8008252:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008258:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800825a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800825e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008264:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800826c:	2300      	movs	r3, #0
 800826e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008270:	2300      	movs	r3, #0
 8008272:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008274:	f107 0308 	add.w	r3, r7, #8
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff ff08 	bl	8008090 <ETH_SetDMAConfig>
}
 8008280:	bf00      	nop
 8008282:	3798      	adds	r7, #152	; 0x98
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3305      	adds	r3, #5
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	021b      	lsls	r3, r3, #8
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	3204      	adds	r2, #4
 80082a0:	7812      	ldrb	r2, [r2, #0]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4b11      	ldr	r3, [pc, #68]	; (80082f0 <ETH_MACAddressConfig+0x68>)
 80082aa:	4413      	add	r3, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3303      	adds	r3, #3
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	061a      	lsls	r2, r3, #24
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3302      	adds	r3, #2
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	041b      	lsls	r3, r3, #16
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3301      	adds	r3, #1
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	021b      	lsls	r3, r3, #8
 80082cc:	4313      	orrs	r3, r2
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	7812      	ldrb	r2, [r2, #0]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <ETH_MACAddressConfig+0x6c>)
 80082da:	4413      	add	r3, r2
 80082dc:	461a      	mov	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	6013      	str	r3, [r2, #0]
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40028040 	.word	0x40028040
 80082f4:	40028044 	.word	0x40028044

080082f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e03e      	b.n	8008384 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68d9      	ldr	r1, [r3, #12]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	440b      	add	r3, r1
 8008316:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2200      	movs	r2, #0
 8008328:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2200      	movs	r2, #0
 800832e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	3206      	adds	r2, #6
 8008338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b02      	cmp	r3, #2
 800834c:	d80c      	bhi.n	8008368 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68d9      	ldr	r1, [r3, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	440b      	add	r3, r1
 8008360:	461a      	mov	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	e004      	b.n	8008372 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	461a      	mov	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b03      	cmp	r3, #3
 8008388:	d9bd      	bls.n	8008306 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839c:	611a      	str	r2, [r3, #16]
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e046      	b.n	8008446 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6919      	ldr	r1, [r3, #16]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	440b      	add	r3, r1
 80083c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2200      	movs	r2, #0
 80083ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2200      	movs	r2, #0
 80083da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80083fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	3212      	adds	r2, #18
 8008412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b02      	cmp	r3, #2
 800841a:	d80c      	bhi.n	8008436 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6919      	ldr	r1, [r3, #16]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	440b      	add	r3, r1
 800842e:	461a      	mov	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	60da      	str	r2, [r3, #12]
 8008434:	e004      	b.n	8008440 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	461a      	mov	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d9b5      	bls.n	80083b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691a      	ldr	r2, [r3, #16]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008476:	60da      	str	r2, [r3, #12]
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008484:	b480      	push	{r7}
 8008486:	b089      	sub	sp, #36	; 0x24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008496:	2300      	movs	r3, #0
 8008498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
 80084a2:	e175      	b.n	8008790 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80084a4:	2201      	movs	r2, #1
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	4013      	ands	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	429a      	cmp	r2, r3
 80084be:	f040 8164 	bne.w	800878a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d005      	beq.n	80084da <HAL_GPIO_Init+0x56>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d130      	bne.n	800853c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	2203      	movs	r2, #3
 80084e6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ea:	43db      	mvns	r3, r3
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	4013      	ands	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	4313      	orrs	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008510:	2201      	movs	r2, #1
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	4013      	ands	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	091b      	lsrs	r3, r3, #4
 8008526:	f003 0201 	and.w	r2, r3, #1
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	fa02 f303 	lsl.w	r3, r2, r3
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	4313      	orrs	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	2b03      	cmp	r3, #3
 8008546:	d017      	beq.n	8008578 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	2203      	movs	r2, #3
 8008554:	fa02 f303 	lsl.w	r3, r2, r3
 8008558:	43db      	mvns	r3, r3
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	4013      	ands	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	4313      	orrs	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	2b02      	cmp	r3, #2
 8008582:	d123      	bne.n	80085cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	08da      	lsrs	r2, r3, #3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3208      	adds	r2, #8
 800858c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	220f      	movs	r2, #15
 800859c:	fa02 f303 	lsl.w	r3, r2, r3
 80085a0:	43db      	mvns	r3, r3
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	4013      	ands	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	fa02 f303 	lsl.w	r3, r2, r3
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	08da      	lsrs	r2, r3, #3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3208      	adds	r2, #8
 80085c6:	69b9      	ldr	r1, [r7, #24]
 80085c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	2203      	movs	r2, #3
 80085d8:	fa02 f303 	lsl.w	r3, r2, r3
 80085dc:	43db      	mvns	r3, r3
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	4013      	ands	r3, r2
 80085e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f003 0203 	and.w	r2, r3, #3
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 80be 	beq.w	800878a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800860e:	4b66      	ldr	r3, [pc, #408]	; (80087a8 <HAL_GPIO_Init+0x324>)
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	4a65      	ldr	r2, [pc, #404]	; (80087a8 <HAL_GPIO_Init+0x324>)
 8008614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008618:	6453      	str	r3, [r2, #68]	; 0x44
 800861a:	4b63      	ldr	r3, [pc, #396]	; (80087a8 <HAL_GPIO_Init+0x324>)
 800861c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008626:	4a61      	ldr	r2, [pc, #388]	; (80087ac <HAL_GPIO_Init+0x328>)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	089b      	lsrs	r3, r3, #2
 800862c:	3302      	adds	r3, #2
 800862e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008632:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	220f      	movs	r2, #15
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	43db      	mvns	r3, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	4013      	ands	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a58      	ldr	r2, [pc, #352]	; (80087b0 <HAL_GPIO_Init+0x32c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d037      	beq.n	80086c2 <HAL_GPIO_Init+0x23e>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a57      	ldr	r2, [pc, #348]	; (80087b4 <HAL_GPIO_Init+0x330>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d031      	beq.n	80086be <HAL_GPIO_Init+0x23a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a56      	ldr	r2, [pc, #344]	; (80087b8 <HAL_GPIO_Init+0x334>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d02b      	beq.n	80086ba <HAL_GPIO_Init+0x236>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a55      	ldr	r2, [pc, #340]	; (80087bc <HAL_GPIO_Init+0x338>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d025      	beq.n	80086b6 <HAL_GPIO_Init+0x232>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a54      	ldr	r2, [pc, #336]	; (80087c0 <HAL_GPIO_Init+0x33c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d01f      	beq.n	80086b2 <HAL_GPIO_Init+0x22e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a53      	ldr	r2, [pc, #332]	; (80087c4 <HAL_GPIO_Init+0x340>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d019      	beq.n	80086ae <HAL_GPIO_Init+0x22a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a52      	ldr	r2, [pc, #328]	; (80087c8 <HAL_GPIO_Init+0x344>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <HAL_GPIO_Init+0x226>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a51      	ldr	r2, [pc, #324]	; (80087cc <HAL_GPIO_Init+0x348>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00d      	beq.n	80086a6 <HAL_GPIO_Init+0x222>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a50      	ldr	r2, [pc, #320]	; (80087d0 <HAL_GPIO_Init+0x34c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <HAL_GPIO_Init+0x21e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a4f      	ldr	r2, [pc, #316]	; (80087d4 <HAL_GPIO_Init+0x350>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d101      	bne.n	800869e <HAL_GPIO_Init+0x21a>
 800869a:	2309      	movs	r3, #9
 800869c:	e012      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 800869e:	230a      	movs	r3, #10
 80086a0:	e010      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086a2:	2308      	movs	r3, #8
 80086a4:	e00e      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086a6:	2307      	movs	r3, #7
 80086a8:	e00c      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086aa:	2306      	movs	r3, #6
 80086ac:	e00a      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086ae:	2305      	movs	r3, #5
 80086b0:	e008      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086b2:	2304      	movs	r3, #4
 80086b4:	e006      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086b6:	2303      	movs	r3, #3
 80086b8:	e004      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e002      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_GPIO_Init+0x240>
 80086c2:	2300      	movs	r3, #0
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	f002 0203 	and.w	r2, r2, #3
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	4093      	lsls	r3, r2
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80086d4:	4935      	ldr	r1, [pc, #212]	; (80087ac <HAL_GPIO_Init+0x328>)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	3302      	adds	r3, #2
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086e2:	4b3d      	ldr	r3, [pc, #244]	; (80087d8 <HAL_GPIO_Init+0x354>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	43db      	mvns	r3, r3
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4013      	ands	r3, r2
 80086f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008706:	4a34      	ldr	r2, [pc, #208]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800870c:	4b32      	ldr	r3, [pc, #200]	; (80087d8 <HAL_GPIO_Init+0x354>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	43db      	mvns	r3, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008730:	4a29      	ldr	r2, [pc, #164]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008736:	4b28      	ldr	r3, [pc, #160]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	43db      	mvns	r3, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4013      	ands	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800875a:	4a1f      	ldr	r2, [pc, #124]	; (80087d8 <HAL_GPIO_Init+0x354>)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008760:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008784:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <HAL_GPIO_Init+0x354>)
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3301      	adds	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b0f      	cmp	r3, #15
 8008794:	f67f ae86 	bls.w	80084a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3724      	adds	r7, #36	; 0x24
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40013800 	.word	0x40013800
 80087b0:	40020000 	.word	0x40020000
 80087b4:	40020400 	.word	0x40020400
 80087b8:	40020800 	.word	0x40020800
 80087bc:	40020c00 	.word	0x40020c00
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40021400 	.word	0x40021400
 80087c8:	40021800 	.word	0x40021800
 80087cc:	40021c00 	.word	0x40021c00
 80087d0:	40022000 	.word	0x40022000
 80087d4:	40022400 	.word	0x40022400
 80087d8:	40013c00 	.word	0x40013c00

080087dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	887b      	ldrh	r3, [r7, #2]
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e001      	b.n	80087fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	807b      	strh	r3, [r7, #2]
 8008818:	4613      	mov	r3, r2
 800881a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800881c:	787b      	ldrb	r3, [r7, #1]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008822:	887a      	ldrh	r2, [r7, #2]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008828:	e003      	b.n	8008832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800882a:	887b      	ldrh	r3, [r7, #2]
 800882c:	041a      	lsls	r2, r3, #16
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	619a      	str	r2, [r3, #24]
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008850:	887a      	ldrh	r2, [r7, #2]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4013      	ands	r3, r2
 8008856:	041a      	lsls	r2, r3, #16
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	43d9      	mvns	r1, r3
 800885c:	887b      	ldrh	r3, [r7, #2]
 800885e:	400b      	ands	r3, r1
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	619a      	str	r2, [r3, #24]
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008874:	b08f      	sub	sp, #60	; 0x3c
 8008876:	af0a      	add	r7, sp, #40	; 0x28
 8008878:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e116      	b.n	8008ab2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fe fa6e 	bl	8006d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2203      	movs	r2, #3
 80088a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f004 f83a 	bl	800c93c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	687e      	ldr	r6, [r7, #4]
 80088d0:	466d      	mov	r5, sp
 80088d2:	f106 0410 	add.w	r4, r6, #16
 80088d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80088e6:	1d33      	adds	r3, r6, #4
 80088e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088ea:	6838      	ldr	r0, [r7, #0]
 80088ec:	f003 ffce 	bl	800c88c <USB_CoreInit>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e0d7      	b.n	8008ab2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f004 f828 	bl	800c95e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
 8008912:	e04a      	b.n	80089aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008914:	7bfa      	ldrb	r2, [r7, #15]
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4613      	mov	r3, r2
 800891a:	00db      	lsls	r3, r3, #3
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	333d      	adds	r3, #61	; 0x3d
 8008924:	2201      	movs	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008928:	7bfa      	ldrb	r2, [r7, #15]
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	333c      	adds	r3, #60	; 0x3c
 8008938:	7bfa      	ldrb	r2, [r7, #15]
 800893a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800893c:	7bfa      	ldrb	r2, [r7, #15]
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	b298      	uxth	r0, r3
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	3344      	adds	r3, #68	; 0x44
 8008950:	4602      	mov	r2, r0
 8008952:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008954:	7bfa      	ldrb	r2, [r7, #15]
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	3340      	adds	r3, #64	; 0x40
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008968:	7bfa      	ldrb	r2, [r7, #15]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	3348      	adds	r3, #72	; 0x48
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800897c:	7bfa      	ldrb	r2, [r7, #15]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	334c      	adds	r3, #76	; 0x4c
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008990:	7bfa      	ldrb	r2, [r7, #15]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	3354      	adds	r3, #84	; 0x54
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	3301      	adds	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]
 80089aa:	7bfa      	ldrb	r2, [r7, #15]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d3af      	bcc.n	8008914 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
 80089b8:	e044      	b.n	8008a44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80089ba:	7bfa      	ldrb	r2, [r7, #15]
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	4613      	mov	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80089cc:	2200      	movs	r2, #0
 80089ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80089d0:	7bfa      	ldrb	r2, [r7, #15]
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	4613      	mov	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	440b      	add	r3, r1
 80089de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80089e2:	7bfa      	ldrb	r2, [r7, #15]
 80089e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80089e6:	7bfa      	ldrb	r2, [r7, #15]
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80089fc:	7bfa      	ldrb	r2, [r7, #15]
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4613      	mov	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a12:	7bfa      	ldrb	r2, [r7, #15]
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	4613      	mov	r3, r2
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	440b      	add	r3, r1
 8008a20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a28:	7bfa      	ldrb	r2, [r7, #15]
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	3301      	adds	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	7bfa      	ldrb	r2, [r7, #15]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d3b5      	bcc.n	80089ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	687e      	ldr	r6, [r7, #4]
 8008a56:	466d      	mov	r5, sp
 8008a58:	f106 0410 	add.w	r4, r6, #16
 8008a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a68:	e885 0003 	stmia.w	r5, {r0, r1}
 8008a6c:	1d33      	adds	r3, r6, #4
 8008a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a70:	6838      	ldr	r0, [r7, #0]
 8008a72:	f003 ffc1 	bl	800c9f8 <USB_DevInit>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d005      	beq.n	8008a88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e014      	b.n	8008ab2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d102      	bne.n	8008aa6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f80b 	bl	8008abc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f004 f97f 	bl	800cdae <USB_DevDisconnect>

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008abc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <HAL_PCDEx_ActivateLPM+0x44>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	10000003 	.word	0x10000003

08008b04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a04      	ldr	r2, [pc, #16]	; (8008b20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b12:	6013      	str	r3, [r2, #0]
}
 8008b14:	bf00      	nop
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40007000 	.word	0x40007000

08008b24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008b2e:	4b23      	ldr	r3, [pc, #140]	; (8008bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	4a22      	ldr	r2, [pc, #136]	; (8008bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8008b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b38:	6413      	str	r3, [r2, #64]	; 0x40
 8008b3a:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <HAL_PWREx_EnableOverDrive+0x98>)
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008b46:	4b1e      	ldr	r3, [pc, #120]	; (8008bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a1d      	ldr	r2, [pc, #116]	; (8008bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b52:	f7fe fb3d 	bl	80071d0 <HAL_GetTick>
 8008b56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b58:	e009      	b.n	8008b6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b5a:	f7fe fb39 	bl	80071d0 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b68:	d901      	bls.n	8008b6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e022      	b.n	8008bb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008b6e:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b7a:	d1ee      	bne.n	8008b5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b88:	f7fe fb22 	bl	80071d0 <HAL_GetTick>
 8008b8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008b8e:	e009      	b.n	8008ba4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008b90:	f7fe fb1e 	bl	80071d0 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b9e:	d901      	bls.n	8008ba4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e007      	b.n	8008bb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008ba4:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bb0:	d1ee      	bne.n	8008b90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	40007000 	.word	0x40007000

08008bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e291      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 8087 	beq.w	8008cf6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008be8:	4b96      	ldr	r3, [pc, #600]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f003 030c 	and.w	r3, r3, #12
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d00c      	beq.n	8008c0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bf4:	4b93      	ldr	r3, [pc, #588]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 030c 	and.w	r3, r3, #12
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d112      	bne.n	8008c26 <HAL_RCC_OscConfig+0x62>
 8008c00:	4b90      	ldr	r3, [pc, #576]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c0c:	d10b      	bne.n	8008c26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c0e:	4b8d      	ldr	r3, [pc, #564]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d06c      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x130>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d168      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e26b      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c2e:	d106      	bne.n	8008c3e <HAL_RCC_OscConfig+0x7a>
 8008c30:	4b84      	ldr	r3, [pc, #528]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a83      	ldr	r2, [pc, #524]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	e02e      	b.n	8008c9c <HAL_RCC_OscConfig+0xd8>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10c      	bne.n	8008c60 <HAL_RCC_OscConfig+0x9c>
 8008c46:	4b7f      	ldr	r3, [pc, #508]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a7e      	ldr	r2, [pc, #504]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	4b7c      	ldr	r3, [pc, #496]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a7b      	ldr	r2, [pc, #492]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	e01d      	b.n	8008c9c <HAL_RCC_OscConfig+0xd8>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c68:	d10c      	bne.n	8008c84 <HAL_RCC_OscConfig+0xc0>
 8008c6a:	4b76      	ldr	r3, [pc, #472]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a75      	ldr	r2, [pc, #468]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	4b73      	ldr	r3, [pc, #460]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a72      	ldr	r2, [pc, #456]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e00b      	b.n	8008c9c <HAL_RCC_OscConfig+0xd8>
 8008c84:	4b6f      	ldr	r3, [pc, #444]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a6e      	ldr	r2, [pc, #440]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	4b6c      	ldr	r3, [pc, #432]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a6b      	ldr	r2, [pc, #428]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d013      	beq.n	8008ccc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca4:	f7fe fa94 	bl	80071d0 <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cac:	f7fe fa90 	bl	80071d0 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b64      	cmp	r3, #100	; 0x64
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e21f      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cbe:	4b61      	ldr	r3, [pc, #388]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0f0      	beq.n	8008cac <HAL_RCC_OscConfig+0xe8>
 8008cca:	e014      	b.n	8008cf6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ccc:	f7fe fa80 	bl	80071d0 <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cd4:	f7fe fa7c 	bl	80071d0 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b64      	cmp	r3, #100	; 0x64
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e20b      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ce6:	4b57      	ldr	r3, [pc, #348]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f0      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x110>
 8008cf2:	e000      	b.n	8008cf6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d069      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d02:	4b50      	ldr	r3, [pc, #320]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 030c 	and.w	r3, r3, #12
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d0e:	4b4d      	ldr	r3, [pc, #308]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f003 030c 	and.w	r3, r3, #12
 8008d16:	2b08      	cmp	r3, #8
 8008d18:	d11c      	bne.n	8008d54 <HAL_RCC_OscConfig+0x190>
 8008d1a:	4b4a      	ldr	r3, [pc, #296]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d116      	bne.n	8008d54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d26:	4b47      	ldr	r3, [pc, #284]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <HAL_RCC_OscConfig+0x17a>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d001      	beq.n	8008d3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e1df      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d3e:	4b41      	ldr	r3, [pc, #260]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	493d      	ldr	r1, [pc, #244]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d52:	e040      	b.n	8008dd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d023      	beq.n	8008da4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d5c:	4b39      	ldr	r3, [pc, #228]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a38      	ldr	r2, [pc, #224]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d68:	f7fe fa32 	bl	80071d0 <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d70:	f7fe fa2e 	bl	80071d0 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e1bd      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d82:	4b30      	ldr	r3, [pc, #192]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0f0      	beq.n	8008d70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d8e:	4b2d      	ldr	r3, [pc, #180]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4929      	ldr	r1, [pc, #164]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	600b      	str	r3, [r1, #0]
 8008da2:	e018      	b.n	8008dd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008da4:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a26      	ldr	r2, [pc, #152]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008daa:	f023 0301 	bic.w	r3, r3, #1
 8008dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db0:	f7fe fa0e 	bl	80071d0 <HAL_GetTick>
 8008db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008db8:	f7fe fa0a 	bl	80071d0 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e199      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dca:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f0      	bne.n	8008db8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d038      	beq.n	8008e54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d019      	beq.n	8008e1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dea:	4b16      	ldr	r3, [pc, #88]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dee:	4a15      	ldr	r2, [pc, #84]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008df0:	f043 0301 	orr.w	r3, r3, #1
 8008df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df6:	f7fe f9eb 	bl	80071d0 <HAL_GetTick>
 8008dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dfc:	e008      	b.n	8008e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dfe:	f7fe f9e7 	bl	80071d0 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d901      	bls.n	8008e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e176      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e10:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0f0      	beq.n	8008dfe <HAL_RCC_OscConfig+0x23a>
 8008e1c:	e01a      	b.n	8008e54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e1e:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e22:	4a08      	ldr	r2, [pc, #32]	; (8008e44 <HAL_RCC_OscConfig+0x280>)
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2a:	f7fe f9d1 	bl	80071d0 <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e30:	e00a      	b.n	8008e48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e32:	f7fe f9cd 	bl	80071d0 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d903      	bls.n	8008e48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e15c      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
 8008e44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e48:	4b91      	ldr	r3, [pc, #580]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1ee      	bne.n	8008e32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80a4 	beq.w	8008faa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e62:	4b8b      	ldr	r3, [pc, #556]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10d      	bne.n	8008e8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e6e:	4b88      	ldr	r3, [pc, #544]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	4a87      	ldr	r2, [pc, #540]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e78:	6413      	str	r3, [r2, #64]	; 0x40
 8008e7a:	4b85      	ldr	r3, [pc, #532]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e82:	60bb      	str	r3, [r7, #8]
 8008e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e86:	2301      	movs	r3, #1
 8008e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e8a:	4b82      	ldr	r3, [pc, #520]	; (8009094 <HAL_RCC_OscConfig+0x4d0>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d118      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008e96:	4b7f      	ldr	r3, [pc, #508]	; (8009094 <HAL_RCC_OscConfig+0x4d0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a7e      	ldr	r2, [pc, #504]	; (8009094 <HAL_RCC_OscConfig+0x4d0>)
 8008e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ea2:	f7fe f995 	bl	80071d0 <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eaa:	f7fe f991 	bl	80071d0 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b64      	cmp	r3, #100	; 0x64
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e120      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ebc:	4b75      	ldr	r3, [pc, #468]	; (8009094 <HAL_RCC_OscConfig+0x4d0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d106      	bne.n	8008ede <HAL_RCC_OscConfig+0x31a>
 8008ed0:	4b6f      	ldr	r3, [pc, #444]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	4a6e      	ldr	r2, [pc, #440]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	6713      	str	r3, [r2, #112]	; 0x70
 8008edc:	e02d      	b.n	8008f3a <HAL_RCC_OscConfig+0x376>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10c      	bne.n	8008f00 <HAL_RCC_OscConfig+0x33c>
 8008ee6:	4b6a      	ldr	r3, [pc, #424]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eea:	4a69      	ldr	r2, [pc, #420]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ef2:	4b67      	ldr	r3, [pc, #412]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	4a66      	ldr	r2, [pc, #408]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008ef8:	f023 0304 	bic.w	r3, r3, #4
 8008efc:	6713      	str	r3, [r2, #112]	; 0x70
 8008efe:	e01c      	b.n	8008f3a <HAL_RCC_OscConfig+0x376>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b05      	cmp	r3, #5
 8008f06:	d10c      	bne.n	8008f22 <HAL_RCC_OscConfig+0x35e>
 8008f08:	4b61      	ldr	r3, [pc, #388]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0c:	4a60      	ldr	r2, [pc, #384]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f0e:	f043 0304 	orr.w	r3, r3, #4
 8008f12:	6713      	str	r3, [r2, #112]	; 0x70
 8008f14:	4b5e      	ldr	r3, [pc, #376]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f18:	4a5d      	ldr	r2, [pc, #372]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f20:	e00b      	b.n	8008f3a <HAL_RCC_OscConfig+0x376>
 8008f22:	4b5b      	ldr	r3, [pc, #364]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f26:	4a5a      	ldr	r2, [pc, #360]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f28:	f023 0301 	bic.w	r3, r3, #1
 8008f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f2e:	4b58      	ldr	r3, [pc, #352]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f32:	4a57      	ldr	r2, [pc, #348]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f34:	f023 0304 	bic.w	r3, r3, #4
 8008f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d015      	beq.n	8008f6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f42:	f7fe f945 	bl	80071d0 <HAL_GetTick>
 8008f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f48:	e00a      	b.n	8008f60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f4a:	f7fe f941 	bl	80071d0 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e0ce      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f60:	4b4b      	ldr	r3, [pc, #300]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0ee      	beq.n	8008f4a <HAL_RCC_OscConfig+0x386>
 8008f6c:	e014      	b.n	8008f98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f6e:	f7fe f92f 	bl	80071d0 <HAL_GetTick>
 8008f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f74:	e00a      	b.n	8008f8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f76:	f7fe f92b 	bl	80071d0 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d901      	bls.n	8008f8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e0b8      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f8c:	4b40      	ldr	r3, [pc, #256]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1ee      	bne.n	8008f76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d105      	bne.n	8008faa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f9e:	4b3c      	ldr	r3, [pc, #240]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	4a3b      	ldr	r2, [pc, #236]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 80a4 	beq.w	80090fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fb4:	4b36      	ldr	r3, [pc, #216]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 030c 	and.w	r3, r3, #12
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d06b      	beq.n	8009098 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d149      	bne.n	800905c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fc8:	4b31      	ldr	r3, [pc, #196]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a30      	ldr	r2, [pc, #192]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd4:	f7fe f8fc 	bl	80071d0 <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fdc:	f7fe f8f8 	bl	80071d0 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e087      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fee:	4b28      	ldr	r3, [pc, #160]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f0      	bne.n	8008fdc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69da      	ldr	r2, [r3, #28]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	019b      	lsls	r3, r3, #6
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	085b      	lsrs	r3, r3, #1
 8009012:	3b01      	subs	r3, #1
 8009014:	041b      	lsls	r3, r3, #16
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	061b      	lsls	r3, r3, #24
 800901e:	4313      	orrs	r3, r2
 8009020:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8009022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009026:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009028:	4b19      	ldr	r3, [pc, #100]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a18      	ldr	r2, [pc, #96]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 800902e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009034:	f7fe f8cc 	bl	80071d0 <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800903c:	f7fe f8c8 	bl	80071d0 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e057      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800904e:	4b10      	ldr	r3, [pc, #64]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0f0      	beq.n	800903c <HAL_RCC_OscConfig+0x478>
 800905a:	e04f      	b.n	80090fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a0b      	ldr	r2, [pc, #44]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8009062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009068:	f7fe f8b2 	bl	80071d0 <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009070:	f7fe f8ae 	bl	80071d0 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e03d      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009082:	4b03      	ldr	r3, [pc, #12]	; (8009090 <HAL_RCC_OscConfig+0x4cc>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1f0      	bne.n	8009070 <HAL_RCC_OscConfig+0x4ac>
 800908e:	e035      	b.n	80090fc <HAL_RCC_OscConfig+0x538>
 8009090:	40023800 	.word	0x40023800
 8009094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009098:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <HAL_RCC_OscConfig+0x544>)
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d028      	beq.n	80090f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d121      	bne.n	80090f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090be:	429a      	cmp	r2, r3
 80090c0:	d11a      	bne.n	80090f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090c8:	4013      	ands	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d111      	bne.n	80090f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	3b01      	subs	r3, #1
 80090e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d107      	bne.n	80090f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d001      	beq.n	80090fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e000      	b.n	80090fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	40023800 	.word	0x40023800

0800910c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e0d0      	b.n	80092c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009124:	4b6a      	ldr	r3, [pc, #424]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d910      	bls.n	8009154 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009132:	4b67      	ldr	r3, [pc, #412]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f023 020f 	bic.w	r2, r3, #15
 800913a:	4965      	ldr	r1, [pc, #404]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009142:	4b63      	ldr	r3, [pc, #396]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d001      	beq.n	8009154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e0b8      	b.n	80092c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d020      	beq.n	80091a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800916c:	4b59      	ldr	r3, [pc, #356]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4a58      	ldr	r2, [pc, #352]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 8009172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009184:	4b53      	ldr	r3, [pc, #332]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	4a52      	ldr	r2, [pc, #328]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 800918a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800918e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009190:	4b50      	ldr	r3, [pc, #320]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	494d      	ldr	r1, [pc, #308]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d040      	beq.n	8009230 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d107      	bne.n	80091c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091b6:	4b47      	ldr	r3, [pc, #284]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d115      	bne.n	80091ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e07f      	b.n	80092c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d107      	bne.n	80091de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091ce:	4b41      	ldr	r3, [pc, #260]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e073      	b.n	80092c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091de:	4b3d      	ldr	r3, [pc, #244]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e06b      	b.n	80092c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091ee:	4b39      	ldr	r3, [pc, #228]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f023 0203 	bic.w	r2, r3, #3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	4936      	ldr	r1, [pc, #216]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009200:	f7fd ffe6 	bl	80071d0 <HAL_GetTick>
 8009204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009206:	e00a      	b.n	800921e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009208:	f7fd ffe2 	bl	80071d0 <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	f241 3288 	movw	r2, #5000	; 0x1388
 8009216:	4293      	cmp	r3, r2
 8009218:	d901      	bls.n	800921e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e053      	b.n	80092c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800921e:	4b2d      	ldr	r3, [pc, #180]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f003 020c 	and.w	r2, r3, #12
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	429a      	cmp	r2, r3
 800922e:	d1eb      	bne.n	8009208 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009230:	4b27      	ldr	r3, [pc, #156]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d210      	bcs.n	8009260 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800923e:	4b24      	ldr	r3, [pc, #144]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f023 020f 	bic.w	r2, r3, #15
 8009246:	4922      	ldr	r1, [pc, #136]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	4313      	orrs	r3, r2
 800924c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800924e:	4b20      	ldr	r3, [pc, #128]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 030f 	and.w	r3, r3, #15
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d001      	beq.n	8009260 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e032      	b.n	80092c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800926c:	4b19      	ldr	r3, [pc, #100]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	4916      	ldr	r1, [pc, #88]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 800927a:	4313      	orrs	r3, r2
 800927c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800928a:	4b12      	ldr	r3, [pc, #72]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	490e      	ldr	r1, [pc, #56]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 800929a:	4313      	orrs	r3, r2
 800929c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800929e:	f000 f821 	bl	80092e4 <HAL_RCC_GetSysClockFreq>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	091b      	lsrs	r3, r3, #4
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	490a      	ldr	r1, [pc, #40]	; (80092d8 <HAL_RCC_ClockConfig+0x1cc>)
 80092b0:	5ccb      	ldrb	r3, [r1, r3]
 80092b2:	fa22 f303 	lsr.w	r3, r2, r3
 80092b6:	4a09      	ldr	r2, [pc, #36]	; (80092dc <HAL_RCC_ClockConfig+0x1d0>)
 80092b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80092ba:	4b09      	ldr	r3, [pc, #36]	; (80092e0 <HAL_RCC_ClockConfig+0x1d4>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fd ff42 	bl	8007148 <HAL_InitTick>

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	40023c00 	.word	0x40023c00
 80092d4:	40023800 	.word	0x40023800
 80092d8:	08011904 	.word	0x08011904
 80092dc:	20000004 	.word	0x20000004
 80092e0:	20000008 	.word	0x20000008

080092e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092e8:	b094      	sub	sp, #80	; 0x50
 80092ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	647b      	str	r3, [r7, #68]	; 0x44
 80092f0:	2300      	movs	r3, #0
 80092f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f4:	2300      	movs	r3, #0
 80092f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092fc:	4b79      	ldr	r3, [pc, #484]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f003 030c 	and.w	r3, r3, #12
 8009304:	2b08      	cmp	r3, #8
 8009306:	d00d      	beq.n	8009324 <HAL_RCC_GetSysClockFreq+0x40>
 8009308:	2b08      	cmp	r3, #8
 800930a:	f200 80e1 	bhi.w	80094d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_RCC_GetSysClockFreq+0x34>
 8009312:	2b04      	cmp	r3, #4
 8009314:	d003      	beq.n	800931e <HAL_RCC_GetSysClockFreq+0x3a>
 8009316:	e0db      	b.n	80094d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009318:	4b73      	ldr	r3, [pc, #460]	; (80094e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800931a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800931c:	e0db      	b.n	80094d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800931e:	4b73      	ldr	r3, [pc, #460]	; (80094ec <HAL_RCC_GetSysClockFreq+0x208>)
 8009320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009322:	e0d8      	b.n	80094d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009324:	4b6f      	ldr	r3, [pc, #444]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800932c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800932e:	4b6d      	ldr	r3, [pc, #436]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d063      	beq.n	8009402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800933a:	4b6a      	ldr	r3, [pc, #424]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	099b      	lsrs	r3, r3, #6
 8009340:	2200      	movs	r2, #0
 8009342:	63bb      	str	r3, [r7, #56]	; 0x38
 8009344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934c:	633b      	str	r3, [r7, #48]	; 0x30
 800934e:	2300      	movs	r3, #0
 8009350:	637b      	str	r3, [r7, #52]	; 0x34
 8009352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009356:	4622      	mov	r2, r4
 8009358:	462b      	mov	r3, r5
 800935a:	f04f 0000 	mov.w	r0, #0
 800935e:	f04f 0100 	mov.w	r1, #0
 8009362:	0159      	lsls	r1, r3, #5
 8009364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009368:	0150      	lsls	r0, r2, #5
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4621      	mov	r1, r4
 8009370:	1a51      	subs	r1, r2, r1
 8009372:	6139      	str	r1, [r7, #16]
 8009374:	4629      	mov	r1, r5
 8009376:	eb63 0301 	sbc.w	r3, r3, r1
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	f04f 0300 	mov.w	r3, #0
 8009384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009388:	4659      	mov	r1, fp
 800938a:	018b      	lsls	r3, r1, #6
 800938c:	4651      	mov	r1, sl
 800938e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009392:	4651      	mov	r1, sl
 8009394:	018a      	lsls	r2, r1, #6
 8009396:	4651      	mov	r1, sl
 8009398:	ebb2 0801 	subs.w	r8, r2, r1
 800939c:	4659      	mov	r1, fp
 800939e:	eb63 0901 	sbc.w	r9, r3, r1
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	f04f 0300 	mov.w	r3, #0
 80093aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093b6:	4690      	mov	r8, r2
 80093b8:	4699      	mov	r9, r3
 80093ba:	4623      	mov	r3, r4
 80093bc:	eb18 0303 	adds.w	r3, r8, r3
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	462b      	mov	r3, r5
 80093c4:	eb49 0303 	adc.w	r3, r9, r3
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80093d6:	4629      	mov	r1, r5
 80093d8:	024b      	lsls	r3, r1, #9
 80093da:	4621      	mov	r1, r4
 80093dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80093e0:	4621      	mov	r1, r4
 80093e2:	024a      	lsls	r2, r1, #9
 80093e4:	4610      	mov	r0, r2
 80093e6:	4619      	mov	r1, r3
 80093e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ea:	2200      	movs	r2, #0
 80093ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093f4:	f7f7 fc68 	bl	8000cc8 <__aeabi_uldivmod>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4613      	mov	r3, r2
 80093fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009400:	e058      	b.n	80094b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009402:	4b38      	ldr	r3, [pc, #224]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	099b      	lsrs	r3, r3, #6
 8009408:	2200      	movs	r2, #0
 800940a:	4618      	mov	r0, r3
 800940c:	4611      	mov	r1, r2
 800940e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009412:	623b      	str	r3, [r7, #32]
 8009414:	2300      	movs	r3, #0
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
 8009418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800941c:	4642      	mov	r2, r8
 800941e:	464b      	mov	r3, r9
 8009420:	f04f 0000 	mov.w	r0, #0
 8009424:	f04f 0100 	mov.w	r1, #0
 8009428:	0159      	lsls	r1, r3, #5
 800942a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800942e:	0150      	lsls	r0, r2, #5
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4641      	mov	r1, r8
 8009436:	ebb2 0a01 	subs.w	sl, r2, r1
 800943a:	4649      	mov	r1, r9
 800943c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009440:	f04f 0200 	mov.w	r2, #0
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800944c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009454:	ebb2 040a 	subs.w	r4, r2, sl
 8009458:	eb63 050b 	sbc.w	r5, r3, fp
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	00eb      	lsls	r3, r5, #3
 8009466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800946a:	00e2      	lsls	r2, r4, #3
 800946c:	4614      	mov	r4, r2
 800946e:	461d      	mov	r5, r3
 8009470:	4643      	mov	r3, r8
 8009472:	18e3      	adds	r3, r4, r3
 8009474:	603b      	str	r3, [r7, #0]
 8009476:	464b      	mov	r3, r9
 8009478:	eb45 0303 	adc.w	r3, r5, r3
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	f04f 0300 	mov.w	r3, #0
 8009486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800948a:	4629      	mov	r1, r5
 800948c:	028b      	lsls	r3, r1, #10
 800948e:	4621      	mov	r1, r4
 8009490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009494:	4621      	mov	r1, r4
 8009496:	028a      	lsls	r2, r1, #10
 8009498:	4610      	mov	r0, r2
 800949a:	4619      	mov	r1, r3
 800949c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949e:	2200      	movs	r2, #0
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	61fa      	str	r2, [r7, #28]
 80094a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094a8:	f7f7 fc0e 	bl	8000cc8 <__aeabi_uldivmod>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4613      	mov	r3, r2
 80094b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80094b4:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	0c1b      	lsrs	r3, r3, #16
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	3301      	adds	r3, #1
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80094c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094ce:	e002      	b.n	80094d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80094d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3750      	adds	r7, #80	; 0x50
 80094dc:	46bd      	mov	sp, r7
 80094de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094e2:	bf00      	nop
 80094e4:	40023800 	.word	0x40023800
 80094e8:	00f42400 	.word	0x00f42400
 80094ec:	007a1200 	.word	0x007a1200

080094f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094f4:	4b03      	ldr	r3, [pc, #12]	; (8009504 <HAL_RCC_GetHCLKFreq+0x14>)
 80094f6:	681b      	ldr	r3, [r3, #0]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000004 	.word	0x20000004

08009508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800950c:	f7ff fff0 	bl	80094f0 <HAL_RCC_GetHCLKFreq>
 8009510:	4602      	mov	r2, r0
 8009512:	4b05      	ldr	r3, [pc, #20]	; (8009528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	0a9b      	lsrs	r3, r3, #10
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	4903      	ldr	r1, [pc, #12]	; (800952c <HAL_RCC_GetPCLK1Freq+0x24>)
 800951e:	5ccb      	ldrb	r3, [r1, r3]
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009524:	4618      	mov	r0, r3
 8009526:	bd80      	pop	{r7, pc}
 8009528:	40023800 	.word	0x40023800
 800952c:	08011914 	.word	0x08011914

08009530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009534:	f7ff ffdc 	bl	80094f0 <HAL_RCC_GetHCLKFreq>
 8009538:	4602      	mov	r2, r0
 800953a:	4b05      	ldr	r3, [pc, #20]	; (8009550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	0b5b      	lsrs	r3, r3, #13
 8009540:	f003 0307 	and.w	r3, r3, #7
 8009544:	4903      	ldr	r1, [pc, #12]	; (8009554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009546:	5ccb      	ldrb	r3, [r1, r3]
 8009548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800954c:	4618      	mov	r0, r3
 800954e:	bd80      	pop	{r7, pc}
 8009550:	40023800 	.word	0x40023800
 8009554:	08011914 	.word	0x08011914

08009558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d012      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009580:	4b69      	ldr	r3, [pc, #420]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	4a68      	ldr	r2, [pc, #416]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009586:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800958a:	6093      	str	r3, [r2, #8]
 800958c:	4b66      	ldr	r3, [pc, #408]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009594:	4964      	ldr	r1, [pc, #400]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009596:	4313      	orrs	r3, r2
 8009598:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80095a2:	2301      	movs	r3, #1
 80095a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d017      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095b2:	4b5d      	ldr	r3, [pc, #372]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c0:	4959      	ldr	r1, [pc, #356]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095d0:	d101      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80095d2:	2301      	movs	r3, #1
 80095d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80095de:	2301      	movs	r3, #1
 80095e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d017      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80095ee:	4b4e      	ldr	r3, [pc, #312]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	494a      	ldr	r1, [pc, #296]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800960c:	d101      	bne.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800960e:	2301      	movs	r3, #1
 8009610:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 808b 	beq.w	8009752 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800963c:	4b3a      	ldr	r3, [pc, #232]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	4a39      	ldr	r2, [pc, #228]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009646:	6413      	str	r3, [r2, #64]	; 0x40
 8009648:	4b37      	ldr	r3, [pc, #220]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009654:	4b35      	ldr	r3, [pc, #212]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a34      	ldr	r2, [pc, #208]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800965a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800965e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009660:	f7fd fdb6 	bl	80071d0 <HAL_GetTick>
 8009664:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009666:	e008      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009668:	f7fd fdb2 	bl	80071d0 <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	2b64      	cmp	r3, #100	; 0x64
 8009674:	d901      	bls.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e357      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800967a:	4b2c      	ldr	r3, [pc, #176]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0f0      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009686:	4b28      	ldr	r3, [pc, #160]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800968e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d035      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d02e      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096a4:	4b20      	ldr	r3, [pc, #128]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096ae:	4b1e      	ldr	r3, [pc, #120]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b2:	4a1d      	ldr	r2, [pc, #116]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096ba:	4b1b      	ldr	r3, [pc, #108]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096be:	4a1a      	ldr	r2, [pc, #104]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80096c6:	4a18      	ldr	r2, [pc, #96]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80096cc:	4b16      	ldr	r3, [pc, #88]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d114      	bne.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096d8:	f7fd fd7a 	bl	80071d0 <HAL_GetTick>
 80096dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096de:	e00a      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096e0:	f7fd fd76 	bl	80071d0 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d901      	bls.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e319      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0ee      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800970a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800970e:	d111      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800971c:	4b04      	ldr	r3, [pc, #16]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800971e:	400b      	ands	r3, r1
 8009720:	4901      	ldr	r1, [pc, #4]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009722:	4313      	orrs	r3, r2
 8009724:	608b      	str	r3, [r1, #8]
 8009726:	e00b      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009728:	40023800 	.word	0x40023800
 800972c:	40007000 	.word	0x40007000
 8009730:	0ffffcff 	.word	0x0ffffcff
 8009734:	4baa      	ldr	r3, [pc, #680]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	4aa9      	ldr	r2, [pc, #676]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800973a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800973e:	6093      	str	r3, [r2, #8]
 8009740:	4ba7      	ldr	r3, [pc, #668]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974c:	49a4      	ldr	r1, [pc, #656]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800974e:	4313      	orrs	r3, r2
 8009750:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b00      	cmp	r3, #0
 800975c:	d010      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800975e:	4ba0      	ldr	r3, [pc, #640]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009764:	4a9e      	ldr	r2, [pc, #632]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800976a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800976e:	4b9c      	ldr	r3, [pc, #624]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009770:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	4999      	ldr	r1, [pc, #612]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800977a:	4313      	orrs	r3, r2
 800977c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800978c:	4b94      	ldr	r3, [pc, #592]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800978e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009792:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800979a:	4991      	ldr	r1, [pc, #580]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800979c:	4313      	orrs	r3, r2
 800979e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097ae:	4b8c      	ldr	r3, [pc, #560]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097bc:	4988      	ldr	r1, [pc, #544]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097d0:	4b83      	ldr	r3, [pc, #524]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097de:	4980      	ldr	r1, [pc, #512]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097f2:	4b7b      	ldr	r3, [pc, #492]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009800:	4977      	ldr	r1, [pc, #476]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009802:	4313      	orrs	r3, r2
 8009804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009814:	4b72      	ldr	r3, [pc, #456]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800981a:	f023 0203 	bic.w	r2, r3, #3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009822:	496f      	ldr	r1, [pc, #444]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009824:	4313      	orrs	r3, r2
 8009826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009836:	4b6a      	ldr	r3, [pc, #424]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983c:	f023 020c 	bic.w	r2, r3, #12
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009844:	4966      	ldr	r1, [pc, #408]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009846:	4313      	orrs	r3, r2
 8009848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009858:	4b61      	ldr	r3, [pc, #388]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800985a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800985e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009866:	495e      	ldr	r1, [pc, #376]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009868:	4313      	orrs	r3, r2
 800986a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800987a:	4b59      	ldr	r3, [pc, #356]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800987c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009880:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009888:	4955      	ldr	r1, [pc, #340]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800988a:	4313      	orrs	r3, r2
 800988c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800989c:	4b50      	ldr	r3, [pc, #320]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800989e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	494d      	ldr	r1, [pc, #308]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80098be:	4b48      	ldr	r3, [pc, #288]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098cc:	4944      	ldr	r1, [pc, #272]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00a      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80098e0:	4b3f      	ldr	r3, [pc, #252]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ee:	493c      	ldr	r1, [pc, #240]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009902:	4b37      	ldr	r3, [pc, #220]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009908:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009910:	4933      	ldr	r1, [pc, #204]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009912:	4313      	orrs	r3, r2
 8009914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00a      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009924:	4b2e      	ldr	r3, [pc, #184]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009932:	492b      	ldr	r1, [pc, #172]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009934:	4313      	orrs	r3, r2
 8009936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d011      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009946:	4b26      	ldr	r3, [pc, #152]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800994c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009954:	4922      	ldr	r1, [pc, #136]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009956:	4313      	orrs	r3, r2
 8009958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009964:	d101      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009966:	2301      	movs	r3, #1
 8009968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0308 	and.w	r3, r3, #8
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009976:	2301      	movs	r3, #1
 8009978:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00a      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009986:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009994:	4912      	ldr	r1, [pc, #72]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009996:	4313      	orrs	r3, r2
 8009998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00b      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80099a8:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099b8:	4909      	ldr	r1, [pc, #36]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d006      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80d9 	beq.w	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80099d4:	4b02      	ldr	r3, [pc, #8]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a01      	ldr	r2, [pc, #4]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099de:	e001      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80099e0:	40023800 	.word	0x40023800
 80099e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099e6:	f7fd fbf3 	bl	80071d0 <HAL_GetTick>
 80099ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099ec:	e008      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80099ee:	f7fd fbef 	bl	80071d0 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b64      	cmp	r3, #100	; 0x64
 80099fa:	d901      	bls.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e194      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a00:	4b6c      	ldr	r3, [pc, #432]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f0      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d021      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d11d      	bne.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a20:	4b64      	ldr	r3, [pc, #400]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a26:	0c1b      	lsrs	r3, r3, #16
 8009a28:	f003 0303 	and.w	r3, r3, #3
 8009a2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009a2e:	4b61      	ldr	r3, [pc, #388]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a34:	0e1b      	lsrs	r3, r3, #24
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	019a      	lsls	r2, r3, #6
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	041b      	lsls	r3, r3, #16
 8009a46:	431a      	orrs	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	061b      	lsls	r3, r3, #24
 8009a4c:	431a      	orrs	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	071b      	lsls	r3, r3, #28
 8009a54:	4957      	ldr	r1, [pc, #348]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a70:	d00a      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d02e      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a86:	d129      	bne.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a88:	4b4a      	ldr	r3, [pc, #296]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a8e:	0c1b      	lsrs	r3, r3, #16
 8009a90:	f003 0303 	and.w	r3, r3, #3
 8009a94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a96:	4b47      	ldr	r3, [pc, #284]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a9c:	0f1b      	lsrs	r3, r3, #28
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	019a      	lsls	r2, r3, #6
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	041b      	lsls	r3, r3, #16
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	061b      	lsls	r3, r3, #24
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	071b      	lsls	r3, r3, #28
 8009abc:	493d      	ldr	r1, [pc, #244]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ac4:	4b3b      	ldr	r3, [pc, #236]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aca:	f023 021f 	bic.w	r2, r3, #31
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4937      	ldr	r1, [pc, #220]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d01d      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ae8:	4b32      	ldr	r3, [pc, #200]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aee:	0e1b      	lsrs	r3, r3, #24
 8009af0:	f003 030f 	and.w	r3, r3, #15
 8009af4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009af6:	4b2f      	ldr	r3, [pc, #188]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009afc:	0f1b      	lsrs	r3, r3, #28
 8009afe:	f003 0307 	and.w	r3, r3, #7
 8009b02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	019a      	lsls	r2, r3, #6
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	431a      	orrs	r2, r3
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	431a      	orrs	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	071b      	lsls	r3, r3, #28
 8009b1c:	4925      	ldr	r1, [pc, #148]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d011      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	019a      	lsls	r2, r3, #6
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	061b      	lsls	r3, r3, #24
 8009b44:	431a      	orrs	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	071b      	lsls	r3, r3, #28
 8009b4c:	4919      	ldr	r1, [pc, #100]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b54:	4b17      	ldr	r3, [pc, #92]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a16      	ldr	r2, [pc, #88]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b60:	f7fd fb36 	bl	80071d0 <HAL_GetTick>
 8009b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b66:	e008      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b68:	f7fd fb32 	bl	80071d0 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b64      	cmp	r3, #100	; 0x64
 8009b74:	d901      	bls.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e0d7      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b7a:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f0      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	f040 80cd 	bne.w	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a08      	ldr	r2, [pc, #32]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b9a:	f7fd fb19 	bl	80071d0 <HAL_GetTick>
 8009b9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ba0:	e00a      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ba2:	f7fd fb15 	bl	80071d0 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	2b64      	cmp	r3, #100	; 0x64
 8009bae:	d903      	bls.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e0ba      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009bb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009bb8:	4b5e      	ldr	r3, [pc, #376]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc4:	d0ed      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d02e      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d12a      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009bee:	4b51      	ldr	r3, [pc, #324]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf4:	0c1b      	lsrs	r3, r3, #16
 8009bf6:	f003 0303 	and.w	r3, r3, #3
 8009bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009bfc:	4b4d      	ldr	r3, [pc, #308]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c02:	0f1b      	lsrs	r3, r3, #28
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	019a      	lsls	r2, r3, #6
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	041b      	lsls	r3, r3, #16
 8009c14:	431a      	orrs	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	061b      	lsls	r3, r3, #24
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	071b      	lsls	r3, r3, #28
 8009c22:	4944      	ldr	r1, [pc, #272]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c2a:	4b42      	ldr	r3, [pc, #264]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	021b      	lsls	r3, r3, #8
 8009c3c:	493d      	ldr	r1, [pc, #244]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d022      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c58:	d11d      	bne.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c5a:	4b36      	ldr	r3, [pc, #216]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c60:	0e1b      	lsrs	r3, r3, #24
 8009c62:	f003 030f 	and.w	r3, r3, #15
 8009c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c68:	4b32      	ldr	r3, [pc, #200]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6e:	0f1b      	lsrs	r3, r3, #28
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	019a      	lsls	r2, r3, #6
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	041b      	lsls	r3, r3, #16
 8009c82:	431a      	orrs	r2, r3
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	061b      	lsls	r3, r3, #24
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	071b      	lsls	r3, r3, #28
 8009c8e:	4929      	ldr	r1, [pc, #164]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d028      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ca2:	4b24      	ldr	r3, [pc, #144]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca8:	0e1b      	lsrs	r3, r3, #24
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009cb0:	4b20      	ldr	r3, [pc, #128]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb6:	0c1b      	lsrs	r3, r3, #16
 8009cb8:	f003 0303 	and.w	r3, r3, #3
 8009cbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	019a      	lsls	r2, r3, #6
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	061b      	lsls	r3, r3, #24
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	071b      	lsls	r3, r3, #28
 8009cd6:	4917      	ldr	r1, [pc, #92]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009cde:	4b15      	ldr	r3, [pc, #84]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	4911      	ldr	r1, [pc, #68]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009cf4:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a0e      	ldr	r2, [pc, #56]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d00:	f7fd fa66 	bl	80071d0 <HAL_GetTick>
 8009d04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d06:	e008      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009d08:	f7fd fa62 	bl	80071d0 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b64      	cmp	r3, #100	; 0x64
 8009d14:	d901      	bls.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e007      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d1a:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d26:	d1ef      	bne.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	40023800 	.word	0x40023800

08009d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e049      	b.n	8009dde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7fc feaa 	bl	8006ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f000 fe5a 	bl	800aa30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d001      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e054      	b.n	8009eaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f042 0201 	orr.w	r2, r2, #1
 8009e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a26      	ldr	r2, [pc, #152]	; (8009eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d022      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0x80>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e2a:	d01d      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0x80>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a22      	ldr	r2, [pc, #136]	; (8009ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d018      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0x80>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a21      	ldr	r2, [pc, #132]	; (8009ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d013      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0x80>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a1f      	ldr	r2, [pc, #124]	; (8009ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00e      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0x80>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a1e      	ldr	r2, [pc, #120]	; (8009ec8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0x80>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1c      	ldr	r2, [pc, #112]	; (8009ecc <HAL_TIM_Base_Start_IT+0xe4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_TIM_Base_Start_IT+0x80>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1b      	ldr	r2, [pc, #108]	; (8009ed0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d115      	bne.n	8009e94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <HAL_TIM_Base_Start_IT+0xec>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b06      	cmp	r3, #6
 8009e78:	d015      	beq.n	8009ea6 <HAL_TIM_Base_Start_IT+0xbe>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e80:	d011      	beq.n	8009ea6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f042 0201 	orr.w	r2, r2, #1
 8009e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e92:	e008      	b.n	8009ea6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0201 	orr.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	e000      	b.n	8009ea8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	40010000 	.word	0x40010000
 8009ebc:	40000400 	.word	0x40000400
 8009ec0:	40000800 	.word	0x40000800
 8009ec4:	40000c00 	.word	0x40000c00
 8009ec8:	40010400 	.word	0x40010400
 8009ecc:	40014000 	.word	0x40014000
 8009ed0:	40001800 	.word	0x40001800
 8009ed4:	00010007 	.word	0x00010007

08009ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e049      	b.n	8009f7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7fc fe1a 	bl	8006b38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f000 fd8a 	bl	800aa30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d109      	bne.n	8009fac <HAL_TIM_PWM_Start+0x24>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	bf14      	ite	ne
 8009fa4:	2301      	movne	r3, #1
 8009fa6:	2300      	moveq	r3, #0
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	e03c      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d109      	bne.n	8009fc6 <HAL_TIM_PWM_Start+0x3e>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	bf14      	ite	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	2300      	moveq	r3, #0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	e02f      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d109      	bne.n	8009fe0 <HAL_TIM_PWM_Start+0x58>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	bf14      	ite	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	2300      	moveq	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	e022      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b0c      	cmp	r3, #12
 8009fe4:	d109      	bne.n	8009ffa <HAL_TIM_PWM_Start+0x72>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	bf14      	ite	ne
 8009ff2:	2301      	movne	r3, #1
 8009ff4:	2300      	moveq	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	e015      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d109      	bne.n	800a014 <HAL_TIM_PWM_Start+0x8c>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	bf14      	ite	ne
 800a00c:	2301      	movne	r3, #1
 800a00e:	2300      	moveq	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	e008      	b.n	800a026 <HAL_TIM_PWM_Start+0x9e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	bf14      	ite	ne
 800a020:	2301      	movne	r3, #1
 800a022:	2300      	moveq	r3, #0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e092      	b.n	800a154 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <HAL_TIM_PWM_Start+0xb6>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a03c:	e023      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b04      	cmp	r3, #4
 800a042:	d104      	bne.n	800a04e <HAL_TIM_PWM_Start+0xc6>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a04c:	e01b      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b08      	cmp	r3, #8
 800a052:	d104      	bne.n	800a05e <HAL_TIM_PWM_Start+0xd6>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a05c:	e013      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b0c      	cmp	r3, #12
 800a062:	d104      	bne.n	800a06e <HAL_TIM_PWM_Start+0xe6>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a06c:	e00b      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b10      	cmp	r3, #16
 800a072:	d104      	bne.n	800a07e <HAL_TIM_PWM_Start+0xf6>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a07c:	e003      	b.n	800a086 <HAL_TIM_PWM_Start+0xfe>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2201      	movs	r2, #1
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f001 f866 	bl	800b160 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a30      	ldr	r2, [pc, #192]	; (800a15c <HAL_TIM_PWM_Start+0x1d4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d004      	beq.n	800a0a8 <HAL_TIM_PWM_Start+0x120>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a2f      	ldr	r2, [pc, #188]	; (800a160 <HAL_TIM_PWM_Start+0x1d8>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d101      	bne.n	800a0ac <HAL_TIM_PWM_Start+0x124>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e000      	b.n	800a0ae <HAL_TIM_PWM_Start+0x126>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a25      	ldr	r2, [pc, #148]	; (800a15c <HAL_TIM_PWM_Start+0x1d4>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d022      	beq.n	800a112 <HAL_TIM_PWM_Start+0x18a>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d4:	d01d      	beq.n	800a112 <HAL_TIM_PWM_Start+0x18a>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a22      	ldr	r2, [pc, #136]	; (800a164 <HAL_TIM_PWM_Start+0x1dc>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d018      	beq.n	800a112 <HAL_TIM_PWM_Start+0x18a>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a20      	ldr	r2, [pc, #128]	; (800a168 <HAL_TIM_PWM_Start+0x1e0>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d013      	beq.n	800a112 <HAL_TIM_PWM_Start+0x18a>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a1f      	ldr	r2, [pc, #124]	; (800a16c <HAL_TIM_PWM_Start+0x1e4>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00e      	beq.n	800a112 <HAL_TIM_PWM_Start+0x18a>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a19      	ldr	r2, [pc, #100]	; (800a160 <HAL_TIM_PWM_Start+0x1d8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d009      	beq.n	800a112 <HAL_TIM_PWM_Start+0x18a>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a1b      	ldr	r2, [pc, #108]	; (800a170 <HAL_TIM_PWM_Start+0x1e8>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d004      	beq.n	800a112 <HAL_TIM_PWM_Start+0x18a>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a19      	ldr	r2, [pc, #100]	; (800a174 <HAL_TIM_PWM_Start+0x1ec>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d115      	bne.n	800a13e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	4b17      	ldr	r3, [pc, #92]	; (800a178 <HAL_TIM_PWM_Start+0x1f0>)
 800a11a:	4013      	ands	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b06      	cmp	r3, #6
 800a122:	d015      	beq.n	800a150 <HAL_TIM_PWM_Start+0x1c8>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a12a:	d011      	beq.n	800a150 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0201 	orr.w	r2, r2, #1
 800a13a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a13c:	e008      	b.n	800a150 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0201 	orr.w	r2, r2, #1
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e000      	b.n	800a152 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	40010000 	.word	0x40010000
 800a160:	40010400 	.word	0x40010400
 800a164:	40000400 	.word	0x40000400
 800a168:	40000800 	.word	0x40000800
 800a16c:	40000c00 	.word	0x40000c00
 800a170:	40014000 	.word	0x40014000
 800a174:	40001800 	.word	0x40001800
 800a178:	00010007 	.word	0x00010007

0800a17c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e08f      	b.n	800a2b0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d106      	bne.n	800a1aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7fc fbf3 	bl	8006990 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6899      	ldr	r1, [r3, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	4b3e      	ldr	r3, [pc, #248]	; (800a2b8 <HAL_TIM_Encoder_Init+0x13c>)
 800a1be:	400b      	ands	r3, r1
 800a1c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	f000 fc2f 	bl	800aa30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	4b31      	ldr	r3, [pc, #196]	; (800a2bc <HAL_TIM_Encoder_Init+0x140>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	4313      	orrs	r3, r2
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <HAL_TIM_Encoder_Init+0x144>)
 800a212:	4013      	ands	r3, r2
 800a214:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <HAL_TIM_Encoder_Init+0x148>)
 800a21a:	4013      	ands	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	4313      	orrs	r3, r2
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	011a      	lsls	r2, r3, #4
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	031b      	lsls	r3, r3, #12
 800a23c:	4313      	orrs	r3, r2
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a24a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a252:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	4313      	orrs	r3, r2
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	4313      	orrs	r3, r2
 800a264:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	fffebff8 	.word	0xfffebff8
 800a2bc:	fffffcfc 	.word	0xfffffcfc
 800a2c0:	fffff3f3 	.word	0xfffff3f3
 800a2c4:	ffff0f0f 	.word	0xffff0f0f

0800a2c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d110      	bne.n	800a31a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d102      	bne.n	800a304 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2fe:	7b7b      	ldrb	r3, [r7, #13]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d001      	beq.n	800a308 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e069      	b.n	800a3dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2202      	movs	r2, #2
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a318:	e031      	b.n	800a37e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d110      	bne.n	800a342 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d102      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a326:	7b3b      	ldrb	r3, [r7, #12]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d001      	beq.n	800a330 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e055      	b.n	800a3dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a340:	e01d      	b.n	800a37e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d108      	bne.n	800a35a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d105      	bne.n	800a35a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a34e:	7b7b      	ldrb	r3, [r7, #13]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d102      	bne.n	800a35a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a354:	7b3b      	ldrb	r3, [r7, #12]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d001      	beq.n	800a35e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e03e      	b.n	800a3dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2202      	movs	r2, #2
 800a36a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2202      	movs	r2, #2
 800a372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2202      	movs	r2, #2
 800a37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d003      	beq.n	800a38c <HAL_TIM_Encoder_Start+0xc4>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b04      	cmp	r3, #4
 800a388:	d008      	beq.n	800a39c <HAL_TIM_Encoder_Start+0xd4>
 800a38a:	e00f      	b.n	800a3ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2201      	movs	r2, #1
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fee3 	bl	800b160 <TIM_CCxChannelCmd>
      break;
 800a39a:	e016      	b.n	800a3ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	2104      	movs	r1, #4
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fedb 	bl	800b160 <TIM_CCxChannelCmd>
      break;
 800a3aa:	e00e      	b.n	800a3ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fed3 	bl	800b160 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	2104      	movs	r1, #4
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fecc 	bl	800b160 <TIM_CCxChannelCmd>
      break;
 800a3c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f042 0201 	orr.w	r2, r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d122      	bne.n	800a440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b02      	cmp	r3, #2
 800a406:	d11b      	bne.n	800a440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f06f 0202 	mvn.w	r2, #2
 800a410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	f003 0303 	and.w	r3, r3, #3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fae4 	bl	800a9f4 <HAL_TIM_IC_CaptureCallback>
 800a42c:	e005      	b.n	800a43a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fad6 	bl	800a9e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fae7 	bl	800aa08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b04      	cmp	r3, #4
 800a44c:	d122      	bne.n	800a494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d11b      	bne.n	800a494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0204 	mvn.w	r2, #4
 800a464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2202      	movs	r2, #2
 800a46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 faba 	bl	800a9f4 <HAL_TIM_IC_CaptureCallback>
 800a480:	e005      	b.n	800a48e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 faac 	bl	800a9e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fabd 	bl	800aa08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	f003 0308 	and.w	r3, r3, #8
 800a49e:	2b08      	cmp	r3, #8
 800a4a0:	d122      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d11b      	bne.n	800a4e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0208 	mvn.w	r2, #8
 800a4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2204      	movs	r2, #4
 800a4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fa90 	bl	800a9f4 <HAL_TIM_IC_CaptureCallback>
 800a4d4:	e005      	b.n	800a4e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fa82 	bl	800a9e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fa93 	bl	800aa08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f003 0310 	and.w	r3, r3, #16
 800a4f2:	2b10      	cmp	r3, #16
 800a4f4:	d122      	bne.n	800a53c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f003 0310 	and.w	r3, r3, #16
 800a500:	2b10      	cmp	r3, #16
 800a502:	d11b      	bne.n	800a53c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f06f 0210 	mvn.w	r2, #16
 800a50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2208      	movs	r2, #8
 800a512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fa66 	bl	800a9f4 <HAL_TIM_IC_CaptureCallback>
 800a528:	e005      	b.n	800a536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa58 	bl	800a9e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fa69 	bl	800aa08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b01      	cmp	r3, #1
 800a548:	d10e      	bne.n	800a568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	2b01      	cmp	r3, #1
 800a556:	d107      	bne.n	800a568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f06f 0201 	mvn.w	r2, #1
 800a560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7fb fa28 	bl	80059b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a572:	2b80      	cmp	r3, #128	; 0x80
 800a574:	d10e      	bne.n	800a594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a580:	2b80      	cmp	r3, #128	; 0x80
 800a582:	d107      	bne.n	800a594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fea4 	bl	800b2dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a2:	d10e      	bne.n	800a5c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ae:	2b80      	cmp	r3, #128	; 0x80
 800a5b0:	d107      	bne.n	800a5c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fe97 	bl	800b2f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5cc:	2b40      	cmp	r3, #64	; 0x40
 800a5ce:	d10e      	bne.n	800a5ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5da:	2b40      	cmp	r3, #64	; 0x40
 800a5dc:	d107      	bne.n	800a5ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fa17 	bl	800aa1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	d10e      	bne.n	800a61a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f003 0320 	and.w	r3, r3, #32
 800a606:	2b20      	cmp	r3, #32
 800a608:	d107      	bne.n	800a61a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f06f 0220 	mvn.w	r2, #32
 800a612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fe57 	bl	800b2c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d101      	bne.n	800a642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a63e:	2302      	movs	r3, #2
 800a640:	e0ff      	b.n	800a842 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b14      	cmp	r3, #20
 800a64e:	f200 80f0 	bhi.w	800a832 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a652:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a658:	0800a6ad 	.word	0x0800a6ad
 800a65c:	0800a833 	.word	0x0800a833
 800a660:	0800a833 	.word	0x0800a833
 800a664:	0800a833 	.word	0x0800a833
 800a668:	0800a6ed 	.word	0x0800a6ed
 800a66c:	0800a833 	.word	0x0800a833
 800a670:	0800a833 	.word	0x0800a833
 800a674:	0800a833 	.word	0x0800a833
 800a678:	0800a72f 	.word	0x0800a72f
 800a67c:	0800a833 	.word	0x0800a833
 800a680:	0800a833 	.word	0x0800a833
 800a684:	0800a833 	.word	0x0800a833
 800a688:	0800a76f 	.word	0x0800a76f
 800a68c:	0800a833 	.word	0x0800a833
 800a690:	0800a833 	.word	0x0800a833
 800a694:	0800a833 	.word	0x0800a833
 800a698:	0800a7b1 	.word	0x0800a7b1
 800a69c:	0800a833 	.word	0x0800a833
 800a6a0:	0800a833 	.word	0x0800a833
 800a6a4:	0800a833 	.word	0x0800a833
 800a6a8:	0800a7f1 	.word	0x0800a7f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68b9      	ldr	r1, [r7, #8]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fa5c 	bl	800ab70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	699a      	ldr	r2, [r3, #24]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0208 	orr.w	r2, r2, #8
 800a6c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699a      	ldr	r2, [r3, #24]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0204 	bic.w	r2, r2, #4
 800a6d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6999      	ldr	r1, [r3, #24]
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	691a      	ldr	r2, [r3, #16]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	619a      	str	r2, [r3, #24]
      break;
 800a6ea:	e0a5      	b.n	800a838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68b9      	ldr	r1, [r7, #8]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 faae 	bl	800ac54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	699a      	ldr	r2, [r3, #24]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699a      	ldr	r2, [r3, #24]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6999      	ldr	r1, [r3, #24]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	021a      	lsls	r2, r3, #8
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	430a      	orrs	r2, r1
 800a72a:	619a      	str	r2, [r3, #24]
      break;
 800a72c:	e084      	b.n	800a838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68b9      	ldr	r1, [r7, #8]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 fb05 	bl	800ad44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69da      	ldr	r2, [r3, #28]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0208 	orr.w	r2, r2, #8
 800a748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	69da      	ldr	r2, [r3, #28]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f022 0204 	bic.w	r2, r2, #4
 800a758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	69d9      	ldr	r1, [r3, #28]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	691a      	ldr	r2, [r3, #16]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	430a      	orrs	r2, r1
 800a76a:	61da      	str	r2, [r3, #28]
      break;
 800a76c:	e064      	b.n	800a838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68b9      	ldr	r1, [r7, #8]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fb5b 	bl	800ae30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	69da      	ldr	r2, [r3, #28]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69da      	ldr	r2, [r3, #28]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69d9      	ldr	r1, [r3, #28]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	021a      	lsls	r2, r3, #8
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	61da      	str	r2, [r3, #28]
      break;
 800a7ae:	e043      	b.n	800a838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68b9      	ldr	r1, [r7, #8]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fb92 	bl	800aee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f042 0208 	orr.w	r2, r2, #8
 800a7ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f022 0204 	bic.w	r2, r2, #4
 800a7da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	691a      	ldr	r2, [r3, #16]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7ee:	e023      	b.n	800a838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 fbc4 	bl	800af84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a80a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a81a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	021a      	lsls	r2, r3, #8
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a830:	e002      	b.n	800a838 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	75fb      	strb	r3, [r7, #23]
      break;
 800a836:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop

0800a84c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <HAL_TIM_ConfigClockSource+0x1c>
 800a864:	2302      	movs	r3, #2
 800a866:	e0b4      	b.n	800a9d2 <HAL_TIM_ConfigClockSource+0x186>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	4b56      	ldr	r3, [pc, #344]	; (800a9dc <HAL_TIM_ConfigClockSource+0x190>)
 800a884:	4013      	ands	r3, r2
 800a886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a88e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8a0:	d03e      	beq.n	800a920 <HAL_TIM_ConfigClockSource+0xd4>
 800a8a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8a6:	f200 8087 	bhi.w	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ae:	f000 8086 	beq.w	800a9be <HAL_TIM_ConfigClockSource+0x172>
 800a8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b6:	d87f      	bhi.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b8:	2b70      	cmp	r3, #112	; 0x70
 800a8ba:	d01a      	beq.n	800a8f2 <HAL_TIM_ConfigClockSource+0xa6>
 800a8bc:	2b70      	cmp	r3, #112	; 0x70
 800a8be:	d87b      	bhi.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8c0:	2b60      	cmp	r3, #96	; 0x60
 800a8c2:	d050      	beq.n	800a966 <HAL_TIM_ConfigClockSource+0x11a>
 800a8c4:	2b60      	cmp	r3, #96	; 0x60
 800a8c6:	d877      	bhi.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8c8:	2b50      	cmp	r3, #80	; 0x50
 800a8ca:	d03c      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0xfa>
 800a8cc:	2b50      	cmp	r3, #80	; 0x50
 800a8ce:	d873      	bhi.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8d0:	2b40      	cmp	r3, #64	; 0x40
 800a8d2:	d058      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x13a>
 800a8d4:	2b40      	cmp	r3, #64	; 0x40
 800a8d6:	d86f      	bhi.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8d8:	2b30      	cmp	r3, #48	; 0x30
 800a8da:	d064      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a8dc:	2b30      	cmp	r3, #48	; 0x30
 800a8de:	d86b      	bhi.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e0:	2b20      	cmp	r3, #32
 800a8e2:	d060      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a8e4:	2b20      	cmp	r3, #32
 800a8e6:	d867      	bhi.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d05c      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a8ec:	2b10      	cmp	r3, #16
 800a8ee:	d05a      	beq.n	800a9a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a8f0:	e062      	b.n	800a9b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a902:	f000 fc0d 	bl	800b120 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	609a      	str	r2, [r3, #8]
      break;
 800a91e:	e04f      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a930:	f000 fbf6 	bl	800b120 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a942:	609a      	str	r2, [r3, #8]
      break;
 800a944:	e03c      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a952:	461a      	mov	r2, r3
 800a954:	f000 fb6a 	bl	800b02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2150      	movs	r1, #80	; 0x50
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 fbc3 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a964:	e02c      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a972:	461a      	mov	r2, r3
 800a974:	f000 fb89 	bl	800b08a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2160      	movs	r1, #96	; 0x60
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fbb3 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a984:	e01c      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a992:	461a      	mov	r2, r3
 800a994:	f000 fb4a 	bl	800b02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2140      	movs	r1, #64	; 0x40
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fba3 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a9a4:	e00c      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f000 fb9a 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a9b6:	e003      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a9bc:	e000      	b.n	800a9c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a9be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	fffeff88 	.word	0xfffeff88

0800a9e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a40      	ldr	r2, [pc, #256]	; (800ab44 <TIM_Base_SetConfig+0x114>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d013      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa4e:	d00f      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a3d      	ldr	r2, [pc, #244]	; (800ab48 <TIM_Base_SetConfig+0x118>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d00b      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a3c      	ldr	r2, [pc, #240]	; (800ab4c <TIM_Base_SetConfig+0x11c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d007      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a3b      	ldr	r2, [pc, #236]	; (800ab50 <TIM_Base_SetConfig+0x120>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d003      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a3a      	ldr	r2, [pc, #232]	; (800ab54 <TIM_Base_SetConfig+0x124>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d108      	bne.n	800aa82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a2f      	ldr	r2, [pc, #188]	; (800ab44 <TIM_Base_SetConfig+0x114>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d02b      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa90:	d027      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a2c      	ldr	r2, [pc, #176]	; (800ab48 <TIM_Base_SetConfig+0x118>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d023      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a2b      	ldr	r2, [pc, #172]	; (800ab4c <TIM_Base_SetConfig+0x11c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d01f      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a2a      	ldr	r2, [pc, #168]	; (800ab50 <TIM_Base_SetConfig+0x120>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d01b      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a29      	ldr	r2, [pc, #164]	; (800ab54 <TIM_Base_SetConfig+0x124>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d017      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a28      	ldr	r2, [pc, #160]	; (800ab58 <TIM_Base_SetConfig+0x128>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d013      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a27      	ldr	r2, [pc, #156]	; (800ab5c <TIM_Base_SetConfig+0x12c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00f      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a26      	ldr	r2, [pc, #152]	; (800ab60 <TIM_Base_SetConfig+0x130>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d00b      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a25      	ldr	r2, [pc, #148]	; (800ab64 <TIM_Base_SetConfig+0x134>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d007      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a24      	ldr	r2, [pc, #144]	; (800ab68 <TIM_Base_SetConfig+0x138>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d003      	beq.n	800aae2 <TIM_Base_SetConfig+0xb2>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a23      	ldr	r2, [pc, #140]	; (800ab6c <TIM_Base_SetConfig+0x13c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d108      	bne.n	800aaf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a0a      	ldr	r2, [pc, #40]	; (800ab44 <TIM_Base_SetConfig+0x114>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d003      	beq.n	800ab28 <TIM_Base_SetConfig+0xf8>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a0c      	ldr	r2, [pc, #48]	; (800ab54 <TIM_Base_SetConfig+0x124>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d103      	bne.n	800ab30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	691a      	ldr	r2, [r3, #16]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	615a      	str	r2, [r3, #20]
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	40010000 	.word	0x40010000
 800ab48:	40000400 	.word	0x40000400
 800ab4c:	40000800 	.word	0x40000800
 800ab50:	40000c00 	.word	0x40000c00
 800ab54:	40010400 	.word	0x40010400
 800ab58:	40014000 	.word	0x40014000
 800ab5c:	40014400 	.word	0x40014400
 800ab60:	40014800 	.word	0x40014800
 800ab64:	40001800 	.word	0x40001800
 800ab68:	40001c00 	.word	0x40001c00
 800ab6c:	40002000 	.word	0x40002000

0800ab70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f023 0201 	bic.w	r2, r3, #1
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	4b2b      	ldr	r3, [pc, #172]	; (800ac48 <TIM_OC1_SetConfig+0xd8>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f023 0302 	bic.w	r3, r3, #2
 800abb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a21      	ldr	r2, [pc, #132]	; (800ac4c <TIM_OC1_SetConfig+0xdc>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d003      	beq.n	800abd4 <TIM_OC1_SetConfig+0x64>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a20      	ldr	r2, [pc, #128]	; (800ac50 <TIM_OC1_SetConfig+0xe0>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d10c      	bne.n	800abee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f023 0308 	bic.w	r3, r3, #8
 800abda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f023 0304 	bic.w	r3, r3, #4
 800abec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a16      	ldr	r2, [pc, #88]	; (800ac4c <TIM_OC1_SetConfig+0xdc>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d003      	beq.n	800abfe <TIM_OC1_SetConfig+0x8e>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a15      	ldr	r2, [pc, #84]	; (800ac50 <TIM_OC1_SetConfig+0xe0>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d111      	bne.n	800ac22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	697a      	ldr	r2, [r7, #20]
 800ac3a:	621a      	str	r2, [r3, #32]
}
 800ac3c:	bf00      	nop
 800ac3e:	371c      	adds	r7, #28
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	fffeff8f 	.word	0xfffeff8f
 800ac4c:	40010000 	.word	0x40010000
 800ac50:	40010400 	.word	0x40010400

0800ac54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	f023 0210 	bic.w	r2, r3, #16
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4b2e      	ldr	r3, [pc, #184]	; (800ad38 <TIM_OC2_SetConfig+0xe4>)
 800ac80:	4013      	ands	r3, r2
 800ac82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f023 0320 	bic.w	r3, r3, #32
 800ac9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a23      	ldr	r2, [pc, #140]	; (800ad3c <TIM_OC2_SetConfig+0xe8>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_OC2_SetConfig+0x68>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a22      	ldr	r2, [pc, #136]	; (800ad40 <TIM_OC2_SetConfig+0xec>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d10d      	bne.n	800acd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	011b      	lsls	r3, r3, #4
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	4313      	orrs	r3, r2
 800acce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a18      	ldr	r2, [pc, #96]	; (800ad3c <TIM_OC2_SetConfig+0xe8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d003      	beq.n	800ace8 <TIM_OC2_SetConfig+0x94>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a17      	ldr	r2, [pc, #92]	; (800ad40 <TIM_OC2_SetConfig+0xec>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d113      	bne.n	800ad10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	621a      	str	r2, [r3, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	feff8fff 	.word	0xfeff8fff
 800ad3c:	40010000 	.word	0x40010000
 800ad40:	40010400 	.word	0x40010400

0800ad44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	4b2d      	ldr	r3, [pc, #180]	; (800ae24 <TIM_OC3_SetConfig+0xe0>)
 800ad70:	4013      	ands	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 0303 	bic.w	r3, r3, #3
 800ad7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a22      	ldr	r2, [pc, #136]	; (800ae28 <TIM_OC3_SetConfig+0xe4>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d003      	beq.n	800adaa <TIM_OC3_SetConfig+0x66>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a21      	ldr	r2, [pc, #132]	; (800ae2c <TIM_OC3_SetConfig+0xe8>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d10d      	bne.n	800adc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	021b      	lsls	r3, r3, #8
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	4313      	orrs	r3, r2
 800adbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a17      	ldr	r2, [pc, #92]	; (800ae28 <TIM_OC3_SetConfig+0xe4>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d003      	beq.n	800add6 <TIM_OC3_SetConfig+0x92>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a16      	ldr	r2, [pc, #88]	; (800ae2c <TIM_OC3_SetConfig+0xe8>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d113      	bne.n	800adfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800addc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ade4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685a      	ldr	r2, [r3, #4]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	621a      	str	r2, [r3, #32]
}
 800ae18:	bf00      	nop
 800ae1a:	371c      	adds	r7, #28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	fffeff8f 	.word	0xfffeff8f
 800ae28:	40010000 	.word	0x40010000
 800ae2c:	40010400 	.word	0x40010400

0800ae30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <TIM_OC4_SetConfig+0xa4>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	031b      	lsls	r3, r3, #12
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a13      	ldr	r2, [pc, #76]	; (800aed8 <TIM_OC4_SetConfig+0xa8>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d003      	beq.n	800ae98 <TIM_OC4_SetConfig+0x68>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a12      	ldr	r2, [pc, #72]	; (800aedc <TIM_OC4_SetConfig+0xac>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d109      	bne.n	800aeac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	019b      	lsls	r3, r3, #6
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	621a      	str	r2, [r3, #32]
}
 800aec6:	bf00      	nop
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	feff8fff 	.word	0xfeff8fff
 800aed8:	40010000 	.word	0x40010000
 800aedc:	40010400 	.word	0x40010400

0800aee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4b1b      	ldr	r3, [pc, #108]	; (800af78 <TIM_OC5_SetConfig+0x98>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	4313      	orrs	r3, r2
 800af18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800af20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	041b      	lsls	r3, r3, #16
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a12      	ldr	r2, [pc, #72]	; (800af7c <TIM_OC5_SetConfig+0x9c>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d003      	beq.n	800af3e <TIM_OC5_SetConfig+0x5e>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a11      	ldr	r2, [pc, #68]	; (800af80 <TIM_OC5_SetConfig+0xa0>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d109      	bne.n	800af52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	021b      	lsls	r3, r3, #8
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	4313      	orrs	r3, r2
 800af50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	621a      	str	r2, [r3, #32]
}
 800af6c:	bf00      	nop
 800af6e:	371c      	adds	r7, #28
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	fffeff8f 	.word	0xfffeff8f
 800af7c:	40010000 	.word	0x40010000
 800af80:	40010400 	.word	0x40010400

0800af84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4b1c      	ldr	r3, [pc, #112]	; (800b020 <TIM_OC6_SetConfig+0x9c>)
 800afb0:	4013      	ands	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	021b      	lsls	r3, r3, #8
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800afc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	051b      	lsls	r3, r3, #20
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a13      	ldr	r2, [pc, #76]	; (800b024 <TIM_OC6_SetConfig+0xa0>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d003      	beq.n	800afe4 <TIM_OC6_SetConfig+0x60>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a12      	ldr	r2, [pc, #72]	; (800b028 <TIM_OC6_SetConfig+0xa4>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d109      	bne.n	800aff8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	029b      	lsls	r3, r3, #10
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	685a      	ldr	r2, [r3, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	621a      	str	r2, [r3, #32]
}
 800b012:	bf00      	nop
 800b014:	371c      	adds	r7, #28
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	feff8fff 	.word	0xfeff8fff
 800b024:	40010000 	.word	0x40010000
 800b028:	40010400 	.word	0x40010400

0800b02c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6a1b      	ldr	r3, [r3, #32]
 800b03c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	f023 0201 	bic.w	r2, r3, #1
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	011b      	lsls	r3, r3, #4
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	4313      	orrs	r3, r2
 800b060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f023 030a 	bic.w	r3, r3, #10
 800b068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	4313      	orrs	r3, r2
 800b070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	621a      	str	r2, [r3, #32]
}
 800b07e:	bf00      	nop
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b087      	sub	sp, #28
 800b08e:	af00      	add	r7, sp, #0
 800b090:	60f8      	str	r0, [r7, #12]
 800b092:	60b9      	str	r1, [r7, #8]
 800b094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	f023 0210 	bic.w	r2, r3, #16
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	031b      	lsls	r3, r3, #12
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	621a      	str	r2, [r3, #32]
}
 800b0de:	bf00      	nop
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b085      	sub	sp, #20
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	f043 0307 	orr.w	r3, r3, #7
 800b10c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	609a      	str	r2, [r3, #8]
}
 800b114:	bf00      	nop
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b120:	b480      	push	{r7}
 800b122:	b087      	sub	sp, #28
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b13a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	021a      	lsls	r2, r3, #8
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	431a      	orrs	r2, r3
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	4313      	orrs	r3, r2
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	609a      	str	r2, [r3, #8]
}
 800b154:	bf00      	nop
 800b156:	371c      	adds	r7, #28
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b160:	b480      	push	{r7}
 800b162:	b087      	sub	sp, #28
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	f003 031f 	and.w	r3, r3, #31
 800b172:	2201      	movs	r2, #1
 800b174:	fa02 f303 	lsl.w	r3, r2, r3
 800b178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a1a      	ldr	r2, [r3, #32]
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	43db      	mvns	r3, r3
 800b182:	401a      	ands	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6a1a      	ldr	r2, [r3, #32]
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	f003 031f 	and.w	r3, r3, #31
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	fa01 f303 	lsl.w	r3, r1, r3
 800b198:	431a      	orrs	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	621a      	str	r2, [r3, #32]
}
 800b19e:	bf00      	nop
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
	...

0800b1ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d101      	bne.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e06d      	b.n	800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a30      	ldr	r2, [pc, #192]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d004      	beq.n	800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a2f      	ldr	r2, [pc, #188]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d108      	bne.n	800b20a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b1fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	4313      	orrs	r3, r2
 800b208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a20      	ldr	r2, [pc, #128]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d022      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b236:	d01d      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a1d      	ldr	r2, [pc, #116]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d018      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a1c      	ldr	r2, [pc, #112]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d013      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1a      	ldr	r2, [pc, #104]	; (800b2bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d00e      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a15      	ldr	r2, [pc, #84]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d009      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a16      	ldr	r2, [pc, #88]	; (800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d004      	beq.n	800b274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a15      	ldr	r2, [pc, #84]	; (800b2c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d10c      	bne.n	800b28e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b27a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	4313      	orrs	r3, r2
 800b284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	40010000 	.word	0x40010000
 800b2b0:	40010400 	.word	0x40010400
 800b2b4:	40000400 	.word	0x40000400
 800b2b8:	40000800 	.word	0x40000800
 800b2bc:	40000c00 	.word	0x40000c00
 800b2c0:	40014000 	.word	0x40014000
 800b2c4:	40001800 	.word	0x40001800

0800b2c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e040      	b.n	800b398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7fb fc5e 	bl	8006be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2224      	movs	r2, #36	; 0x24
 800b330:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0201 	bic.w	r2, r2, #1
 800b340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fbe8 	bl	800bb18 <UART_SetConfig>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d101      	bne.n	800b352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e022      	b.n	800b398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fe40 	bl	800bfe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b36e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689a      	ldr	r2, [r3, #8]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b37e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f042 0201 	orr.w	r2, r2, #1
 800b38e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fec7 	bl	800c124 <UART_CheckIdleState>
 800b396:	4603      	mov	r3, r0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3b2:	2b20      	cmp	r3, #32
 800b3b4:	d165      	bne.n	800b482 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <HAL_UART_Transmit_DMA+0x22>
 800b3bc:	88fb      	ldrh	r3, [r7, #6]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d101      	bne.n	800b3c6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e05e      	b.n	800b484 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	88fa      	ldrh	r2, [r7, #6]
 800b3d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	88fa      	ldrh	r2, [r7, #6]
 800b3d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2221      	movs	r2, #33	; 0x21
 800b3e8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d027      	beq.n	800b442 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f6:	4a25      	ldr	r2, [pc, #148]	; (800b48c <HAL_UART_Transmit_DMA+0xec>)
 800b3f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fe:	4a24      	ldr	r2, [pc, #144]	; (800b490 <HAL_UART_Transmit_DMA+0xf0>)
 800b400:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b406:	4a23      	ldr	r2, [pc, #140]	; (800b494 <HAL_UART_Transmit_DMA+0xf4>)
 800b408:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40e:	2200      	movs	r2, #0
 800b410:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b41a:	4619      	mov	r1, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3328      	adds	r3, #40	; 0x28
 800b422:	461a      	mov	r2, r3
 800b424:	88fb      	ldrh	r3, [r7, #6]
 800b426:	f7fc f9ab 	bl	8007780 <HAL_DMA_Start_IT>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d008      	beq.n	800b442 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2210      	movs	r2, #16
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2220      	movs	r2, #32
 800b43c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e020      	b.n	800b484 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2240      	movs	r2, #64	; 0x40
 800b448:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3308      	adds	r3, #8
 800b450:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	613b      	str	r3, [r7, #16]
   return(result);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b460:	627b      	str	r3, [r7, #36]	; 0x24
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3308      	adds	r3, #8
 800b468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46a:	623a      	str	r2, [r7, #32]
 800b46c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46e:	69f9      	ldr	r1, [r7, #28]
 800b470:	6a3a      	ldr	r2, [r7, #32]
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	61bb      	str	r3, [r7, #24]
   return(result);
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e5      	bne.n	800b44a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b47e:	2300      	movs	r3, #0
 800b480:	e000      	b.n	800b484 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b482:	2302      	movs	r3, #2
  }
}
 800b484:	4618      	mov	r0, r3
 800b486:	3728      	adds	r7, #40	; 0x28
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	0800c575 	.word	0x0800c575
 800b490:	0800c60b 	.word	0x0800c60b
 800b494:	0800c78d 	.word	0x0800c78d

0800b498 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d132      	bne.n	800b516 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <HAL_UART_Receive_DMA+0x24>
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e02b      	b.n	800b518 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d018      	beq.n	800b506 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	e853 3f00 	ldrex	r3, [r3]
 800b4e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	623b      	str	r3, [r7, #32]
 800b4f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f6:	69f9      	ldr	r1, [r7, #28]
 800b4f8:	6a3a      	ldr	r2, [r7, #32]
 800b4fa:	e841 2300 	strex	r3, r2, [r1]
 800b4fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1e6      	bne.n	800b4d4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b506:	88fb      	ldrh	r3, [r7, #6]
 800b508:	461a      	mov	r2, r3
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 ff07 	bl	800c320 <UART_Start_Receive_DMA>
 800b512:	4603      	mov	r3, r0
 800b514:	e000      	b.n	800b518 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b516:	2302      	movs	r3, #2
  }
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3728      	adds	r7, #40	; 0x28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b0ba      	sub	sp, #232	; 0xe8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	69db      	ldr	r3, [r3, #28]
 800b52e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b546:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b54a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b54e:	4013      	ands	r3, r2
 800b550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d115      	bne.n	800b588 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00f      	beq.n	800b588 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b56c:	f003 0320 	and.w	r3, r3, #32
 800b570:	2b00      	cmp	r3, #0
 800b572:	d009      	beq.n	800b588 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 8297 	beq.w	800baac <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	4798      	blx	r3
      }
      return;
 800b586:	e291      	b.n	800baac <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 8117 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b59e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5a2:	4b85      	ldr	r3, [pc, #532]	; (800b7b8 <HAL_UART_IRQHandler+0x298>)
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 810a 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d011      	beq.n	800b5dc <HAL_UART_IRQHandler+0xbc>
 800b5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00b      	beq.n	800b5dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5d2:	f043 0201 	orr.w	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e0:	f003 0302 	and.w	r3, r3, #2
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d011      	beq.n	800b60c <HAL_UART_IRQHandler+0xec>
 800b5e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5ec:	f003 0301 	and.w	r3, r3, #1
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b602:	f043 0204 	orr.w	r2, r3, #4
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b610:	f003 0304 	and.w	r3, r3, #4
 800b614:	2b00      	cmp	r3, #0
 800b616:	d011      	beq.n	800b63c <HAL_UART_IRQHandler+0x11c>
 800b618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00b      	beq.n	800b63c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2204      	movs	r2, #4
 800b62a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b632:	f043 0202 	orr.w	r2, r3, #2
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b640:	f003 0308 	and.w	r3, r3, #8
 800b644:	2b00      	cmp	r3, #0
 800b646:	d017      	beq.n	800b678 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b64c:	f003 0320 	and.w	r3, r3, #32
 800b650:	2b00      	cmp	r3, #0
 800b652:	d105      	bne.n	800b660 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b658:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00b      	beq.n	800b678 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2208      	movs	r2, #8
 800b666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b66e:	f043 0208 	orr.w	r2, r3, #8
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b67c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b680:	2b00      	cmp	r3, #0
 800b682:	d012      	beq.n	800b6aa <HAL_UART_IRQHandler+0x18a>
 800b684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00c      	beq.n	800b6aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6a0:	f043 0220 	orr.w	r2, r3, #32
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 81fd 	beq.w	800bab0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00d      	beq.n	800b6de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d007      	beq.n	800b6de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d005      	beq.n	800b702 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b6f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d04f      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fed2 	bl	800c4ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b712:	2b40      	cmp	r3, #64	; 0x40
 800b714:	d141      	bne.n	800b79a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3308      	adds	r3, #8
 800b71c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b72c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3308      	adds	r3, #8
 800b73e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b74e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b75a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1d9      	bne.n	800b716 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b766:	2b00      	cmp	r3, #0
 800b768:	d013      	beq.n	800b792 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b76e:	4a13      	ldr	r2, [pc, #76]	; (800b7bc <HAL_UART_IRQHandler+0x29c>)
 800b770:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b776:	4618      	mov	r0, r3
 800b778:	f7fc f8d2 	bl	8007920 <HAL_DMA_Abort_IT>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d017      	beq.n	800b7b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b78c:	4610      	mov	r0, r2
 800b78e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b790:	e00f      	b.n	800b7b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f9aa 	bl	800baec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b798:	e00b      	b.n	800b7b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f9a6 	bl	800baec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7a0:	e007      	b.n	800b7b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f9a2 	bl	800baec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b7b0:	e17e      	b.n	800bab0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b2:	bf00      	nop
    return;
 800b7b4:	e17c      	b.n	800bab0 <HAL_UART_IRQHandler+0x590>
 800b7b6:	bf00      	nop
 800b7b8:	04000120 	.word	0x04000120
 800b7bc:	0800c80b 	.word	0x0800c80b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	f040 814c 	bne.w	800ba62 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 8145 	beq.w	800ba62 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7dc:	f003 0310 	and.w	r3, r3, #16
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 813e 	beq.w	800ba62 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2210      	movs	r2, #16
 800b7ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f8:	2b40      	cmp	r3, #64	; 0x40
 800b7fa:	f040 80b6 	bne.w	800b96a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b80a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 8150 	beq.w	800bab4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b81a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b81e:	429a      	cmp	r2, r3
 800b820:	f080 8148 	bcs.w	800bab4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b82a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b838:	f000 8086 	beq.w	800b948 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b848:	e853 3f00 	ldrex	r3, [r3]
 800b84c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b86a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b876:	e841 2300 	strex	r3, r2, [r1]
 800b87a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1da      	bne.n	800b83c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3308      	adds	r3, #8
 800b88c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b898:	f023 0301 	bic.w	r3, r3, #1
 800b89c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e1      	bne.n	800b886 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8cc:	e853 3f00 	ldrex	r3, [r3]
 800b8d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e3      	bne.n	800b8c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2220      	movs	r2, #32
 800b8fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b910:	e853 3f00 	ldrex	r3, [r3]
 800b914:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b918:	f023 0310 	bic.w	r3, r3, #16
 800b91c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b92a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b92c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e4      	bne.n	800b908 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b942:	4618      	mov	r0, r3
 800b944:	f7fb ff7c 	bl	8007840 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2202      	movs	r2, #2
 800b94c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	b29b      	uxth	r3, r3
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f8cc 	bl	800bb00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b968:	e0a4      	b.n	800bab4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b976:	b29b      	uxth	r3, r3
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b984:	b29b      	uxth	r3, r3
 800b986:	2b00      	cmp	r3, #0
 800b988:	f000 8096 	beq.w	800bab8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b98c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 8091 	beq.w	800bab8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c0:	e841 2300 	strex	r3, r2, [r1]
 800b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1e4      	bne.n	800b996 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	e853 3f00 	ldrex	r3, [r3]
 800b9da:	623b      	str	r3, [r7, #32]
   return(result);
 800b9dc:	6a3b      	ldr	r3, [r7, #32]
 800b9de:	f023 0301 	bic.w	r3, r3, #1
 800b9e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9f0:	633a      	str	r2, [r7, #48]	; 0x30
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e3      	bne.n	800b9cc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f023 0310 	bic.w	r3, r3, #16
 800ba2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	461a      	mov	r2, r3
 800ba36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba3a:	61fb      	str	r3, [r7, #28]
 800ba3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3e:	69b9      	ldr	r1, [r7, #24]
 800ba40:	69fa      	ldr	r2, [r7, #28]
 800ba42:	e841 2300 	strex	r3, r2, [r1]
 800ba46:	617b      	str	r3, [r7, #20]
   return(result);
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e4      	bne.n	800ba18 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2202      	movs	r2, #2
 800ba52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba58:	4619      	mov	r1, r3
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f850 	bl	800bb00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba60:	e02a      	b.n	800bab8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ba62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00e      	beq.n	800ba8c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ba6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d008      	beq.n	800ba8c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d01c      	beq.n	800babc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
    }
    return;
 800ba8a:	e017      	b.n	800babc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d012      	beq.n	800babe <HAL_UART_IRQHandler+0x59e>
 800ba98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00c      	beq.n	800babe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fec6 	bl	800c836 <UART_EndTransmit_IT>
    return;
 800baaa:	e008      	b.n	800babe <HAL_UART_IRQHandler+0x59e>
      return;
 800baac:	bf00      	nop
 800baae:	e006      	b.n	800babe <HAL_UART_IRQHandler+0x59e>
    return;
 800bab0:	bf00      	nop
 800bab2:	e004      	b.n	800babe <HAL_UART_IRQHandler+0x59e>
      return;
 800bab4:	bf00      	nop
 800bab6:	e002      	b.n	800babe <HAL_UART_IRQHandler+0x59e>
      return;
 800bab8:	bf00      	nop
 800baba:	e000      	b.n	800babe <HAL_UART_IRQHandler+0x59e>
    return;
 800babc:	bf00      	nop
  }

}
 800babe:	37e8      	adds	r7, #232	; 0xe8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	689a      	ldr	r2, [r3, #8]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	431a      	orrs	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	431a      	orrs	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	69db      	ldr	r3, [r3, #28]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	4ba6      	ldr	r3, [pc, #664]	; (800bddc <UART_SetConfig+0x2c4>)
 800bb44:	4013      	ands	r3, r2
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	6812      	ldr	r2, [r2, #0]
 800bb4a:	6979      	ldr	r1, [r7, #20]
 800bb4c:	430b      	orrs	r3, r1
 800bb4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	430a      	orrs	r2, r1
 800bb64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	697a      	ldr	r2, [r7, #20]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a94      	ldr	r2, [pc, #592]	; (800bde0 <UART_SetConfig+0x2c8>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d120      	bne.n	800bbd6 <UART_SetConfig+0xbe>
 800bb94:	4b93      	ldr	r3, [pc, #588]	; (800bde4 <UART_SetConfig+0x2cc>)
 800bb96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9a:	f003 0303 	and.w	r3, r3, #3
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d816      	bhi.n	800bbd0 <UART_SetConfig+0xb8>
 800bba2:	a201      	add	r2, pc, #4	; (adr r2, 800bba8 <UART_SetConfig+0x90>)
 800bba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba8:	0800bbb9 	.word	0x0800bbb9
 800bbac:	0800bbc5 	.word	0x0800bbc5
 800bbb0:	0800bbbf 	.word	0x0800bbbf
 800bbb4:	0800bbcb 	.word	0x0800bbcb
 800bbb8:	2301      	movs	r3, #1
 800bbba:	77fb      	strb	r3, [r7, #31]
 800bbbc:	e150      	b.n	800be60 <UART_SetConfig+0x348>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	77fb      	strb	r3, [r7, #31]
 800bbc2:	e14d      	b.n	800be60 <UART_SetConfig+0x348>
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	77fb      	strb	r3, [r7, #31]
 800bbc8:	e14a      	b.n	800be60 <UART_SetConfig+0x348>
 800bbca:	2308      	movs	r3, #8
 800bbcc:	77fb      	strb	r3, [r7, #31]
 800bbce:	e147      	b.n	800be60 <UART_SetConfig+0x348>
 800bbd0:	2310      	movs	r3, #16
 800bbd2:	77fb      	strb	r3, [r7, #31]
 800bbd4:	e144      	b.n	800be60 <UART_SetConfig+0x348>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a83      	ldr	r2, [pc, #524]	; (800bde8 <UART_SetConfig+0x2d0>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d132      	bne.n	800bc46 <UART_SetConfig+0x12e>
 800bbe0:	4b80      	ldr	r3, [pc, #512]	; (800bde4 <UART_SetConfig+0x2cc>)
 800bbe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbe6:	f003 030c 	and.w	r3, r3, #12
 800bbea:	2b0c      	cmp	r3, #12
 800bbec:	d828      	bhi.n	800bc40 <UART_SetConfig+0x128>
 800bbee:	a201      	add	r2, pc, #4	; (adr r2, 800bbf4 <UART_SetConfig+0xdc>)
 800bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf4:	0800bc29 	.word	0x0800bc29
 800bbf8:	0800bc41 	.word	0x0800bc41
 800bbfc:	0800bc41 	.word	0x0800bc41
 800bc00:	0800bc41 	.word	0x0800bc41
 800bc04:	0800bc35 	.word	0x0800bc35
 800bc08:	0800bc41 	.word	0x0800bc41
 800bc0c:	0800bc41 	.word	0x0800bc41
 800bc10:	0800bc41 	.word	0x0800bc41
 800bc14:	0800bc2f 	.word	0x0800bc2f
 800bc18:	0800bc41 	.word	0x0800bc41
 800bc1c:	0800bc41 	.word	0x0800bc41
 800bc20:	0800bc41 	.word	0x0800bc41
 800bc24:	0800bc3b 	.word	0x0800bc3b
 800bc28:	2300      	movs	r3, #0
 800bc2a:	77fb      	strb	r3, [r7, #31]
 800bc2c:	e118      	b.n	800be60 <UART_SetConfig+0x348>
 800bc2e:	2302      	movs	r3, #2
 800bc30:	77fb      	strb	r3, [r7, #31]
 800bc32:	e115      	b.n	800be60 <UART_SetConfig+0x348>
 800bc34:	2304      	movs	r3, #4
 800bc36:	77fb      	strb	r3, [r7, #31]
 800bc38:	e112      	b.n	800be60 <UART_SetConfig+0x348>
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	77fb      	strb	r3, [r7, #31]
 800bc3e:	e10f      	b.n	800be60 <UART_SetConfig+0x348>
 800bc40:	2310      	movs	r3, #16
 800bc42:	77fb      	strb	r3, [r7, #31]
 800bc44:	e10c      	b.n	800be60 <UART_SetConfig+0x348>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a68      	ldr	r2, [pc, #416]	; (800bdec <UART_SetConfig+0x2d4>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d120      	bne.n	800bc92 <UART_SetConfig+0x17a>
 800bc50:	4b64      	ldr	r3, [pc, #400]	; (800bde4 <UART_SetConfig+0x2cc>)
 800bc52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc5a:	2b30      	cmp	r3, #48	; 0x30
 800bc5c:	d013      	beq.n	800bc86 <UART_SetConfig+0x16e>
 800bc5e:	2b30      	cmp	r3, #48	; 0x30
 800bc60:	d814      	bhi.n	800bc8c <UART_SetConfig+0x174>
 800bc62:	2b20      	cmp	r3, #32
 800bc64:	d009      	beq.n	800bc7a <UART_SetConfig+0x162>
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	d810      	bhi.n	800bc8c <UART_SetConfig+0x174>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <UART_SetConfig+0x15c>
 800bc6e:	2b10      	cmp	r3, #16
 800bc70:	d006      	beq.n	800bc80 <UART_SetConfig+0x168>
 800bc72:	e00b      	b.n	800bc8c <UART_SetConfig+0x174>
 800bc74:	2300      	movs	r3, #0
 800bc76:	77fb      	strb	r3, [r7, #31]
 800bc78:	e0f2      	b.n	800be60 <UART_SetConfig+0x348>
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	77fb      	strb	r3, [r7, #31]
 800bc7e:	e0ef      	b.n	800be60 <UART_SetConfig+0x348>
 800bc80:	2304      	movs	r3, #4
 800bc82:	77fb      	strb	r3, [r7, #31]
 800bc84:	e0ec      	b.n	800be60 <UART_SetConfig+0x348>
 800bc86:	2308      	movs	r3, #8
 800bc88:	77fb      	strb	r3, [r7, #31]
 800bc8a:	e0e9      	b.n	800be60 <UART_SetConfig+0x348>
 800bc8c:	2310      	movs	r3, #16
 800bc8e:	77fb      	strb	r3, [r7, #31]
 800bc90:	e0e6      	b.n	800be60 <UART_SetConfig+0x348>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a56      	ldr	r2, [pc, #344]	; (800bdf0 <UART_SetConfig+0x2d8>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d120      	bne.n	800bcde <UART_SetConfig+0x1c6>
 800bc9c:	4b51      	ldr	r3, [pc, #324]	; (800bde4 <UART_SetConfig+0x2cc>)
 800bc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bca6:	2bc0      	cmp	r3, #192	; 0xc0
 800bca8:	d013      	beq.n	800bcd2 <UART_SetConfig+0x1ba>
 800bcaa:	2bc0      	cmp	r3, #192	; 0xc0
 800bcac:	d814      	bhi.n	800bcd8 <UART_SetConfig+0x1c0>
 800bcae:	2b80      	cmp	r3, #128	; 0x80
 800bcb0:	d009      	beq.n	800bcc6 <UART_SetConfig+0x1ae>
 800bcb2:	2b80      	cmp	r3, #128	; 0x80
 800bcb4:	d810      	bhi.n	800bcd8 <UART_SetConfig+0x1c0>
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <UART_SetConfig+0x1a8>
 800bcba:	2b40      	cmp	r3, #64	; 0x40
 800bcbc:	d006      	beq.n	800bccc <UART_SetConfig+0x1b4>
 800bcbe:	e00b      	b.n	800bcd8 <UART_SetConfig+0x1c0>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	77fb      	strb	r3, [r7, #31]
 800bcc4:	e0cc      	b.n	800be60 <UART_SetConfig+0x348>
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	77fb      	strb	r3, [r7, #31]
 800bcca:	e0c9      	b.n	800be60 <UART_SetConfig+0x348>
 800bccc:	2304      	movs	r3, #4
 800bcce:	77fb      	strb	r3, [r7, #31]
 800bcd0:	e0c6      	b.n	800be60 <UART_SetConfig+0x348>
 800bcd2:	2308      	movs	r3, #8
 800bcd4:	77fb      	strb	r3, [r7, #31]
 800bcd6:	e0c3      	b.n	800be60 <UART_SetConfig+0x348>
 800bcd8:	2310      	movs	r3, #16
 800bcda:	77fb      	strb	r3, [r7, #31]
 800bcdc:	e0c0      	b.n	800be60 <UART_SetConfig+0x348>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a44      	ldr	r2, [pc, #272]	; (800bdf4 <UART_SetConfig+0x2dc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d125      	bne.n	800bd34 <UART_SetConfig+0x21c>
 800bce8:	4b3e      	ldr	r3, [pc, #248]	; (800bde4 <UART_SetConfig+0x2cc>)
 800bcea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcf6:	d017      	beq.n	800bd28 <UART_SetConfig+0x210>
 800bcf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcfc:	d817      	bhi.n	800bd2e <UART_SetConfig+0x216>
 800bcfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd02:	d00b      	beq.n	800bd1c <UART_SetConfig+0x204>
 800bd04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd08:	d811      	bhi.n	800bd2e <UART_SetConfig+0x216>
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <UART_SetConfig+0x1fe>
 800bd0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd12:	d006      	beq.n	800bd22 <UART_SetConfig+0x20a>
 800bd14:	e00b      	b.n	800bd2e <UART_SetConfig+0x216>
 800bd16:	2300      	movs	r3, #0
 800bd18:	77fb      	strb	r3, [r7, #31]
 800bd1a:	e0a1      	b.n	800be60 <UART_SetConfig+0x348>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	77fb      	strb	r3, [r7, #31]
 800bd20:	e09e      	b.n	800be60 <UART_SetConfig+0x348>
 800bd22:	2304      	movs	r3, #4
 800bd24:	77fb      	strb	r3, [r7, #31]
 800bd26:	e09b      	b.n	800be60 <UART_SetConfig+0x348>
 800bd28:	2308      	movs	r3, #8
 800bd2a:	77fb      	strb	r3, [r7, #31]
 800bd2c:	e098      	b.n	800be60 <UART_SetConfig+0x348>
 800bd2e:	2310      	movs	r3, #16
 800bd30:	77fb      	strb	r3, [r7, #31]
 800bd32:	e095      	b.n	800be60 <UART_SetConfig+0x348>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a2f      	ldr	r2, [pc, #188]	; (800bdf8 <UART_SetConfig+0x2e0>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d125      	bne.n	800bd8a <UART_SetConfig+0x272>
 800bd3e:	4b29      	ldr	r3, [pc, #164]	; (800bde4 <UART_SetConfig+0x2cc>)
 800bd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd4c:	d017      	beq.n	800bd7e <UART_SetConfig+0x266>
 800bd4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd52:	d817      	bhi.n	800bd84 <UART_SetConfig+0x26c>
 800bd54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd58:	d00b      	beq.n	800bd72 <UART_SetConfig+0x25a>
 800bd5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd5e:	d811      	bhi.n	800bd84 <UART_SetConfig+0x26c>
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <UART_SetConfig+0x254>
 800bd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd68:	d006      	beq.n	800bd78 <UART_SetConfig+0x260>
 800bd6a:	e00b      	b.n	800bd84 <UART_SetConfig+0x26c>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	77fb      	strb	r3, [r7, #31]
 800bd70:	e076      	b.n	800be60 <UART_SetConfig+0x348>
 800bd72:	2302      	movs	r3, #2
 800bd74:	77fb      	strb	r3, [r7, #31]
 800bd76:	e073      	b.n	800be60 <UART_SetConfig+0x348>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	77fb      	strb	r3, [r7, #31]
 800bd7c:	e070      	b.n	800be60 <UART_SetConfig+0x348>
 800bd7e:	2308      	movs	r3, #8
 800bd80:	77fb      	strb	r3, [r7, #31]
 800bd82:	e06d      	b.n	800be60 <UART_SetConfig+0x348>
 800bd84:	2310      	movs	r3, #16
 800bd86:	77fb      	strb	r3, [r7, #31]
 800bd88:	e06a      	b.n	800be60 <UART_SetConfig+0x348>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a1b      	ldr	r2, [pc, #108]	; (800bdfc <UART_SetConfig+0x2e4>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d138      	bne.n	800be06 <UART_SetConfig+0x2ee>
 800bd94:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <UART_SetConfig+0x2cc>)
 800bd96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bd9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bda2:	d017      	beq.n	800bdd4 <UART_SetConfig+0x2bc>
 800bda4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bda8:	d82a      	bhi.n	800be00 <UART_SetConfig+0x2e8>
 800bdaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdae:	d00b      	beq.n	800bdc8 <UART_SetConfig+0x2b0>
 800bdb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdb4:	d824      	bhi.n	800be00 <UART_SetConfig+0x2e8>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d003      	beq.n	800bdc2 <UART_SetConfig+0x2aa>
 800bdba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdbe:	d006      	beq.n	800bdce <UART_SetConfig+0x2b6>
 800bdc0:	e01e      	b.n	800be00 <UART_SetConfig+0x2e8>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	77fb      	strb	r3, [r7, #31]
 800bdc6:	e04b      	b.n	800be60 <UART_SetConfig+0x348>
 800bdc8:	2302      	movs	r3, #2
 800bdca:	77fb      	strb	r3, [r7, #31]
 800bdcc:	e048      	b.n	800be60 <UART_SetConfig+0x348>
 800bdce:	2304      	movs	r3, #4
 800bdd0:	77fb      	strb	r3, [r7, #31]
 800bdd2:	e045      	b.n	800be60 <UART_SetConfig+0x348>
 800bdd4:	2308      	movs	r3, #8
 800bdd6:	77fb      	strb	r3, [r7, #31]
 800bdd8:	e042      	b.n	800be60 <UART_SetConfig+0x348>
 800bdda:	bf00      	nop
 800bddc:	efff69f3 	.word	0xefff69f3
 800bde0:	40011000 	.word	0x40011000
 800bde4:	40023800 	.word	0x40023800
 800bde8:	40004400 	.word	0x40004400
 800bdec:	40004800 	.word	0x40004800
 800bdf0:	40004c00 	.word	0x40004c00
 800bdf4:	40005000 	.word	0x40005000
 800bdf8:	40011400 	.word	0x40011400
 800bdfc:	40007800 	.word	0x40007800
 800be00:	2310      	movs	r3, #16
 800be02:	77fb      	strb	r3, [r7, #31]
 800be04:	e02c      	b.n	800be60 <UART_SetConfig+0x348>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a72      	ldr	r2, [pc, #456]	; (800bfd4 <UART_SetConfig+0x4bc>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d125      	bne.n	800be5c <UART_SetConfig+0x344>
 800be10:	4b71      	ldr	r3, [pc, #452]	; (800bfd8 <UART_SetConfig+0x4c0>)
 800be12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be1e:	d017      	beq.n	800be50 <UART_SetConfig+0x338>
 800be20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be24:	d817      	bhi.n	800be56 <UART_SetConfig+0x33e>
 800be26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be2a:	d00b      	beq.n	800be44 <UART_SetConfig+0x32c>
 800be2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be30:	d811      	bhi.n	800be56 <UART_SetConfig+0x33e>
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <UART_SetConfig+0x326>
 800be36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be3a:	d006      	beq.n	800be4a <UART_SetConfig+0x332>
 800be3c:	e00b      	b.n	800be56 <UART_SetConfig+0x33e>
 800be3e:	2300      	movs	r3, #0
 800be40:	77fb      	strb	r3, [r7, #31]
 800be42:	e00d      	b.n	800be60 <UART_SetConfig+0x348>
 800be44:	2302      	movs	r3, #2
 800be46:	77fb      	strb	r3, [r7, #31]
 800be48:	e00a      	b.n	800be60 <UART_SetConfig+0x348>
 800be4a:	2304      	movs	r3, #4
 800be4c:	77fb      	strb	r3, [r7, #31]
 800be4e:	e007      	b.n	800be60 <UART_SetConfig+0x348>
 800be50:	2308      	movs	r3, #8
 800be52:	77fb      	strb	r3, [r7, #31]
 800be54:	e004      	b.n	800be60 <UART_SetConfig+0x348>
 800be56:	2310      	movs	r3, #16
 800be58:	77fb      	strb	r3, [r7, #31]
 800be5a:	e001      	b.n	800be60 <UART_SetConfig+0x348>
 800be5c:	2310      	movs	r3, #16
 800be5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	69db      	ldr	r3, [r3, #28]
 800be64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be68:	d15b      	bne.n	800bf22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800be6a:	7ffb      	ldrb	r3, [r7, #31]
 800be6c:	2b08      	cmp	r3, #8
 800be6e:	d828      	bhi.n	800bec2 <UART_SetConfig+0x3aa>
 800be70:	a201      	add	r2, pc, #4	; (adr r2, 800be78 <UART_SetConfig+0x360>)
 800be72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be76:	bf00      	nop
 800be78:	0800be9d 	.word	0x0800be9d
 800be7c:	0800bea5 	.word	0x0800bea5
 800be80:	0800bead 	.word	0x0800bead
 800be84:	0800bec3 	.word	0x0800bec3
 800be88:	0800beb3 	.word	0x0800beb3
 800be8c:	0800bec3 	.word	0x0800bec3
 800be90:	0800bec3 	.word	0x0800bec3
 800be94:	0800bec3 	.word	0x0800bec3
 800be98:	0800bebb 	.word	0x0800bebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be9c:	f7fd fb34 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800bea0:	61b8      	str	r0, [r7, #24]
        break;
 800bea2:	e013      	b.n	800becc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bea4:	f7fd fb44 	bl	8009530 <HAL_RCC_GetPCLK2Freq>
 800bea8:	61b8      	str	r0, [r7, #24]
        break;
 800beaa:	e00f      	b.n	800becc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800beac:	4b4b      	ldr	r3, [pc, #300]	; (800bfdc <UART_SetConfig+0x4c4>)
 800beae:	61bb      	str	r3, [r7, #24]
        break;
 800beb0:	e00c      	b.n	800becc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800beb2:	f7fd fa17 	bl	80092e4 <HAL_RCC_GetSysClockFreq>
 800beb6:	61b8      	str	r0, [r7, #24]
        break;
 800beb8:	e008      	b.n	800becc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bebe:	61bb      	str	r3, [r7, #24]
        break;
 800bec0:	e004      	b.n	800becc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	77bb      	strb	r3, [r7, #30]
        break;
 800beca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d074      	beq.n	800bfbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	005a      	lsls	r2, r3, #1
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	085b      	lsrs	r3, r3, #1
 800bedc:	441a      	add	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	2b0f      	cmp	r3, #15
 800beec:	d916      	bls.n	800bf1c <UART_SetConfig+0x404>
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef4:	d212      	bcs.n	800bf1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	f023 030f 	bic.w	r3, r3, #15
 800befe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	085b      	lsrs	r3, r3, #1
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	89fb      	ldrh	r3, [r7, #14]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	89fa      	ldrh	r2, [r7, #14]
 800bf18:	60da      	str	r2, [r3, #12]
 800bf1a:	e04f      	b.n	800bfbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	77bb      	strb	r3, [r7, #30]
 800bf20:	e04c      	b.n	800bfbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf22:	7ffb      	ldrb	r3, [r7, #31]
 800bf24:	2b08      	cmp	r3, #8
 800bf26:	d828      	bhi.n	800bf7a <UART_SetConfig+0x462>
 800bf28:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <UART_SetConfig+0x418>)
 800bf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2e:	bf00      	nop
 800bf30:	0800bf55 	.word	0x0800bf55
 800bf34:	0800bf5d 	.word	0x0800bf5d
 800bf38:	0800bf65 	.word	0x0800bf65
 800bf3c:	0800bf7b 	.word	0x0800bf7b
 800bf40:	0800bf6b 	.word	0x0800bf6b
 800bf44:	0800bf7b 	.word	0x0800bf7b
 800bf48:	0800bf7b 	.word	0x0800bf7b
 800bf4c:	0800bf7b 	.word	0x0800bf7b
 800bf50:	0800bf73 	.word	0x0800bf73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf54:	f7fd fad8 	bl	8009508 <HAL_RCC_GetPCLK1Freq>
 800bf58:	61b8      	str	r0, [r7, #24]
        break;
 800bf5a:	e013      	b.n	800bf84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf5c:	f7fd fae8 	bl	8009530 <HAL_RCC_GetPCLK2Freq>
 800bf60:	61b8      	str	r0, [r7, #24]
        break;
 800bf62:	e00f      	b.n	800bf84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf64:	4b1d      	ldr	r3, [pc, #116]	; (800bfdc <UART_SetConfig+0x4c4>)
 800bf66:	61bb      	str	r3, [r7, #24]
        break;
 800bf68:	e00c      	b.n	800bf84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf6a:	f7fd f9bb 	bl	80092e4 <HAL_RCC_GetSysClockFreq>
 800bf6e:	61b8      	str	r0, [r7, #24]
        break;
 800bf70:	e008      	b.n	800bf84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf76:	61bb      	str	r3, [r7, #24]
        break;
 800bf78:	e004      	b.n	800bf84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	77bb      	strb	r3, [r7, #30]
        break;
 800bf82:	bf00      	nop
    }

    if (pclk != 0U)
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d018      	beq.n	800bfbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	085a      	lsrs	r2, r3, #1
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	441a      	add	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b0f      	cmp	r3, #15
 800bfa2:	d909      	bls.n	800bfb8 <UART_SetConfig+0x4a0>
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfaa:	d205      	bcs.n	800bfb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	60da      	str	r2, [r3, #12]
 800bfb6:	e001      	b.n	800bfbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bfc8:	7fbb      	ldrb	r3, [r7, #30]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3720      	adds	r7, #32
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	40007c00 	.word	0x40007c00
 800bfd8:	40023800 	.word	0x40023800
 800bfdc:	00f42400 	.word	0x00f42400

0800bfe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00a      	beq.n	800c00a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	430a      	orrs	r2, r1
 800c008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	f003 0304 	and.w	r3, r3, #4
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00a      	beq.n	800c04e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	430a      	orrs	r2, r1
 800c04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c052:	f003 0308 	and.w	r3, r3, #8
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00a      	beq.n	800c070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	f003 0310 	and.w	r3, r3, #16
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00a      	beq.n	800c092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	430a      	orrs	r2, r1
 800c090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00a      	beq.n	800c0b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01a      	beq.n	800c0f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0de:	d10a      	bne.n	800c0f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00a      	beq.n	800c118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	430a      	orrs	r2, r1
 800c116:	605a      	str	r2, [r3, #4]
  }
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af02      	add	r7, sp, #8
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c134:	f7fb f84c 	bl	80071d0 <HAL_GetTick>
 800c138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 0308 	and.w	r3, r3, #8
 800c144:	2b08      	cmp	r3, #8
 800c146:	d10e      	bne.n	800c166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f81b 	bl	800c192 <UART_WaitOnFlagUntilTimeout>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e011      	b.n	800c18a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2220      	movs	r2, #32
 800c170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b09c      	sub	sp, #112	; 0x70
 800c196:	af00      	add	r7, sp, #0
 800c198:	60f8      	str	r0, [r7, #12]
 800c19a:	60b9      	str	r1, [r7, #8]
 800c19c:	603b      	str	r3, [r7, #0]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1a2:	e0a7      	b.n	800c2f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1aa:	f000 80a3 	beq.w	800c2f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ae:	f7fb f80f 	bl	80071d0 <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d302      	bcc.n	800c1c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c1be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d13f      	bne.n	800c244 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1cc:	e853 3f00 	ldrex	r3, [r3]
 800c1d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1d8:	667b      	str	r3, [r7, #100]	; 0x64
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e6      	bne.n	800c1c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c208:	f023 0301 	bic.w	r3, r3, #1
 800c20c:	663b      	str	r3, [r7, #96]	; 0x60
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3308      	adds	r3, #8
 800c214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c216:	64ba      	str	r2, [r7, #72]	; 0x48
 800c218:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c21c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c21e:	e841 2300 	strex	r3, r2, [r1]
 800c222:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e5      	bne.n	800c1f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2220      	movs	r2, #32
 800c22e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2220      	movs	r2, #32
 800c234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e068      	b.n	800c316 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 0304 	and.w	r3, r3, #4
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d050      	beq.n	800c2f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c25c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c260:	d148      	bne.n	800c2f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c26a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c274:	e853 3f00 	ldrex	r3, [r3]
 800c278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c280:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c28a:	637b      	str	r3, [r7, #52]	; 0x34
 800c28c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c292:	e841 2300 	strex	r3, r2, [r1]
 800c296:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1e6      	bne.n	800c26c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3308      	adds	r3, #8
 800c2a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	e853 3f00 	ldrex	r3, [r3]
 800c2ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	f023 0301 	bic.w	r3, r3, #1
 800c2b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2be:	623a      	str	r2, [r7, #32]
 800c2c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c2:	69f9      	ldr	r1, [r7, #28]
 800c2c4:	6a3a      	ldr	r2, [r7, #32]
 800c2c6:	e841 2300 	strex	r3, r2, [r1]
 800c2ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1e5      	bne.n	800c29e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2220      	movs	r2, #32
 800c2d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2220      	movs	r2, #32
 800c2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e010      	b.n	800c316 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	69da      	ldr	r2, [r3, #28]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	429a      	cmp	r2, r3
 800c302:	bf0c      	ite	eq
 800c304:	2301      	moveq	r3, #1
 800c306:	2300      	movne	r3, #0
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	461a      	mov	r2, r3
 800c30c:	79fb      	ldrb	r3, [r7, #7]
 800c30e:	429a      	cmp	r2, r3
 800c310:	f43f af48 	beq.w	800c1a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3770      	adds	r7, #112	; 0x70
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b096      	sub	sp, #88	; 0x58
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4613      	mov	r3, r2
 800c32c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	88fa      	ldrh	r2, [r7, #6]
 800c338:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2222      	movs	r2, #34	; 0x22
 800c348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c350:	2b00      	cmp	r3, #0
 800c352:	d028      	beq.n	800c3a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c358:	4a3e      	ldr	r2, [pc, #248]	; (800c454 <UART_Start_Receive_DMA+0x134>)
 800c35a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c360:	4a3d      	ldr	r2, [pc, #244]	; (800c458 <UART_Start_Receive_DMA+0x138>)
 800c362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c368:	4a3c      	ldr	r2, [pc, #240]	; (800c45c <UART_Start_Receive_DMA+0x13c>)
 800c36a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c370:	2200      	movs	r2, #0
 800c372:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3324      	adds	r3, #36	; 0x24
 800c37e:	4619      	mov	r1, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c384:	461a      	mov	r2, r3
 800c386:	88fb      	ldrh	r3, [r7, #6]
 800c388:	f7fb f9fa 	bl	8007780 <HAL_DMA_Start_IT>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d009      	beq.n	800c3a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2210      	movs	r2, #16
 800c396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2220      	movs	r2, #32
 800c39e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e051      	b.n	800c44a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d018      	beq.n	800c3e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b6:	e853 3f00 	ldrex	r3, [r3]
 800c3ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3c2:	657b      	str	r3, [r7, #84]	; 0x54
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3ce:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3d4:	e841 2300 	strex	r3, r2, [r1]
 800c3d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e6      	bne.n	800c3ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	f043 0301 	orr.w	r3, r3, #1
 800c3f6:	653b      	str	r3, [r7, #80]	; 0x50
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c400:	637a      	str	r2, [r7, #52]	; 0x34
 800c402:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e5      	bne.n	800c3e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3308      	adds	r3, #8
 800c41a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	e853 3f00 	ldrex	r3, [r3]
 800c422:	613b      	str	r3, [r7, #16]
   return(result);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c42a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3308      	adds	r3, #8
 800c432:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c434:	623a      	str	r2, [r7, #32]
 800c436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c438:	69f9      	ldr	r1, [r7, #28]
 800c43a:	6a3a      	ldr	r2, [r7, #32]
 800c43c:	e841 2300 	strex	r3, r2, [r1]
 800c440:	61bb      	str	r3, [r7, #24]
   return(result);
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e5      	bne.n	800c414 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3758      	adds	r7, #88	; 0x58
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	0800c627 	.word	0x0800c627
 800c458:	0800c74f 	.word	0x0800c74f
 800c45c:	0800c78d 	.word	0x0800c78d

0800c460 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c460:	b480      	push	{r7}
 800c462:	b089      	sub	sp, #36	; 0x24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	60bb      	str	r3, [r7, #8]
   return(result);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	61bb      	str	r3, [r7, #24]
 800c488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48a:	6979      	ldr	r1, [r7, #20]
 800c48c:	69ba      	ldr	r2, [r7, #24]
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	613b      	str	r3, [r7, #16]
   return(result);
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1e6      	bne.n	800c468 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2220      	movs	r2, #32
 800c49e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c4a0:	bf00      	nop
 800c4a2:	3724      	adds	r7, #36	; 0x24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b095      	sub	sp, #84	; 0x54
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4bc:	e853 3f00 	ldrex	r3, [r3]
 800c4c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4d2:	643b      	str	r3, [r7, #64]	; 0x40
 800c4d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4da:	e841 2300 	strex	r3, r2, [r1]
 800c4de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e6      	bne.n	800c4b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3308      	adds	r3, #8
 800c4ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	e853 3f00 	ldrex	r3, [r3]
 800c4f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	f023 0301 	bic.w	r3, r3, #1
 800c4fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	3308      	adds	r3, #8
 800c504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c506:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c508:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c50c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c50e:	e841 2300 	strex	r3, r2, [r1]
 800c512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1e5      	bne.n	800c4e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d118      	bne.n	800c554 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	e853 3f00 	ldrex	r3, [r3]
 800c52e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f023 0310 	bic.w	r3, r3, #16
 800c536:	647b      	str	r3, [r7, #68]	; 0x44
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	461a      	mov	r2, r3
 800c53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c540:	61bb      	str	r3, [r7, #24]
 800c542:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c544:	6979      	ldr	r1, [r7, #20]
 800c546:	69ba      	ldr	r2, [r7, #24]
 800c548:	e841 2300 	strex	r3, r2, [r1]
 800c54c:	613b      	str	r3, [r7, #16]
   return(result);
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1e6      	bne.n	800c522 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2220      	movs	r2, #32
 800c558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c568:	bf00      	nop
 800c56a:	3754      	adds	r7, #84	; 0x54
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b090      	sub	sp, #64	; 0x40
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c580:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c58a:	d037      	beq.n	800c5fc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58e:	2200      	movs	r2, #0
 800c590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3308      	adds	r3, #8
 800c59a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	e853 3f00 	ldrex	r3, [r3]
 800c5a2:	623b      	str	r3, [r7, #32]
   return(result);
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5b4:	633a      	str	r2, [r7, #48]	; 0x30
 800c5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5bc:	e841 2300 	strex	r3, r2, [r1]
 800c5c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1e5      	bne.n	800c594 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e6:	61fb      	str	r3, [r7, #28]
 800c5e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	69b9      	ldr	r1, [r7, #24]
 800c5ec:	69fa      	ldr	r2, [r7, #28]
 800c5ee:	e841 2300 	strex	r3, r2, [r1]
 800c5f2:	617b      	str	r3, [r7, #20]
   return(result);
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1e6      	bne.n	800c5c8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5fa:	e002      	b.n	800c602 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c5fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5fe:	f7f7 fd73 	bl	80040e8 <HAL_UART_TxCpltCallback>
}
 800c602:	bf00      	nop
 800c604:	3740      	adds	r7, #64	; 0x40
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b084      	sub	sp, #16
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c616:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7ff fa53 	bl	800bac4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b09c      	sub	sp, #112	; 0x70
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c632:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	69db      	ldr	r3, [r3, #28]
 800c638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c63c:	d071      	beq.n	800c722 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c640:	2200      	movs	r2, #0
 800c642:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c64e:	e853 3f00 	ldrex	r3, [r3]
 800c652:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c65a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	461a      	mov	r2, r3
 800c662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c664:	65bb      	str	r3, [r7, #88]	; 0x58
 800c666:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c66a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c66c:	e841 2300 	strex	r3, r2, [r1]
 800c670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1e6      	bne.n	800c646 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3308      	adds	r3, #8
 800c67e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	e853 3f00 	ldrex	r3, [r3]
 800c686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68a:	f023 0301 	bic.w	r3, r3, #1
 800c68e:	667b      	str	r3, [r7, #100]	; 0x64
 800c690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3308      	adds	r3, #8
 800c696:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c698:	647a      	str	r2, [r7, #68]	; 0x44
 800c69a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c69e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6a0:	e841 2300 	strex	r3, r2, [r1]
 800c6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e5      	bne.n	800c678 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	3308      	adds	r3, #8
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	e853 3f00 	ldrex	r3, [r3]
 800c6ba:	623b      	str	r3, [r7, #32]
   return(result);
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6c2:	663b      	str	r3, [r7, #96]	; 0x60
 800c6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c6cc:	633a      	str	r2, [r7, #48]	; 0x30
 800c6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6d4:	e841 2300 	strex	r3, r2, [r1]
 800c6d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1e5      	bne.n	800c6ac <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6e2:	2220      	movs	r2, #32
 800c6e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d118      	bne.n	800c722 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f023 0310 	bic.w	r3, r3, #16
 800c704:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	461a      	mov	r2, r3
 800c70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c712:	69b9      	ldr	r1, [r7, #24]
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	e841 2300 	strex	r3, r2, [r1]
 800c71a:	617b      	str	r3, [r7, #20]
   return(result);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1e6      	bne.n	800c6f0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c724:	2200      	movs	r2, #0
 800c726:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c72a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d107      	bne.n	800c740 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c732:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c736:	4619      	mov	r1, r3
 800c738:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c73a:	f7ff f9e1 	bl	800bb00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c73e:	e002      	b.n	800c746 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c740:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c742:	f7f7 fce3 	bl	800410c <HAL_UART_RxCpltCallback>
}
 800c746:	bf00      	nop
 800c748:	3770      	adds	r7, #112	; 0x70
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2201      	movs	r2, #1
 800c760:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c766:	2b01      	cmp	r3, #1
 800c768:	d109      	bne.n	800c77e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c770:	085b      	lsrs	r3, r3, #1
 800c772:	b29b      	uxth	r3, r3
 800c774:	4619      	mov	r1, r3
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f7ff f9c2 	bl	800bb00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c77c:	e002      	b.n	800c784 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7ff f9aa 	bl	800bad8 <HAL_UART_RxHalfCpltCallback>
}
 800c784:	bf00      	nop
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b086      	sub	sp, #24
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c79e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b2:	2b80      	cmp	r3, #128	; 0x80
 800c7b4:	d109      	bne.n	800c7ca <UART_DMAError+0x3e>
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	2b21      	cmp	r3, #33	; 0x21
 800c7ba:	d106      	bne.n	800c7ca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c7c4:	6978      	ldr	r0, [r7, #20]
 800c7c6:	f7ff fe4b 	bl	800c460 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d4:	2b40      	cmp	r3, #64	; 0x40
 800c7d6:	d109      	bne.n	800c7ec <UART_DMAError+0x60>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b22      	cmp	r3, #34	; 0x22
 800c7dc:	d106      	bne.n	800c7ec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c7e6:	6978      	ldr	r0, [r7, #20]
 800c7e8:	f7ff fe60 	bl	800c4ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f2:	f043 0210 	orr.w	r2, r3, #16
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7fc:	6978      	ldr	r0, [r7, #20]
 800c7fe:	f7ff f975 	bl	800baec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c802:	bf00      	nop
 800c804:	3718      	adds	r7, #24
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff f95f 	bl	800baec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c82e:	bf00      	nop
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b088      	sub	sp, #32
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	e853 3f00 	ldrex	r3, [r3]
 800c84a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c852:	61fb      	str	r3, [r7, #28]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	461a      	mov	r2, r3
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	61bb      	str	r3, [r7, #24]
 800c85e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c860:	6979      	ldr	r1, [r7, #20]
 800c862:	69ba      	ldr	r2, [r7, #24]
 800c864:	e841 2300 	strex	r3, r2, [r1]
 800c868:	613b      	str	r3, [r7, #16]
   return(result);
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1e6      	bne.n	800c83e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2220      	movs	r2, #32
 800c874:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7f7 fc33 	bl	80040e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c882:	bf00      	nop
 800c884:	3720      	adds	r7, #32
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c88c:	b084      	sub	sp, #16
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	f107 001c 	add.w	r0, r7, #28
 800c89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d120      	bne.n	800c8e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68da      	ldr	r2, [r3, #12]
 800c8b4:	4b20      	ldr	r3, [pc, #128]	; (800c938 <USB_CoreInit+0xac>)
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d105      	bne.n	800c8da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fa96 	bl	800ce0c <USB_CoreReset>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73fb      	strb	r3, [r7, #15]
 800c8e4:	e010      	b.n	800c908 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fa8a 	bl	800ce0c <USB_CoreReset>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d10b      	bne.n	800c926 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f043 0206 	orr.w	r2, r3, #6
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f043 0220 	orr.w	r2, r3, #32
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c926:	7bfb      	ldrb	r3, [r7, #15]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c932:	b004      	add	sp, #16
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	ffbdffbf 	.word	0xffbdffbf

0800c93c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	f023 0201 	bic.w	r2, r3, #1
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	370c      	adds	r7, #12
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	460b      	mov	r3, r1
 800c968:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c97a:	78fb      	ldrb	r3, [r7, #3]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d115      	bne.n	800c9ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c98c:	2001      	movs	r0, #1
 800c98e:	f7fa fc2b 	bl	80071e8 <HAL_Delay>
      ms++;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3301      	adds	r3, #1
 800c996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fa29 	bl	800cdf0 <USB_GetMode>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d01e      	beq.n	800c9e2 <USB_SetCurrentMode+0x84>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b31      	cmp	r3, #49	; 0x31
 800c9a8:	d9f0      	bls.n	800c98c <USB_SetCurrentMode+0x2e>
 800c9aa:	e01a      	b.n	800c9e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c9ac:	78fb      	ldrb	r3, [r7, #3]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d115      	bne.n	800c9de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c9be:	2001      	movs	r0, #1
 800c9c0:	f7fa fc12 	bl	80071e8 <HAL_Delay>
      ms++;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa10 	bl	800cdf0 <USB_GetMode>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d005      	beq.n	800c9e2 <USB_SetCurrentMode+0x84>
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b31      	cmp	r3, #49	; 0x31
 800c9da:	d9f0      	bls.n	800c9be <USB_SetCurrentMode+0x60>
 800c9dc:	e001      	b.n	800c9e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e005      	b.n	800c9ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2b32      	cmp	r3, #50	; 0x32
 800c9e6:	d101      	bne.n	800c9ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e000      	b.n	800c9ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c9f8:	b084      	sub	sp, #16
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b086      	sub	sp, #24
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ca06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca12:	2300      	movs	r3, #0
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	e009      	b.n	800ca2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	3340      	adds	r3, #64	; 0x40
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4413      	add	r3, r2
 800ca22:	2200      	movs	r2, #0
 800ca24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	613b      	str	r3, [r7, #16]
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	2b0e      	cmp	r3, #14
 800ca30:	d9f2      	bls.n	800ca18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d11c      	bne.n	800ca72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca46:	f043 0302 	orr.w	r3, r3, #2
 800ca4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	e005      	b.n	800ca7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca84:	461a      	mov	r2, r3
 800ca86:	2300      	movs	r3, #0
 800ca88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca90:	4619      	mov	r1, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca98:	461a      	mov	r2, r3
 800ca9a:	680b      	ldr	r3, [r1, #0]
 800ca9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d10c      	bne.n	800cabe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d104      	bne.n	800cab4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800caaa:	2100      	movs	r1, #0
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f965 	bl	800cd7c <USB_SetDevSpeed>
 800cab2:	e008      	b.n	800cac6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cab4:	2101      	movs	r1, #1
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f960 	bl	800cd7c <USB_SetDevSpeed>
 800cabc:	e003      	b.n	800cac6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cabe:	2103      	movs	r1, #3
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 f95b 	bl	800cd7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cac6:	2110      	movs	r1, #16
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 f8f3 	bl	800ccb4 <USB_FlushTxFifo>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d001      	beq.n	800cad8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f91f 	bl	800cd1c <USB_FlushRxFifo>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d001      	beq.n	800cae8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caee:	461a      	mov	r2, r3
 800caf0:	2300      	movs	r3, #0
 800caf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafa:	461a      	mov	r2, r3
 800cafc:	2300      	movs	r3, #0
 800cafe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb06:	461a      	mov	r2, r3
 800cb08:	2300      	movs	r3, #0
 800cb0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	613b      	str	r3, [r7, #16]
 800cb10:	e043      	b.n	800cb9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	4413      	add	r3, r2
 800cb1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb28:	d118      	bne.n	800cb5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10a      	bne.n	800cb46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	015a      	lsls	r2, r3, #5
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	4413      	add	r3, r2
 800cb38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	e013      	b.n	800cb6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	015a      	lsls	r2, r3, #5
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb52:	461a      	mov	r2, r3
 800cb54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	e008      	b.n	800cb6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	015a      	lsls	r2, r3, #5
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	4413      	add	r3, r2
 800cb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb68:	461a      	mov	r2, r3
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	3301      	adds	r3, #1
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d3b7      	bcc.n	800cb12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cba2:	2300      	movs	r3, #0
 800cba4:	613b      	str	r3, [r7, #16]
 800cba6:	e043      	b.n	800cc30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbbe:	d118      	bne.n	800cbf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10a      	bne.n	800cbdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	e013      	b.n	800cc04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	015a      	lsls	r2, r3, #5
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe8:	461a      	mov	r2, r3
 800cbea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	e008      	b.n	800cc04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	015a      	lsls	r2, r3, #5
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfe:	461a      	mov	r2, r3
 800cc00:	2300      	movs	r3, #0
 800cc02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc10:	461a      	mov	r2, r3
 800cc12:	2300      	movs	r3, #0
 800cc14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	015a      	lsls	r2, r3, #5
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc22:	461a      	mov	r2, r3
 800cc24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	613b      	str	r3, [r7, #16]
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d3b7      	bcc.n	800cba8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cc58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d105      	bne.n	800cc6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	f043 0210 	orr.w	r2, r3, #16
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	699a      	ldr	r2, [r3, #24]
 800cc70:	4b0e      	ldr	r3, [pc, #56]	; (800ccac <USB_DevInit+0x2b4>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d005      	beq.n	800cc8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	699b      	ldr	r3, [r3, #24]
 800cc82:	f043 0208 	orr.w	r2, r3, #8
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d105      	bne.n	800cc9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	699a      	ldr	r2, [r3, #24]
 800cc94:	4b06      	ldr	r3, [pc, #24]	; (800ccb0 <USB_DevInit+0x2b8>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3718      	adds	r7, #24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cca8:	b004      	add	sp, #16
 800ccaa:	4770      	bx	lr
 800ccac:	803c3800 	.word	0x803c3800
 800ccb0:	40000004 	.word	0x40000004

0800ccb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	4a13      	ldr	r2, [pc, #76]	; (800cd18 <USB_FlushTxFifo+0x64>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d901      	bls.n	800ccd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e01b      	b.n	800cd0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	daf2      	bge.n	800ccc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	019b      	lsls	r3, r3, #6
 800cce4:	f043 0220 	orr.w	r2, r3, #32
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4a08      	ldr	r2, [pc, #32]	; (800cd18 <USB_FlushTxFifo+0x64>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d901      	bls.n	800ccfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e006      	b.n	800cd0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b20      	cmp	r3, #32
 800cd08:	d0f0      	beq.n	800ccec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	00030d40 	.word	0x00030d40

0800cd1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4a11      	ldr	r2, [pc, #68]	; (800cd78 <USB_FlushRxFifo+0x5c>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d901      	bls.n	800cd3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cd36:	2303      	movs	r3, #3
 800cd38:	e018      	b.n	800cd6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	daf2      	bge.n	800cd28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2210      	movs	r2, #16
 800cd4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	4a08      	ldr	r2, [pc, #32]	; (800cd78 <USB_FlushRxFifo+0x5c>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d901      	bls.n	800cd5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e006      	b.n	800cd6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	691b      	ldr	r3, [r3, #16]
 800cd62:	f003 0310 	and.w	r3, r3, #16
 800cd66:	2b10      	cmp	r3, #16
 800cd68:	d0f0      	beq.n	800cd4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	00030d40 	.word	0x00030d40

0800cd7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	78fb      	ldrb	r3, [r7, #3]
 800cd96:	68f9      	ldr	r1, [r7, #12]
 800cd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cdc8:	f023 0303 	bic.w	r3, r3, #3
 800cdcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cddc:	f043 0302 	orr.w	r3, r3, #2
 800cde0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	695b      	ldr	r3, [r3, #20]
 800cdfc:	f003 0301 	and.w	r3, r3, #1
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce14:	2300      	movs	r3, #0
 800ce16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	4a13      	ldr	r2, [pc, #76]	; (800ce70 <USB_CoreReset+0x64>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d901      	bls.n	800ce2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce26:	2303      	movs	r3, #3
 800ce28:	e01b      	b.n	800ce62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	daf2      	bge.n	800ce18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce32:	2300      	movs	r3, #0
 800ce34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	f043 0201 	orr.w	r2, r3, #1
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <USB_CoreReset+0x64>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d901      	bls.n	800ce54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e006      	b.n	800ce62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	f003 0301 	and.w	r3, r3, #1
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d0f0      	beq.n	800ce42 <USB_CoreReset+0x36>

  return HAL_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	00030d40 	.word	0x00030d40

0800ce74 <realloc>:
 800ce74:	4b02      	ldr	r3, [pc, #8]	; (800ce80 <realloc+0xc>)
 800ce76:	460a      	mov	r2, r1
 800ce78:	4601      	mov	r1, r0
 800ce7a:	6818      	ldr	r0, [r3, #0]
 800ce7c:	f000 b802 	b.w	800ce84 <_realloc_r>
 800ce80:	20000068 	.word	0x20000068

0800ce84 <_realloc_r>:
 800ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	4680      	mov	r8, r0
 800ce8a:	4614      	mov	r4, r2
 800ce8c:	460e      	mov	r6, r1
 800ce8e:	b921      	cbnz	r1, 800ce9a <_realloc_r+0x16>
 800ce90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce94:	4611      	mov	r1, r2
 800ce96:	f001 bf45 	b.w	800ed24 <_malloc_r>
 800ce9a:	b92a      	cbnz	r2, 800cea8 <_realloc_r+0x24>
 800ce9c:	f001 fece 	bl	800ec3c <_free_r>
 800cea0:	4625      	mov	r5, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea8:	f002 fc75 	bl	800f796 <_malloc_usable_size_r>
 800ceac:	4284      	cmp	r4, r0
 800ceae:	4607      	mov	r7, r0
 800ceb0:	d802      	bhi.n	800ceb8 <_realloc_r+0x34>
 800ceb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ceb6:	d812      	bhi.n	800cede <_realloc_r+0x5a>
 800ceb8:	4621      	mov	r1, r4
 800ceba:	4640      	mov	r0, r8
 800cebc:	f001 ff32 	bl	800ed24 <_malloc_r>
 800cec0:	4605      	mov	r5, r0
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d0ed      	beq.n	800cea2 <_realloc_r+0x1e>
 800cec6:	42bc      	cmp	r4, r7
 800cec8:	4622      	mov	r2, r4
 800ceca:	4631      	mov	r1, r6
 800cecc:	bf28      	it	cs
 800cece:	463a      	movcs	r2, r7
 800ced0:	f001 f823 	bl	800df1a <memcpy>
 800ced4:	4631      	mov	r1, r6
 800ced6:	4640      	mov	r0, r8
 800ced8:	f001 feb0 	bl	800ec3c <_free_r>
 800cedc:	e7e1      	b.n	800cea2 <_realloc_r+0x1e>
 800cede:	4635      	mov	r5, r6
 800cee0:	e7df      	b.n	800cea2 <_realloc_r+0x1e>

0800cee2 <__cvt>:
 800cee2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cee6:	ec55 4b10 	vmov	r4, r5, d0
 800ceea:	2d00      	cmp	r5, #0
 800ceec:	460e      	mov	r6, r1
 800ceee:	4619      	mov	r1, r3
 800cef0:	462b      	mov	r3, r5
 800cef2:	bfbb      	ittet	lt
 800cef4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cef8:	461d      	movlt	r5, r3
 800cefa:	2300      	movge	r3, #0
 800cefc:	232d      	movlt	r3, #45	; 0x2d
 800cefe:	700b      	strb	r3, [r1, #0]
 800cf00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cf06:	4691      	mov	r9, r2
 800cf08:	f023 0820 	bic.w	r8, r3, #32
 800cf0c:	bfbc      	itt	lt
 800cf0e:	4622      	movlt	r2, r4
 800cf10:	4614      	movlt	r4, r2
 800cf12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf16:	d005      	beq.n	800cf24 <__cvt+0x42>
 800cf18:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cf1c:	d100      	bne.n	800cf20 <__cvt+0x3e>
 800cf1e:	3601      	adds	r6, #1
 800cf20:	2102      	movs	r1, #2
 800cf22:	e000      	b.n	800cf26 <__cvt+0x44>
 800cf24:	2103      	movs	r1, #3
 800cf26:	ab03      	add	r3, sp, #12
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	ab02      	add	r3, sp, #8
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	ec45 4b10 	vmov	d0, r4, r5
 800cf32:	4653      	mov	r3, sl
 800cf34:	4632      	mov	r2, r6
 800cf36:	f001 f88f 	bl	800e058 <_dtoa_r>
 800cf3a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cf3e:	4607      	mov	r7, r0
 800cf40:	d102      	bne.n	800cf48 <__cvt+0x66>
 800cf42:	f019 0f01 	tst.w	r9, #1
 800cf46:	d022      	beq.n	800cf8e <__cvt+0xac>
 800cf48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf4c:	eb07 0906 	add.w	r9, r7, r6
 800cf50:	d110      	bne.n	800cf74 <__cvt+0x92>
 800cf52:	783b      	ldrb	r3, [r7, #0]
 800cf54:	2b30      	cmp	r3, #48	; 0x30
 800cf56:	d10a      	bne.n	800cf6e <__cvt+0x8c>
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7f3 fdd2 	bl	8000b08 <__aeabi_dcmpeq>
 800cf64:	b918      	cbnz	r0, 800cf6e <__cvt+0x8c>
 800cf66:	f1c6 0601 	rsb	r6, r6, #1
 800cf6a:	f8ca 6000 	str.w	r6, [sl]
 800cf6e:	f8da 3000 	ldr.w	r3, [sl]
 800cf72:	4499      	add	r9, r3
 800cf74:	2200      	movs	r2, #0
 800cf76:	2300      	movs	r3, #0
 800cf78:	4620      	mov	r0, r4
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	f7f3 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 800cf80:	b108      	cbz	r0, 800cf86 <__cvt+0xa4>
 800cf82:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf86:	2230      	movs	r2, #48	; 0x30
 800cf88:	9b03      	ldr	r3, [sp, #12]
 800cf8a:	454b      	cmp	r3, r9
 800cf8c:	d307      	bcc.n	800cf9e <__cvt+0xbc>
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf92:	1bdb      	subs	r3, r3, r7
 800cf94:	4638      	mov	r0, r7
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	b004      	add	sp, #16
 800cf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf9e:	1c59      	adds	r1, r3, #1
 800cfa0:	9103      	str	r1, [sp, #12]
 800cfa2:	701a      	strb	r2, [r3, #0]
 800cfa4:	e7f0      	b.n	800cf88 <__cvt+0xa6>

0800cfa6 <__exponent>:
 800cfa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2900      	cmp	r1, #0
 800cfac:	bfb8      	it	lt
 800cfae:	4249      	neglt	r1, r1
 800cfb0:	f803 2b02 	strb.w	r2, [r3], #2
 800cfb4:	bfb4      	ite	lt
 800cfb6:	222d      	movlt	r2, #45	; 0x2d
 800cfb8:	222b      	movge	r2, #43	; 0x2b
 800cfba:	2909      	cmp	r1, #9
 800cfbc:	7042      	strb	r2, [r0, #1]
 800cfbe:	dd2a      	ble.n	800d016 <__exponent+0x70>
 800cfc0:	f10d 0207 	add.w	r2, sp, #7
 800cfc4:	4617      	mov	r7, r2
 800cfc6:	260a      	movs	r6, #10
 800cfc8:	4694      	mov	ip, r2
 800cfca:	fb91 f5f6 	sdiv	r5, r1, r6
 800cfce:	fb06 1415 	mls	r4, r6, r5, r1
 800cfd2:	3430      	adds	r4, #48	; 0x30
 800cfd4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cfd8:	460c      	mov	r4, r1
 800cfda:	2c63      	cmp	r4, #99	; 0x63
 800cfdc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	dcf1      	bgt.n	800cfc8 <__exponent+0x22>
 800cfe4:	3130      	adds	r1, #48	; 0x30
 800cfe6:	f1ac 0402 	sub.w	r4, ip, #2
 800cfea:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cfee:	1c41      	adds	r1, r0, #1
 800cff0:	4622      	mov	r2, r4
 800cff2:	42ba      	cmp	r2, r7
 800cff4:	d30a      	bcc.n	800d00c <__exponent+0x66>
 800cff6:	f10d 0209 	add.w	r2, sp, #9
 800cffa:	eba2 020c 	sub.w	r2, r2, ip
 800cffe:	42bc      	cmp	r4, r7
 800d000:	bf88      	it	hi
 800d002:	2200      	movhi	r2, #0
 800d004:	4413      	add	r3, r2
 800d006:	1a18      	subs	r0, r3, r0
 800d008:	b003      	add	sp, #12
 800d00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d00c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d010:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d014:	e7ed      	b.n	800cff2 <__exponent+0x4c>
 800d016:	2330      	movs	r3, #48	; 0x30
 800d018:	3130      	adds	r1, #48	; 0x30
 800d01a:	7083      	strb	r3, [r0, #2]
 800d01c:	70c1      	strb	r1, [r0, #3]
 800d01e:	1d03      	adds	r3, r0, #4
 800d020:	e7f1      	b.n	800d006 <__exponent+0x60>
	...

0800d024 <_printf_float>:
 800d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d028:	ed2d 8b02 	vpush	{d8}
 800d02c:	b08d      	sub	sp, #52	; 0x34
 800d02e:	460c      	mov	r4, r1
 800d030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d034:	4616      	mov	r6, r2
 800d036:	461f      	mov	r7, r3
 800d038:	4605      	mov	r5, r0
 800d03a:	f000 fef7 	bl	800de2c <_localeconv_r>
 800d03e:	f8d0 a000 	ldr.w	sl, [r0]
 800d042:	4650      	mov	r0, sl
 800d044:	f7f3 f934 	bl	80002b0 <strlen>
 800d048:	2300      	movs	r3, #0
 800d04a:	930a      	str	r3, [sp, #40]	; 0x28
 800d04c:	6823      	ldr	r3, [r4, #0]
 800d04e:	9305      	str	r3, [sp, #20]
 800d050:	f8d8 3000 	ldr.w	r3, [r8]
 800d054:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d058:	3307      	adds	r3, #7
 800d05a:	f023 0307 	bic.w	r3, r3, #7
 800d05e:	f103 0208 	add.w	r2, r3, #8
 800d062:	f8c8 2000 	str.w	r2, [r8]
 800d066:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d06a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d06e:	9307      	str	r3, [sp, #28]
 800d070:	f8cd 8018 	str.w	r8, [sp, #24]
 800d074:	ee08 0a10 	vmov	s16, r0
 800d078:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d07c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d080:	4b9e      	ldr	r3, [pc, #632]	; (800d2fc <_printf_float+0x2d8>)
 800d082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d086:	f7f3 fd71 	bl	8000b6c <__aeabi_dcmpun>
 800d08a:	bb88      	cbnz	r0, 800d0f0 <_printf_float+0xcc>
 800d08c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d090:	4b9a      	ldr	r3, [pc, #616]	; (800d2fc <_printf_float+0x2d8>)
 800d092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d096:	f7f3 fd4b 	bl	8000b30 <__aeabi_dcmple>
 800d09a:	bb48      	cbnz	r0, 800d0f0 <_printf_float+0xcc>
 800d09c:	2200      	movs	r2, #0
 800d09e:	2300      	movs	r3, #0
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	f7f3 fd3a 	bl	8000b1c <__aeabi_dcmplt>
 800d0a8:	b110      	cbz	r0, 800d0b0 <_printf_float+0x8c>
 800d0aa:	232d      	movs	r3, #45	; 0x2d
 800d0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0b0:	4a93      	ldr	r2, [pc, #588]	; (800d300 <_printf_float+0x2dc>)
 800d0b2:	4b94      	ldr	r3, [pc, #592]	; (800d304 <_printf_float+0x2e0>)
 800d0b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d0b8:	bf94      	ite	ls
 800d0ba:	4690      	movls	r8, r2
 800d0bc:	4698      	movhi	r8, r3
 800d0be:	2303      	movs	r3, #3
 800d0c0:	6123      	str	r3, [r4, #16]
 800d0c2:	9b05      	ldr	r3, [sp, #20]
 800d0c4:	f023 0304 	bic.w	r3, r3, #4
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	f04f 0900 	mov.w	r9, #0
 800d0ce:	9700      	str	r7, [sp, #0]
 800d0d0:	4633      	mov	r3, r6
 800d0d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f000 f9da 	bl	800d490 <_printf_common>
 800d0dc:	3001      	adds	r0, #1
 800d0de:	f040 8090 	bne.w	800d202 <_printf_float+0x1de>
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0e6:	b00d      	add	sp, #52	; 0x34
 800d0e8:	ecbd 8b02 	vpop	{d8}
 800d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	4640      	mov	r0, r8
 800d0f6:	4649      	mov	r1, r9
 800d0f8:	f7f3 fd38 	bl	8000b6c <__aeabi_dcmpun>
 800d0fc:	b140      	cbz	r0, 800d110 <_printf_float+0xec>
 800d0fe:	464b      	mov	r3, r9
 800d100:	2b00      	cmp	r3, #0
 800d102:	bfbc      	itt	lt
 800d104:	232d      	movlt	r3, #45	; 0x2d
 800d106:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d10a:	4a7f      	ldr	r2, [pc, #508]	; (800d308 <_printf_float+0x2e4>)
 800d10c:	4b7f      	ldr	r3, [pc, #508]	; (800d30c <_printf_float+0x2e8>)
 800d10e:	e7d1      	b.n	800d0b4 <_printf_float+0x90>
 800d110:	6863      	ldr	r3, [r4, #4]
 800d112:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d116:	9206      	str	r2, [sp, #24]
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	d13f      	bne.n	800d19c <_printf_float+0x178>
 800d11c:	2306      	movs	r3, #6
 800d11e:	6063      	str	r3, [r4, #4]
 800d120:	9b05      	ldr	r3, [sp, #20]
 800d122:	6861      	ldr	r1, [r4, #4]
 800d124:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d128:	2300      	movs	r3, #0
 800d12a:	9303      	str	r3, [sp, #12]
 800d12c:	ab0a      	add	r3, sp, #40	; 0x28
 800d12e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d132:	ab09      	add	r3, sp, #36	; 0x24
 800d134:	ec49 8b10 	vmov	d0, r8, r9
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	6022      	str	r2, [r4, #0]
 800d13c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d140:	4628      	mov	r0, r5
 800d142:	f7ff fece 	bl	800cee2 <__cvt>
 800d146:	9b06      	ldr	r3, [sp, #24]
 800d148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d14a:	2b47      	cmp	r3, #71	; 0x47
 800d14c:	4680      	mov	r8, r0
 800d14e:	d108      	bne.n	800d162 <_printf_float+0x13e>
 800d150:	1cc8      	adds	r0, r1, #3
 800d152:	db02      	blt.n	800d15a <_printf_float+0x136>
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	4299      	cmp	r1, r3
 800d158:	dd41      	ble.n	800d1de <_printf_float+0x1ba>
 800d15a:	f1ab 0302 	sub.w	r3, fp, #2
 800d15e:	fa5f fb83 	uxtb.w	fp, r3
 800d162:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d166:	d820      	bhi.n	800d1aa <_printf_float+0x186>
 800d168:	3901      	subs	r1, #1
 800d16a:	465a      	mov	r2, fp
 800d16c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d170:	9109      	str	r1, [sp, #36]	; 0x24
 800d172:	f7ff ff18 	bl	800cfa6 <__exponent>
 800d176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d178:	1813      	adds	r3, r2, r0
 800d17a:	2a01      	cmp	r2, #1
 800d17c:	4681      	mov	r9, r0
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	dc02      	bgt.n	800d188 <_printf_float+0x164>
 800d182:	6822      	ldr	r2, [r4, #0]
 800d184:	07d2      	lsls	r2, r2, #31
 800d186:	d501      	bpl.n	800d18c <_printf_float+0x168>
 800d188:	3301      	adds	r3, #1
 800d18a:	6123      	str	r3, [r4, #16]
 800d18c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d190:	2b00      	cmp	r3, #0
 800d192:	d09c      	beq.n	800d0ce <_printf_float+0xaa>
 800d194:	232d      	movs	r3, #45	; 0x2d
 800d196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d19a:	e798      	b.n	800d0ce <_printf_float+0xaa>
 800d19c:	9a06      	ldr	r2, [sp, #24]
 800d19e:	2a47      	cmp	r2, #71	; 0x47
 800d1a0:	d1be      	bne.n	800d120 <_printf_float+0xfc>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1bc      	bne.n	800d120 <_printf_float+0xfc>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e7b9      	b.n	800d11e <_printf_float+0xfa>
 800d1aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d1ae:	d118      	bne.n	800d1e2 <_printf_float+0x1be>
 800d1b0:	2900      	cmp	r1, #0
 800d1b2:	6863      	ldr	r3, [r4, #4]
 800d1b4:	dd0b      	ble.n	800d1ce <_printf_float+0x1aa>
 800d1b6:	6121      	str	r1, [r4, #16]
 800d1b8:	b913      	cbnz	r3, 800d1c0 <_printf_float+0x19c>
 800d1ba:	6822      	ldr	r2, [r4, #0]
 800d1bc:	07d0      	lsls	r0, r2, #31
 800d1be:	d502      	bpl.n	800d1c6 <_printf_float+0x1a2>
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	440b      	add	r3, r1
 800d1c4:	6123      	str	r3, [r4, #16]
 800d1c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d1c8:	f04f 0900 	mov.w	r9, #0
 800d1cc:	e7de      	b.n	800d18c <_printf_float+0x168>
 800d1ce:	b913      	cbnz	r3, 800d1d6 <_printf_float+0x1b2>
 800d1d0:	6822      	ldr	r2, [r4, #0]
 800d1d2:	07d2      	lsls	r2, r2, #31
 800d1d4:	d501      	bpl.n	800d1da <_printf_float+0x1b6>
 800d1d6:	3302      	adds	r3, #2
 800d1d8:	e7f4      	b.n	800d1c4 <_printf_float+0x1a0>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e7f2      	b.n	800d1c4 <_printf_float+0x1a0>
 800d1de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1e4:	4299      	cmp	r1, r3
 800d1e6:	db05      	blt.n	800d1f4 <_printf_float+0x1d0>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	6121      	str	r1, [r4, #16]
 800d1ec:	07d8      	lsls	r0, r3, #31
 800d1ee:	d5ea      	bpl.n	800d1c6 <_printf_float+0x1a2>
 800d1f0:	1c4b      	adds	r3, r1, #1
 800d1f2:	e7e7      	b.n	800d1c4 <_printf_float+0x1a0>
 800d1f4:	2900      	cmp	r1, #0
 800d1f6:	bfd4      	ite	le
 800d1f8:	f1c1 0202 	rsble	r2, r1, #2
 800d1fc:	2201      	movgt	r2, #1
 800d1fe:	4413      	add	r3, r2
 800d200:	e7e0      	b.n	800d1c4 <_printf_float+0x1a0>
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	055a      	lsls	r2, r3, #21
 800d206:	d407      	bmi.n	800d218 <_printf_float+0x1f4>
 800d208:	6923      	ldr	r3, [r4, #16]
 800d20a:	4642      	mov	r2, r8
 800d20c:	4631      	mov	r1, r6
 800d20e:	4628      	mov	r0, r5
 800d210:	47b8      	blx	r7
 800d212:	3001      	adds	r0, #1
 800d214:	d12c      	bne.n	800d270 <_printf_float+0x24c>
 800d216:	e764      	b.n	800d0e2 <_printf_float+0xbe>
 800d218:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d21c:	f240 80e0 	bls.w	800d3e0 <_printf_float+0x3bc>
 800d220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d224:	2200      	movs	r2, #0
 800d226:	2300      	movs	r3, #0
 800d228:	f7f3 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d034      	beq.n	800d29a <_printf_float+0x276>
 800d230:	4a37      	ldr	r2, [pc, #220]	; (800d310 <_printf_float+0x2ec>)
 800d232:	2301      	movs	r3, #1
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	f43f af51 	beq.w	800d0e2 <_printf_float+0xbe>
 800d240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d244:	429a      	cmp	r2, r3
 800d246:	db02      	blt.n	800d24e <_printf_float+0x22a>
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	07d8      	lsls	r0, r3, #31
 800d24c:	d510      	bpl.n	800d270 <_printf_float+0x24c>
 800d24e:	ee18 3a10 	vmov	r3, s16
 800d252:	4652      	mov	r2, sl
 800d254:	4631      	mov	r1, r6
 800d256:	4628      	mov	r0, r5
 800d258:	47b8      	blx	r7
 800d25a:	3001      	adds	r0, #1
 800d25c:	f43f af41 	beq.w	800d0e2 <_printf_float+0xbe>
 800d260:	f04f 0800 	mov.w	r8, #0
 800d264:	f104 091a 	add.w	r9, r4, #26
 800d268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d26a:	3b01      	subs	r3, #1
 800d26c:	4543      	cmp	r3, r8
 800d26e:	dc09      	bgt.n	800d284 <_printf_float+0x260>
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	079b      	lsls	r3, r3, #30
 800d274:	f100 8107 	bmi.w	800d486 <_printf_float+0x462>
 800d278:	68e0      	ldr	r0, [r4, #12]
 800d27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d27c:	4298      	cmp	r0, r3
 800d27e:	bfb8      	it	lt
 800d280:	4618      	movlt	r0, r3
 800d282:	e730      	b.n	800d0e6 <_printf_float+0xc2>
 800d284:	2301      	movs	r3, #1
 800d286:	464a      	mov	r2, r9
 800d288:	4631      	mov	r1, r6
 800d28a:	4628      	mov	r0, r5
 800d28c:	47b8      	blx	r7
 800d28e:	3001      	adds	r0, #1
 800d290:	f43f af27 	beq.w	800d0e2 <_printf_float+0xbe>
 800d294:	f108 0801 	add.w	r8, r8, #1
 800d298:	e7e6      	b.n	800d268 <_printf_float+0x244>
 800d29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	dc39      	bgt.n	800d314 <_printf_float+0x2f0>
 800d2a0:	4a1b      	ldr	r2, [pc, #108]	; (800d310 <_printf_float+0x2ec>)
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	4631      	mov	r1, r6
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	47b8      	blx	r7
 800d2aa:	3001      	adds	r0, #1
 800d2ac:	f43f af19 	beq.w	800d0e2 <_printf_float+0xbe>
 800d2b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	d102      	bne.n	800d2be <_printf_float+0x29a>
 800d2b8:	6823      	ldr	r3, [r4, #0]
 800d2ba:	07d9      	lsls	r1, r3, #31
 800d2bc:	d5d8      	bpl.n	800d270 <_printf_float+0x24c>
 800d2be:	ee18 3a10 	vmov	r3, s16
 800d2c2:	4652      	mov	r2, sl
 800d2c4:	4631      	mov	r1, r6
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	47b8      	blx	r7
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	f43f af09 	beq.w	800d0e2 <_printf_float+0xbe>
 800d2d0:	f04f 0900 	mov.w	r9, #0
 800d2d4:	f104 0a1a 	add.w	sl, r4, #26
 800d2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2da:	425b      	negs	r3, r3
 800d2dc:	454b      	cmp	r3, r9
 800d2de:	dc01      	bgt.n	800d2e4 <_printf_float+0x2c0>
 800d2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2e2:	e792      	b.n	800d20a <_printf_float+0x1e6>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	4652      	mov	r2, sl
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	47b8      	blx	r7
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	f43f aef7 	beq.w	800d0e2 <_printf_float+0xbe>
 800d2f4:	f109 0901 	add.w	r9, r9, #1
 800d2f8:	e7ee      	b.n	800d2d8 <_printf_float+0x2b4>
 800d2fa:	bf00      	nop
 800d2fc:	7fefffff 	.word	0x7fefffff
 800d300:	08011924 	.word	0x08011924
 800d304:	08011928 	.word	0x08011928
 800d308:	0801192c 	.word	0x0801192c
 800d30c:	08011930 	.word	0x08011930
 800d310:	08011934 	.word	0x08011934
 800d314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d316:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d318:	429a      	cmp	r2, r3
 800d31a:	bfa8      	it	ge
 800d31c:	461a      	movge	r2, r3
 800d31e:	2a00      	cmp	r2, #0
 800d320:	4691      	mov	r9, r2
 800d322:	dc37      	bgt.n	800d394 <_printf_float+0x370>
 800d324:	f04f 0b00 	mov.w	fp, #0
 800d328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d32c:	f104 021a 	add.w	r2, r4, #26
 800d330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d332:	9305      	str	r3, [sp, #20]
 800d334:	eba3 0309 	sub.w	r3, r3, r9
 800d338:	455b      	cmp	r3, fp
 800d33a:	dc33      	bgt.n	800d3a4 <_printf_float+0x380>
 800d33c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d340:	429a      	cmp	r2, r3
 800d342:	db3b      	blt.n	800d3bc <_printf_float+0x398>
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	07da      	lsls	r2, r3, #31
 800d348:	d438      	bmi.n	800d3bc <_printf_float+0x398>
 800d34a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d34e:	eba2 0903 	sub.w	r9, r2, r3
 800d352:	9b05      	ldr	r3, [sp, #20]
 800d354:	1ad2      	subs	r2, r2, r3
 800d356:	4591      	cmp	r9, r2
 800d358:	bfa8      	it	ge
 800d35a:	4691      	movge	r9, r2
 800d35c:	f1b9 0f00 	cmp.w	r9, #0
 800d360:	dc35      	bgt.n	800d3ce <_printf_float+0x3aa>
 800d362:	f04f 0800 	mov.w	r8, #0
 800d366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d36a:	f104 0a1a 	add.w	sl, r4, #26
 800d36e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d372:	1a9b      	subs	r3, r3, r2
 800d374:	eba3 0309 	sub.w	r3, r3, r9
 800d378:	4543      	cmp	r3, r8
 800d37a:	f77f af79 	ble.w	800d270 <_printf_float+0x24c>
 800d37e:	2301      	movs	r3, #1
 800d380:	4652      	mov	r2, sl
 800d382:	4631      	mov	r1, r6
 800d384:	4628      	mov	r0, r5
 800d386:	47b8      	blx	r7
 800d388:	3001      	adds	r0, #1
 800d38a:	f43f aeaa 	beq.w	800d0e2 <_printf_float+0xbe>
 800d38e:	f108 0801 	add.w	r8, r8, #1
 800d392:	e7ec      	b.n	800d36e <_printf_float+0x34a>
 800d394:	4613      	mov	r3, r2
 800d396:	4631      	mov	r1, r6
 800d398:	4642      	mov	r2, r8
 800d39a:	4628      	mov	r0, r5
 800d39c:	47b8      	blx	r7
 800d39e:	3001      	adds	r0, #1
 800d3a0:	d1c0      	bne.n	800d324 <_printf_float+0x300>
 800d3a2:	e69e      	b.n	800d0e2 <_printf_float+0xbe>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	9205      	str	r2, [sp, #20]
 800d3ac:	47b8      	blx	r7
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	f43f ae97 	beq.w	800d0e2 <_printf_float+0xbe>
 800d3b4:	9a05      	ldr	r2, [sp, #20]
 800d3b6:	f10b 0b01 	add.w	fp, fp, #1
 800d3ba:	e7b9      	b.n	800d330 <_printf_float+0x30c>
 800d3bc:	ee18 3a10 	vmov	r3, s16
 800d3c0:	4652      	mov	r2, sl
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	47b8      	blx	r7
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	d1be      	bne.n	800d34a <_printf_float+0x326>
 800d3cc:	e689      	b.n	800d0e2 <_printf_float+0xbe>
 800d3ce:	9a05      	ldr	r2, [sp, #20]
 800d3d0:	464b      	mov	r3, r9
 800d3d2:	4442      	add	r2, r8
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	47b8      	blx	r7
 800d3da:	3001      	adds	r0, #1
 800d3dc:	d1c1      	bne.n	800d362 <_printf_float+0x33e>
 800d3de:	e680      	b.n	800d0e2 <_printf_float+0xbe>
 800d3e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3e2:	2a01      	cmp	r2, #1
 800d3e4:	dc01      	bgt.n	800d3ea <_printf_float+0x3c6>
 800d3e6:	07db      	lsls	r3, r3, #31
 800d3e8:	d53a      	bpl.n	800d460 <_printf_float+0x43c>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4642      	mov	r2, r8
 800d3ee:	4631      	mov	r1, r6
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	47b8      	blx	r7
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	f43f ae74 	beq.w	800d0e2 <_printf_float+0xbe>
 800d3fa:	ee18 3a10 	vmov	r3, s16
 800d3fe:	4652      	mov	r2, sl
 800d400:	4631      	mov	r1, r6
 800d402:	4628      	mov	r0, r5
 800d404:	47b8      	blx	r7
 800d406:	3001      	adds	r0, #1
 800d408:	f43f ae6b 	beq.w	800d0e2 <_printf_float+0xbe>
 800d40c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d410:	2200      	movs	r2, #0
 800d412:	2300      	movs	r3, #0
 800d414:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d418:	f7f3 fb76 	bl	8000b08 <__aeabi_dcmpeq>
 800d41c:	b9d8      	cbnz	r0, 800d456 <_printf_float+0x432>
 800d41e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d422:	f108 0201 	add.w	r2, r8, #1
 800d426:	4631      	mov	r1, r6
 800d428:	4628      	mov	r0, r5
 800d42a:	47b8      	blx	r7
 800d42c:	3001      	adds	r0, #1
 800d42e:	d10e      	bne.n	800d44e <_printf_float+0x42a>
 800d430:	e657      	b.n	800d0e2 <_printf_float+0xbe>
 800d432:	2301      	movs	r3, #1
 800d434:	4652      	mov	r2, sl
 800d436:	4631      	mov	r1, r6
 800d438:	4628      	mov	r0, r5
 800d43a:	47b8      	blx	r7
 800d43c:	3001      	adds	r0, #1
 800d43e:	f43f ae50 	beq.w	800d0e2 <_printf_float+0xbe>
 800d442:	f108 0801 	add.w	r8, r8, #1
 800d446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d448:	3b01      	subs	r3, #1
 800d44a:	4543      	cmp	r3, r8
 800d44c:	dcf1      	bgt.n	800d432 <_printf_float+0x40e>
 800d44e:	464b      	mov	r3, r9
 800d450:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d454:	e6da      	b.n	800d20c <_printf_float+0x1e8>
 800d456:	f04f 0800 	mov.w	r8, #0
 800d45a:	f104 0a1a 	add.w	sl, r4, #26
 800d45e:	e7f2      	b.n	800d446 <_printf_float+0x422>
 800d460:	2301      	movs	r3, #1
 800d462:	4642      	mov	r2, r8
 800d464:	e7df      	b.n	800d426 <_printf_float+0x402>
 800d466:	2301      	movs	r3, #1
 800d468:	464a      	mov	r2, r9
 800d46a:	4631      	mov	r1, r6
 800d46c:	4628      	mov	r0, r5
 800d46e:	47b8      	blx	r7
 800d470:	3001      	adds	r0, #1
 800d472:	f43f ae36 	beq.w	800d0e2 <_printf_float+0xbe>
 800d476:	f108 0801 	add.w	r8, r8, #1
 800d47a:	68e3      	ldr	r3, [r4, #12]
 800d47c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d47e:	1a5b      	subs	r3, r3, r1
 800d480:	4543      	cmp	r3, r8
 800d482:	dcf0      	bgt.n	800d466 <_printf_float+0x442>
 800d484:	e6f8      	b.n	800d278 <_printf_float+0x254>
 800d486:	f04f 0800 	mov.w	r8, #0
 800d48a:	f104 0919 	add.w	r9, r4, #25
 800d48e:	e7f4      	b.n	800d47a <_printf_float+0x456>

0800d490 <_printf_common>:
 800d490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d494:	4616      	mov	r6, r2
 800d496:	4699      	mov	r9, r3
 800d498:	688a      	ldr	r2, [r1, #8]
 800d49a:	690b      	ldr	r3, [r1, #16]
 800d49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	bfb8      	it	lt
 800d4a4:	4613      	movlt	r3, r2
 800d4a6:	6033      	str	r3, [r6, #0]
 800d4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	b10a      	cbz	r2, 800d4b6 <_printf_common+0x26>
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	6033      	str	r3, [r6, #0]
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	0699      	lsls	r1, r3, #26
 800d4ba:	bf42      	ittt	mi
 800d4bc:	6833      	ldrmi	r3, [r6, #0]
 800d4be:	3302      	addmi	r3, #2
 800d4c0:	6033      	strmi	r3, [r6, #0]
 800d4c2:	6825      	ldr	r5, [r4, #0]
 800d4c4:	f015 0506 	ands.w	r5, r5, #6
 800d4c8:	d106      	bne.n	800d4d8 <_printf_common+0x48>
 800d4ca:	f104 0a19 	add.w	sl, r4, #25
 800d4ce:	68e3      	ldr	r3, [r4, #12]
 800d4d0:	6832      	ldr	r2, [r6, #0]
 800d4d2:	1a9b      	subs	r3, r3, r2
 800d4d4:	42ab      	cmp	r3, r5
 800d4d6:	dc26      	bgt.n	800d526 <_printf_common+0x96>
 800d4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4dc:	1e13      	subs	r3, r2, #0
 800d4de:	6822      	ldr	r2, [r4, #0]
 800d4e0:	bf18      	it	ne
 800d4e2:	2301      	movne	r3, #1
 800d4e4:	0692      	lsls	r2, r2, #26
 800d4e6:	d42b      	bmi.n	800d540 <_printf_common+0xb0>
 800d4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	47c0      	blx	r8
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	d01e      	beq.n	800d534 <_printf_common+0xa4>
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	6922      	ldr	r2, [r4, #16]
 800d4fa:	f003 0306 	and.w	r3, r3, #6
 800d4fe:	2b04      	cmp	r3, #4
 800d500:	bf02      	ittt	eq
 800d502:	68e5      	ldreq	r5, [r4, #12]
 800d504:	6833      	ldreq	r3, [r6, #0]
 800d506:	1aed      	subeq	r5, r5, r3
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	bf0c      	ite	eq
 800d50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d510:	2500      	movne	r5, #0
 800d512:	4293      	cmp	r3, r2
 800d514:	bfc4      	itt	gt
 800d516:	1a9b      	subgt	r3, r3, r2
 800d518:	18ed      	addgt	r5, r5, r3
 800d51a:	2600      	movs	r6, #0
 800d51c:	341a      	adds	r4, #26
 800d51e:	42b5      	cmp	r5, r6
 800d520:	d11a      	bne.n	800d558 <_printf_common+0xc8>
 800d522:	2000      	movs	r0, #0
 800d524:	e008      	b.n	800d538 <_printf_common+0xa8>
 800d526:	2301      	movs	r3, #1
 800d528:	4652      	mov	r2, sl
 800d52a:	4649      	mov	r1, r9
 800d52c:	4638      	mov	r0, r7
 800d52e:	47c0      	blx	r8
 800d530:	3001      	adds	r0, #1
 800d532:	d103      	bne.n	800d53c <_printf_common+0xac>
 800d534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53c:	3501      	adds	r5, #1
 800d53e:	e7c6      	b.n	800d4ce <_printf_common+0x3e>
 800d540:	18e1      	adds	r1, r4, r3
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	2030      	movs	r0, #48	; 0x30
 800d546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d54a:	4422      	add	r2, r4
 800d54c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d554:	3302      	adds	r3, #2
 800d556:	e7c7      	b.n	800d4e8 <_printf_common+0x58>
 800d558:	2301      	movs	r3, #1
 800d55a:	4622      	mov	r2, r4
 800d55c:	4649      	mov	r1, r9
 800d55e:	4638      	mov	r0, r7
 800d560:	47c0      	blx	r8
 800d562:	3001      	adds	r0, #1
 800d564:	d0e6      	beq.n	800d534 <_printf_common+0xa4>
 800d566:	3601      	adds	r6, #1
 800d568:	e7d9      	b.n	800d51e <_printf_common+0x8e>
	...

0800d56c <_printf_i>:
 800d56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d570:	7e0f      	ldrb	r7, [r1, #24]
 800d572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d574:	2f78      	cmp	r7, #120	; 0x78
 800d576:	4691      	mov	r9, r2
 800d578:	4680      	mov	r8, r0
 800d57a:	460c      	mov	r4, r1
 800d57c:	469a      	mov	sl, r3
 800d57e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d582:	d807      	bhi.n	800d594 <_printf_i+0x28>
 800d584:	2f62      	cmp	r7, #98	; 0x62
 800d586:	d80a      	bhi.n	800d59e <_printf_i+0x32>
 800d588:	2f00      	cmp	r7, #0
 800d58a:	f000 80d4 	beq.w	800d736 <_printf_i+0x1ca>
 800d58e:	2f58      	cmp	r7, #88	; 0x58
 800d590:	f000 80c0 	beq.w	800d714 <_printf_i+0x1a8>
 800d594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d59c:	e03a      	b.n	800d614 <_printf_i+0xa8>
 800d59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5a2:	2b15      	cmp	r3, #21
 800d5a4:	d8f6      	bhi.n	800d594 <_printf_i+0x28>
 800d5a6:	a101      	add	r1, pc, #4	; (adr r1, 800d5ac <_printf_i+0x40>)
 800d5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5ac:	0800d605 	.word	0x0800d605
 800d5b0:	0800d619 	.word	0x0800d619
 800d5b4:	0800d595 	.word	0x0800d595
 800d5b8:	0800d595 	.word	0x0800d595
 800d5bc:	0800d595 	.word	0x0800d595
 800d5c0:	0800d595 	.word	0x0800d595
 800d5c4:	0800d619 	.word	0x0800d619
 800d5c8:	0800d595 	.word	0x0800d595
 800d5cc:	0800d595 	.word	0x0800d595
 800d5d0:	0800d595 	.word	0x0800d595
 800d5d4:	0800d595 	.word	0x0800d595
 800d5d8:	0800d71d 	.word	0x0800d71d
 800d5dc:	0800d645 	.word	0x0800d645
 800d5e0:	0800d6d7 	.word	0x0800d6d7
 800d5e4:	0800d595 	.word	0x0800d595
 800d5e8:	0800d595 	.word	0x0800d595
 800d5ec:	0800d73f 	.word	0x0800d73f
 800d5f0:	0800d595 	.word	0x0800d595
 800d5f4:	0800d645 	.word	0x0800d645
 800d5f8:	0800d595 	.word	0x0800d595
 800d5fc:	0800d595 	.word	0x0800d595
 800d600:	0800d6df 	.word	0x0800d6df
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	1d1a      	adds	r2, r3, #4
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	602a      	str	r2, [r5, #0]
 800d60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d614:	2301      	movs	r3, #1
 800d616:	e09f      	b.n	800d758 <_printf_i+0x1ec>
 800d618:	6820      	ldr	r0, [r4, #0]
 800d61a:	682b      	ldr	r3, [r5, #0]
 800d61c:	0607      	lsls	r7, r0, #24
 800d61e:	f103 0104 	add.w	r1, r3, #4
 800d622:	6029      	str	r1, [r5, #0]
 800d624:	d501      	bpl.n	800d62a <_printf_i+0xbe>
 800d626:	681e      	ldr	r6, [r3, #0]
 800d628:	e003      	b.n	800d632 <_printf_i+0xc6>
 800d62a:	0646      	lsls	r6, r0, #25
 800d62c:	d5fb      	bpl.n	800d626 <_printf_i+0xba>
 800d62e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d632:	2e00      	cmp	r6, #0
 800d634:	da03      	bge.n	800d63e <_printf_i+0xd2>
 800d636:	232d      	movs	r3, #45	; 0x2d
 800d638:	4276      	negs	r6, r6
 800d63a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d63e:	485a      	ldr	r0, [pc, #360]	; (800d7a8 <_printf_i+0x23c>)
 800d640:	230a      	movs	r3, #10
 800d642:	e012      	b.n	800d66a <_printf_i+0xfe>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	6820      	ldr	r0, [r4, #0]
 800d648:	1d19      	adds	r1, r3, #4
 800d64a:	6029      	str	r1, [r5, #0]
 800d64c:	0605      	lsls	r5, r0, #24
 800d64e:	d501      	bpl.n	800d654 <_printf_i+0xe8>
 800d650:	681e      	ldr	r6, [r3, #0]
 800d652:	e002      	b.n	800d65a <_printf_i+0xee>
 800d654:	0641      	lsls	r1, r0, #25
 800d656:	d5fb      	bpl.n	800d650 <_printf_i+0xe4>
 800d658:	881e      	ldrh	r6, [r3, #0]
 800d65a:	4853      	ldr	r0, [pc, #332]	; (800d7a8 <_printf_i+0x23c>)
 800d65c:	2f6f      	cmp	r7, #111	; 0x6f
 800d65e:	bf0c      	ite	eq
 800d660:	2308      	moveq	r3, #8
 800d662:	230a      	movne	r3, #10
 800d664:	2100      	movs	r1, #0
 800d666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d66a:	6865      	ldr	r5, [r4, #4]
 800d66c:	60a5      	str	r5, [r4, #8]
 800d66e:	2d00      	cmp	r5, #0
 800d670:	bfa2      	ittt	ge
 800d672:	6821      	ldrge	r1, [r4, #0]
 800d674:	f021 0104 	bicge.w	r1, r1, #4
 800d678:	6021      	strge	r1, [r4, #0]
 800d67a:	b90e      	cbnz	r6, 800d680 <_printf_i+0x114>
 800d67c:	2d00      	cmp	r5, #0
 800d67e:	d04b      	beq.n	800d718 <_printf_i+0x1ac>
 800d680:	4615      	mov	r5, r2
 800d682:	fbb6 f1f3 	udiv	r1, r6, r3
 800d686:	fb03 6711 	mls	r7, r3, r1, r6
 800d68a:	5dc7      	ldrb	r7, [r0, r7]
 800d68c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d690:	4637      	mov	r7, r6
 800d692:	42bb      	cmp	r3, r7
 800d694:	460e      	mov	r6, r1
 800d696:	d9f4      	bls.n	800d682 <_printf_i+0x116>
 800d698:	2b08      	cmp	r3, #8
 800d69a:	d10b      	bne.n	800d6b4 <_printf_i+0x148>
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	07de      	lsls	r6, r3, #31
 800d6a0:	d508      	bpl.n	800d6b4 <_printf_i+0x148>
 800d6a2:	6923      	ldr	r3, [r4, #16]
 800d6a4:	6861      	ldr	r1, [r4, #4]
 800d6a6:	4299      	cmp	r1, r3
 800d6a8:	bfde      	ittt	le
 800d6aa:	2330      	movle	r3, #48	; 0x30
 800d6ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d6b4:	1b52      	subs	r2, r2, r5
 800d6b6:	6122      	str	r2, [r4, #16]
 800d6b8:	f8cd a000 	str.w	sl, [sp]
 800d6bc:	464b      	mov	r3, r9
 800d6be:	aa03      	add	r2, sp, #12
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	f7ff fee4 	bl	800d490 <_printf_common>
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d14a      	bne.n	800d762 <_printf_i+0x1f6>
 800d6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6d0:	b004      	add	sp, #16
 800d6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	f043 0320 	orr.w	r3, r3, #32
 800d6dc:	6023      	str	r3, [r4, #0]
 800d6de:	4833      	ldr	r0, [pc, #204]	; (800d7ac <_printf_i+0x240>)
 800d6e0:	2778      	movs	r7, #120	; 0x78
 800d6e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	6829      	ldr	r1, [r5, #0]
 800d6ea:	061f      	lsls	r7, r3, #24
 800d6ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6f0:	d402      	bmi.n	800d6f8 <_printf_i+0x18c>
 800d6f2:	065f      	lsls	r7, r3, #25
 800d6f4:	bf48      	it	mi
 800d6f6:	b2b6      	uxthmi	r6, r6
 800d6f8:	07df      	lsls	r7, r3, #31
 800d6fa:	bf48      	it	mi
 800d6fc:	f043 0320 	orrmi.w	r3, r3, #32
 800d700:	6029      	str	r1, [r5, #0]
 800d702:	bf48      	it	mi
 800d704:	6023      	strmi	r3, [r4, #0]
 800d706:	b91e      	cbnz	r6, 800d710 <_printf_i+0x1a4>
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	f023 0320 	bic.w	r3, r3, #32
 800d70e:	6023      	str	r3, [r4, #0]
 800d710:	2310      	movs	r3, #16
 800d712:	e7a7      	b.n	800d664 <_printf_i+0xf8>
 800d714:	4824      	ldr	r0, [pc, #144]	; (800d7a8 <_printf_i+0x23c>)
 800d716:	e7e4      	b.n	800d6e2 <_printf_i+0x176>
 800d718:	4615      	mov	r5, r2
 800d71a:	e7bd      	b.n	800d698 <_printf_i+0x12c>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	6826      	ldr	r6, [r4, #0]
 800d720:	6961      	ldr	r1, [r4, #20]
 800d722:	1d18      	adds	r0, r3, #4
 800d724:	6028      	str	r0, [r5, #0]
 800d726:	0635      	lsls	r5, r6, #24
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	d501      	bpl.n	800d730 <_printf_i+0x1c4>
 800d72c:	6019      	str	r1, [r3, #0]
 800d72e:	e002      	b.n	800d736 <_printf_i+0x1ca>
 800d730:	0670      	lsls	r0, r6, #25
 800d732:	d5fb      	bpl.n	800d72c <_printf_i+0x1c0>
 800d734:	8019      	strh	r1, [r3, #0]
 800d736:	2300      	movs	r3, #0
 800d738:	6123      	str	r3, [r4, #16]
 800d73a:	4615      	mov	r5, r2
 800d73c:	e7bc      	b.n	800d6b8 <_printf_i+0x14c>
 800d73e:	682b      	ldr	r3, [r5, #0]
 800d740:	1d1a      	adds	r2, r3, #4
 800d742:	602a      	str	r2, [r5, #0]
 800d744:	681d      	ldr	r5, [r3, #0]
 800d746:	6862      	ldr	r2, [r4, #4]
 800d748:	2100      	movs	r1, #0
 800d74a:	4628      	mov	r0, r5
 800d74c:	f7f2 fd60 	bl	8000210 <memchr>
 800d750:	b108      	cbz	r0, 800d756 <_printf_i+0x1ea>
 800d752:	1b40      	subs	r0, r0, r5
 800d754:	6060      	str	r0, [r4, #4]
 800d756:	6863      	ldr	r3, [r4, #4]
 800d758:	6123      	str	r3, [r4, #16]
 800d75a:	2300      	movs	r3, #0
 800d75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d760:	e7aa      	b.n	800d6b8 <_printf_i+0x14c>
 800d762:	6923      	ldr	r3, [r4, #16]
 800d764:	462a      	mov	r2, r5
 800d766:	4649      	mov	r1, r9
 800d768:	4640      	mov	r0, r8
 800d76a:	47d0      	blx	sl
 800d76c:	3001      	adds	r0, #1
 800d76e:	d0ad      	beq.n	800d6cc <_printf_i+0x160>
 800d770:	6823      	ldr	r3, [r4, #0]
 800d772:	079b      	lsls	r3, r3, #30
 800d774:	d413      	bmi.n	800d79e <_printf_i+0x232>
 800d776:	68e0      	ldr	r0, [r4, #12]
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	4298      	cmp	r0, r3
 800d77c:	bfb8      	it	lt
 800d77e:	4618      	movlt	r0, r3
 800d780:	e7a6      	b.n	800d6d0 <_printf_i+0x164>
 800d782:	2301      	movs	r3, #1
 800d784:	4632      	mov	r2, r6
 800d786:	4649      	mov	r1, r9
 800d788:	4640      	mov	r0, r8
 800d78a:	47d0      	blx	sl
 800d78c:	3001      	adds	r0, #1
 800d78e:	d09d      	beq.n	800d6cc <_printf_i+0x160>
 800d790:	3501      	adds	r5, #1
 800d792:	68e3      	ldr	r3, [r4, #12]
 800d794:	9903      	ldr	r1, [sp, #12]
 800d796:	1a5b      	subs	r3, r3, r1
 800d798:	42ab      	cmp	r3, r5
 800d79a:	dcf2      	bgt.n	800d782 <_printf_i+0x216>
 800d79c:	e7eb      	b.n	800d776 <_printf_i+0x20a>
 800d79e:	2500      	movs	r5, #0
 800d7a0:	f104 0619 	add.w	r6, r4, #25
 800d7a4:	e7f5      	b.n	800d792 <_printf_i+0x226>
 800d7a6:	bf00      	nop
 800d7a8:	08011936 	.word	0x08011936
 800d7ac:	08011947 	.word	0x08011947

0800d7b0 <_scanf_float>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	b087      	sub	sp, #28
 800d7b6:	4617      	mov	r7, r2
 800d7b8:	9303      	str	r3, [sp, #12]
 800d7ba:	688b      	ldr	r3, [r1, #8]
 800d7bc:	1e5a      	subs	r2, r3, #1
 800d7be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d7c2:	bf83      	ittte	hi
 800d7c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d7c8:	195b      	addhi	r3, r3, r5
 800d7ca:	9302      	strhi	r3, [sp, #8]
 800d7cc:	2300      	movls	r3, #0
 800d7ce:	bf86      	itte	hi
 800d7d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d7d4:	608b      	strhi	r3, [r1, #8]
 800d7d6:	9302      	strls	r3, [sp, #8]
 800d7d8:	680b      	ldr	r3, [r1, #0]
 800d7da:	468b      	mov	fp, r1
 800d7dc:	2500      	movs	r5, #0
 800d7de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d7e2:	f84b 3b1c 	str.w	r3, [fp], #28
 800d7e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	460c      	mov	r4, r1
 800d7ee:	465e      	mov	r6, fp
 800d7f0:	46aa      	mov	sl, r5
 800d7f2:	46a9      	mov	r9, r5
 800d7f4:	9501      	str	r5, [sp, #4]
 800d7f6:	68a2      	ldr	r2, [r4, #8]
 800d7f8:	b152      	cbz	r2, 800d810 <_scanf_float+0x60>
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b4e      	cmp	r3, #78	; 0x4e
 800d800:	d864      	bhi.n	800d8cc <_scanf_float+0x11c>
 800d802:	2b40      	cmp	r3, #64	; 0x40
 800d804:	d83c      	bhi.n	800d880 <_scanf_float+0xd0>
 800d806:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d80a:	b2c8      	uxtb	r0, r1
 800d80c:	280e      	cmp	r0, #14
 800d80e:	d93a      	bls.n	800d886 <_scanf_float+0xd6>
 800d810:	f1b9 0f00 	cmp.w	r9, #0
 800d814:	d003      	beq.n	800d81e <_scanf_float+0x6e>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d822:	f1ba 0f01 	cmp.w	sl, #1
 800d826:	f200 8113 	bhi.w	800da50 <_scanf_float+0x2a0>
 800d82a:	455e      	cmp	r6, fp
 800d82c:	f200 8105 	bhi.w	800da3a <_scanf_float+0x28a>
 800d830:	2501      	movs	r5, #1
 800d832:	4628      	mov	r0, r5
 800d834:	b007      	add	sp, #28
 800d836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d83a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d83e:	2a0d      	cmp	r2, #13
 800d840:	d8e6      	bhi.n	800d810 <_scanf_float+0x60>
 800d842:	a101      	add	r1, pc, #4	; (adr r1, 800d848 <_scanf_float+0x98>)
 800d844:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d848:	0800d987 	.word	0x0800d987
 800d84c:	0800d811 	.word	0x0800d811
 800d850:	0800d811 	.word	0x0800d811
 800d854:	0800d811 	.word	0x0800d811
 800d858:	0800d9e7 	.word	0x0800d9e7
 800d85c:	0800d9bf 	.word	0x0800d9bf
 800d860:	0800d811 	.word	0x0800d811
 800d864:	0800d811 	.word	0x0800d811
 800d868:	0800d995 	.word	0x0800d995
 800d86c:	0800d811 	.word	0x0800d811
 800d870:	0800d811 	.word	0x0800d811
 800d874:	0800d811 	.word	0x0800d811
 800d878:	0800d811 	.word	0x0800d811
 800d87c:	0800d94d 	.word	0x0800d94d
 800d880:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d884:	e7db      	b.n	800d83e <_scanf_float+0x8e>
 800d886:	290e      	cmp	r1, #14
 800d888:	d8c2      	bhi.n	800d810 <_scanf_float+0x60>
 800d88a:	a001      	add	r0, pc, #4	; (adr r0, 800d890 <_scanf_float+0xe0>)
 800d88c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d890:	0800d93f 	.word	0x0800d93f
 800d894:	0800d811 	.word	0x0800d811
 800d898:	0800d93f 	.word	0x0800d93f
 800d89c:	0800d9d3 	.word	0x0800d9d3
 800d8a0:	0800d811 	.word	0x0800d811
 800d8a4:	0800d8ed 	.word	0x0800d8ed
 800d8a8:	0800d929 	.word	0x0800d929
 800d8ac:	0800d929 	.word	0x0800d929
 800d8b0:	0800d929 	.word	0x0800d929
 800d8b4:	0800d929 	.word	0x0800d929
 800d8b8:	0800d929 	.word	0x0800d929
 800d8bc:	0800d929 	.word	0x0800d929
 800d8c0:	0800d929 	.word	0x0800d929
 800d8c4:	0800d929 	.word	0x0800d929
 800d8c8:	0800d929 	.word	0x0800d929
 800d8cc:	2b6e      	cmp	r3, #110	; 0x6e
 800d8ce:	d809      	bhi.n	800d8e4 <_scanf_float+0x134>
 800d8d0:	2b60      	cmp	r3, #96	; 0x60
 800d8d2:	d8b2      	bhi.n	800d83a <_scanf_float+0x8a>
 800d8d4:	2b54      	cmp	r3, #84	; 0x54
 800d8d6:	d077      	beq.n	800d9c8 <_scanf_float+0x218>
 800d8d8:	2b59      	cmp	r3, #89	; 0x59
 800d8da:	d199      	bne.n	800d810 <_scanf_float+0x60>
 800d8dc:	2d07      	cmp	r5, #7
 800d8de:	d197      	bne.n	800d810 <_scanf_float+0x60>
 800d8e0:	2508      	movs	r5, #8
 800d8e2:	e029      	b.n	800d938 <_scanf_float+0x188>
 800d8e4:	2b74      	cmp	r3, #116	; 0x74
 800d8e6:	d06f      	beq.n	800d9c8 <_scanf_float+0x218>
 800d8e8:	2b79      	cmp	r3, #121	; 0x79
 800d8ea:	e7f6      	b.n	800d8da <_scanf_float+0x12a>
 800d8ec:	6821      	ldr	r1, [r4, #0]
 800d8ee:	05c8      	lsls	r0, r1, #23
 800d8f0:	d51a      	bpl.n	800d928 <_scanf_float+0x178>
 800d8f2:	9b02      	ldr	r3, [sp, #8]
 800d8f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d8f8:	6021      	str	r1, [r4, #0]
 800d8fa:	f109 0901 	add.w	r9, r9, #1
 800d8fe:	b11b      	cbz	r3, 800d908 <_scanf_float+0x158>
 800d900:	3b01      	subs	r3, #1
 800d902:	3201      	adds	r2, #1
 800d904:	9302      	str	r3, [sp, #8]
 800d906:	60a2      	str	r2, [r4, #8]
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	60a3      	str	r3, [r4, #8]
 800d90e:	6923      	ldr	r3, [r4, #16]
 800d910:	3301      	adds	r3, #1
 800d912:	6123      	str	r3, [r4, #16]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	3b01      	subs	r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	607b      	str	r3, [r7, #4]
 800d91c:	f340 8084 	ble.w	800da28 <_scanf_float+0x278>
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	3301      	adds	r3, #1
 800d924:	603b      	str	r3, [r7, #0]
 800d926:	e766      	b.n	800d7f6 <_scanf_float+0x46>
 800d928:	eb1a 0f05 	cmn.w	sl, r5
 800d92c:	f47f af70 	bne.w	800d810 <_scanf_float+0x60>
 800d930:	6822      	ldr	r2, [r4, #0]
 800d932:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d936:	6022      	str	r2, [r4, #0]
 800d938:	f806 3b01 	strb.w	r3, [r6], #1
 800d93c:	e7e4      	b.n	800d908 <_scanf_float+0x158>
 800d93e:	6822      	ldr	r2, [r4, #0]
 800d940:	0610      	lsls	r0, r2, #24
 800d942:	f57f af65 	bpl.w	800d810 <_scanf_float+0x60>
 800d946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d94a:	e7f4      	b.n	800d936 <_scanf_float+0x186>
 800d94c:	f1ba 0f00 	cmp.w	sl, #0
 800d950:	d10e      	bne.n	800d970 <_scanf_float+0x1c0>
 800d952:	f1b9 0f00 	cmp.w	r9, #0
 800d956:	d10e      	bne.n	800d976 <_scanf_float+0x1c6>
 800d958:	6822      	ldr	r2, [r4, #0]
 800d95a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d95e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d962:	d108      	bne.n	800d976 <_scanf_float+0x1c6>
 800d964:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d968:	6022      	str	r2, [r4, #0]
 800d96a:	f04f 0a01 	mov.w	sl, #1
 800d96e:	e7e3      	b.n	800d938 <_scanf_float+0x188>
 800d970:	f1ba 0f02 	cmp.w	sl, #2
 800d974:	d055      	beq.n	800da22 <_scanf_float+0x272>
 800d976:	2d01      	cmp	r5, #1
 800d978:	d002      	beq.n	800d980 <_scanf_float+0x1d0>
 800d97a:	2d04      	cmp	r5, #4
 800d97c:	f47f af48 	bne.w	800d810 <_scanf_float+0x60>
 800d980:	3501      	adds	r5, #1
 800d982:	b2ed      	uxtb	r5, r5
 800d984:	e7d8      	b.n	800d938 <_scanf_float+0x188>
 800d986:	f1ba 0f01 	cmp.w	sl, #1
 800d98a:	f47f af41 	bne.w	800d810 <_scanf_float+0x60>
 800d98e:	f04f 0a02 	mov.w	sl, #2
 800d992:	e7d1      	b.n	800d938 <_scanf_float+0x188>
 800d994:	b97d      	cbnz	r5, 800d9b6 <_scanf_float+0x206>
 800d996:	f1b9 0f00 	cmp.w	r9, #0
 800d99a:	f47f af3c 	bne.w	800d816 <_scanf_float+0x66>
 800d99e:	6822      	ldr	r2, [r4, #0]
 800d9a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d9a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d9a8:	f47f af39 	bne.w	800d81e <_scanf_float+0x6e>
 800d9ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d9b0:	6022      	str	r2, [r4, #0]
 800d9b2:	2501      	movs	r5, #1
 800d9b4:	e7c0      	b.n	800d938 <_scanf_float+0x188>
 800d9b6:	2d03      	cmp	r5, #3
 800d9b8:	d0e2      	beq.n	800d980 <_scanf_float+0x1d0>
 800d9ba:	2d05      	cmp	r5, #5
 800d9bc:	e7de      	b.n	800d97c <_scanf_float+0x1cc>
 800d9be:	2d02      	cmp	r5, #2
 800d9c0:	f47f af26 	bne.w	800d810 <_scanf_float+0x60>
 800d9c4:	2503      	movs	r5, #3
 800d9c6:	e7b7      	b.n	800d938 <_scanf_float+0x188>
 800d9c8:	2d06      	cmp	r5, #6
 800d9ca:	f47f af21 	bne.w	800d810 <_scanf_float+0x60>
 800d9ce:	2507      	movs	r5, #7
 800d9d0:	e7b2      	b.n	800d938 <_scanf_float+0x188>
 800d9d2:	6822      	ldr	r2, [r4, #0]
 800d9d4:	0591      	lsls	r1, r2, #22
 800d9d6:	f57f af1b 	bpl.w	800d810 <_scanf_float+0x60>
 800d9da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d9de:	6022      	str	r2, [r4, #0]
 800d9e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d9e4:	e7a8      	b.n	800d938 <_scanf_float+0x188>
 800d9e6:	6822      	ldr	r2, [r4, #0]
 800d9e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d9ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d9f0:	d006      	beq.n	800da00 <_scanf_float+0x250>
 800d9f2:	0550      	lsls	r0, r2, #21
 800d9f4:	f57f af0c 	bpl.w	800d810 <_scanf_float+0x60>
 800d9f8:	f1b9 0f00 	cmp.w	r9, #0
 800d9fc:	f43f af0f 	beq.w	800d81e <_scanf_float+0x6e>
 800da00:	0591      	lsls	r1, r2, #22
 800da02:	bf58      	it	pl
 800da04:	9901      	ldrpl	r1, [sp, #4]
 800da06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da0a:	bf58      	it	pl
 800da0c:	eba9 0101 	subpl.w	r1, r9, r1
 800da10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800da14:	bf58      	it	pl
 800da16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800da1a:	6022      	str	r2, [r4, #0]
 800da1c:	f04f 0900 	mov.w	r9, #0
 800da20:	e78a      	b.n	800d938 <_scanf_float+0x188>
 800da22:	f04f 0a03 	mov.w	sl, #3
 800da26:	e787      	b.n	800d938 <_scanf_float+0x188>
 800da28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da2c:	4639      	mov	r1, r7
 800da2e:	4640      	mov	r0, r8
 800da30:	4798      	blx	r3
 800da32:	2800      	cmp	r0, #0
 800da34:	f43f aedf 	beq.w	800d7f6 <_scanf_float+0x46>
 800da38:	e6ea      	b.n	800d810 <_scanf_float+0x60>
 800da3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da42:	463a      	mov	r2, r7
 800da44:	4640      	mov	r0, r8
 800da46:	4798      	blx	r3
 800da48:	6923      	ldr	r3, [r4, #16]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	6123      	str	r3, [r4, #16]
 800da4e:	e6ec      	b.n	800d82a <_scanf_float+0x7a>
 800da50:	1e6b      	subs	r3, r5, #1
 800da52:	2b06      	cmp	r3, #6
 800da54:	d825      	bhi.n	800daa2 <_scanf_float+0x2f2>
 800da56:	2d02      	cmp	r5, #2
 800da58:	d836      	bhi.n	800dac8 <_scanf_float+0x318>
 800da5a:	455e      	cmp	r6, fp
 800da5c:	f67f aee8 	bls.w	800d830 <_scanf_float+0x80>
 800da60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da68:	463a      	mov	r2, r7
 800da6a:	4640      	mov	r0, r8
 800da6c:	4798      	blx	r3
 800da6e:	6923      	ldr	r3, [r4, #16]
 800da70:	3b01      	subs	r3, #1
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	e7f1      	b.n	800da5a <_scanf_float+0x2aa>
 800da76:	9802      	ldr	r0, [sp, #8]
 800da78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800da80:	9002      	str	r0, [sp, #8]
 800da82:	463a      	mov	r2, r7
 800da84:	4640      	mov	r0, r8
 800da86:	4798      	blx	r3
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	6123      	str	r3, [r4, #16]
 800da8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800da92:	fa5f fa8a 	uxtb.w	sl, sl
 800da96:	f1ba 0f02 	cmp.w	sl, #2
 800da9a:	d1ec      	bne.n	800da76 <_scanf_float+0x2c6>
 800da9c:	3d03      	subs	r5, #3
 800da9e:	b2ed      	uxtb	r5, r5
 800daa0:	1b76      	subs	r6, r6, r5
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	05da      	lsls	r2, r3, #23
 800daa6:	d52f      	bpl.n	800db08 <_scanf_float+0x358>
 800daa8:	055b      	lsls	r3, r3, #21
 800daaa:	d510      	bpl.n	800dace <_scanf_float+0x31e>
 800daac:	455e      	cmp	r6, fp
 800daae:	f67f aebf 	bls.w	800d830 <_scanf_float+0x80>
 800dab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800daba:	463a      	mov	r2, r7
 800dabc:	4640      	mov	r0, r8
 800dabe:	4798      	blx	r3
 800dac0:	6923      	ldr	r3, [r4, #16]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	6123      	str	r3, [r4, #16]
 800dac6:	e7f1      	b.n	800daac <_scanf_float+0x2fc>
 800dac8:	46aa      	mov	sl, r5
 800daca:	9602      	str	r6, [sp, #8]
 800dacc:	e7df      	b.n	800da8e <_scanf_float+0x2de>
 800dace:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dad2:	6923      	ldr	r3, [r4, #16]
 800dad4:	2965      	cmp	r1, #101	; 0x65
 800dad6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800dada:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800dade:	6123      	str	r3, [r4, #16]
 800dae0:	d00c      	beq.n	800dafc <_scanf_float+0x34c>
 800dae2:	2945      	cmp	r1, #69	; 0x45
 800dae4:	d00a      	beq.n	800dafc <_scanf_float+0x34c>
 800dae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800daea:	463a      	mov	r2, r7
 800daec:	4640      	mov	r0, r8
 800daee:	4798      	blx	r3
 800daf0:	6923      	ldr	r3, [r4, #16]
 800daf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	1eb5      	subs	r5, r6, #2
 800dafa:	6123      	str	r3, [r4, #16]
 800dafc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db00:	463a      	mov	r2, r7
 800db02:	4640      	mov	r0, r8
 800db04:	4798      	blx	r3
 800db06:	462e      	mov	r6, r5
 800db08:	6825      	ldr	r5, [r4, #0]
 800db0a:	f015 0510 	ands.w	r5, r5, #16
 800db0e:	d158      	bne.n	800dbc2 <_scanf_float+0x412>
 800db10:	7035      	strb	r5, [r6, #0]
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800db18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db1c:	d11c      	bne.n	800db58 <_scanf_float+0x3a8>
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	454b      	cmp	r3, r9
 800db22:	eba3 0209 	sub.w	r2, r3, r9
 800db26:	d124      	bne.n	800db72 <_scanf_float+0x3c2>
 800db28:	2200      	movs	r2, #0
 800db2a:	4659      	mov	r1, fp
 800db2c:	4640      	mov	r0, r8
 800db2e:	f002 fc47 	bl	80103c0 <_strtod_r>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	6821      	ldr	r1, [r4, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f011 0f02 	tst.w	r1, #2
 800db3c:	ec57 6b10 	vmov	r6, r7, d0
 800db40:	f103 0204 	add.w	r2, r3, #4
 800db44:	d020      	beq.n	800db88 <_scanf_float+0x3d8>
 800db46:	9903      	ldr	r1, [sp, #12]
 800db48:	600a      	str	r2, [r1, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	e9c3 6700 	strd	r6, r7, [r3]
 800db50:	68e3      	ldr	r3, [r4, #12]
 800db52:	3301      	adds	r3, #1
 800db54:	60e3      	str	r3, [r4, #12]
 800db56:	e66c      	b.n	800d832 <_scanf_float+0x82>
 800db58:	9b04      	ldr	r3, [sp, #16]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d0e4      	beq.n	800db28 <_scanf_float+0x378>
 800db5e:	9905      	ldr	r1, [sp, #20]
 800db60:	230a      	movs	r3, #10
 800db62:	462a      	mov	r2, r5
 800db64:	3101      	adds	r1, #1
 800db66:	4640      	mov	r0, r8
 800db68:	f002 fcb2 	bl	80104d0 <_strtol_r>
 800db6c:	9b04      	ldr	r3, [sp, #16]
 800db6e:	9e05      	ldr	r6, [sp, #20]
 800db70:	1ac2      	subs	r2, r0, r3
 800db72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800db76:	429e      	cmp	r6, r3
 800db78:	bf28      	it	cs
 800db7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800db7e:	4912      	ldr	r1, [pc, #72]	; (800dbc8 <_scanf_float+0x418>)
 800db80:	4630      	mov	r0, r6
 800db82:	f000 f8e7 	bl	800dd54 <siprintf>
 800db86:	e7cf      	b.n	800db28 <_scanf_float+0x378>
 800db88:	f011 0f04 	tst.w	r1, #4
 800db8c:	9903      	ldr	r1, [sp, #12]
 800db8e:	600a      	str	r2, [r1, #0]
 800db90:	d1db      	bne.n	800db4a <_scanf_float+0x39a>
 800db92:	f8d3 8000 	ldr.w	r8, [r3]
 800db96:	ee10 2a10 	vmov	r2, s0
 800db9a:	ee10 0a10 	vmov	r0, s0
 800db9e:	463b      	mov	r3, r7
 800dba0:	4639      	mov	r1, r7
 800dba2:	f7f2 ffe3 	bl	8000b6c <__aeabi_dcmpun>
 800dba6:	b128      	cbz	r0, 800dbb4 <_scanf_float+0x404>
 800dba8:	4808      	ldr	r0, [pc, #32]	; (800dbcc <_scanf_float+0x41c>)
 800dbaa:	f000 f9c5 	bl	800df38 <nanf>
 800dbae:	ed88 0a00 	vstr	s0, [r8]
 800dbb2:	e7cd      	b.n	800db50 <_scanf_float+0x3a0>
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	f7f3 f836 	bl	8000c28 <__aeabi_d2f>
 800dbbc:	f8c8 0000 	str.w	r0, [r8]
 800dbc0:	e7c6      	b.n	800db50 <_scanf_float+0x3a0>
 800dbc2:	2500      	movs	r5, #0
 800dbc4:	e635      	b.n	800d832 <_scanf_float+0x82>
 800dbc6:	bf00      	nop
 800dbc8:	08011958 	.word	0x08011958
 800dbcc:	08011ced 	.word	0x08011ced

0800dbd0 <std>:
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	e9c0 3300 	strd	r3, r3, [r0]
 800dbda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbde:	6083      	str	r3, [r0, #8]
 800dbe0:	8181      	strh	r1, [r0, #12]
 800dbe2:	6643      	str	r3, [r0, #100]	; 0x64
 800dbe4:	81c2      	strh	r2, [r0, #14]
 800dbe6:	6183      	str	r3, [r0, #24]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	2208      	movs	r2, #8
 800dbec:	305c      	adds	r0, #92	; 0x5c
 800dbee:	f000 f914 	bl	800de1a <memset>
 800dbf2:	4b0d      	ldr	r3, [pc, #52]	; (800dc28 <std+0x58>)
 800dbf4:	6263      	str	r3, [r4, #36]	; 0x24
 800dbf6:	4b0d      	ldr	r3, [pc, #52]	; (800dc2c <std+0x5c>)
 800dbf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbfa:	4b0d      	ldr	r3, [pc, #52]	; (800dc30 <std+0x60>)
 800dbfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbfe:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <std+0x64>)
 800dc00:	6323      	str	r3, [r4, #48]	; 0x30
 800dc02:	4b0d      	ldr	r3, [pc, #52]	; (800dc38 <std+0x68>)
 800dc04:	6224      	str	r4, [r4, #32]
 800dc06:	429c      	cmp	r4, r3
 800dc08:	d006      	beq.n	800dc18 <std+0x48>
 800dc0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dc0e:	4294      	cmp	r4, r2
 800dc10:	d002      	beq.n	800dc18 <std+0x48>
 800dc12:	33d0      	adds	r3, #208	; 0xd0
 800dc14:	429c      	cmp	r4, r3
 800dc16:	d105      	bne.n	800dc24 <std+0x54>
 800dc18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc20:	f000 b978 	b.w	800df14 <__retarget_lock_init_recursive>
 800dc24:	bd10      	pop	{r4, pc}
 800dc26:	bf00      	nop
 800dc28:	0800dd95 	.word	0x0800dd95
 800dc2c:	0800ddb7 	.word	0x0800ddb7
 800dc30:	0800ddef 	.word	0x0800ddef
 800dc34:	0800de13 	.word	0x0800de13
 800dc38:	20001708 	.word	0x20001708

0800dc3c <stdio_exit_handler>:
 800dc3c:	4a02      	ldr	r2, [pc, #8]	; (800dc48 <stdio_exit_handler+0xc>)
 800dc3e:	4903      	ldr	r1, [pc, #12]	; (800dc4c <stdio_exit_handler+0x10>)
 800dc40:	4803      	ldr	r0, [pc, #12]	; (800dc50 <stdio_exit_handler+0x14>)
 800dc42:	f000 b869 	b.w	800dd18 <_fwalk_sglue>
 800dc46:	bf00      	nop
 800dc48:	20000010 	.word	0x20000010
 800dc4c:	08010891 	.word	0x08010891
 800dc50:	2000001c 	.word	0x2000001c

0800dc54 <cleanup_stdio>:
 800dc54:	6841      	ldr	r1, [r0, #4]
 800dc56:	4b0c      	ldr	r3, [pc, #48]	; (800dc88 <cleanup_stdio+0x34>)
 800dc58:	4299      	cmp	r1, r3
 800dc5a:	b510      	push	{r4, lr}
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	d001      	beq.n	800dc64 <cleanup_stdio+0x10>
 800dc60:	f002 fe16 	bl	8010890 <_fflush_r>
 800dc64:	68a1      	ldr	r1, [r4, #8]
 800dc66:	4b09      	ldr	r3, [pc, #36]	; (800dc8c <cleanup_stdio+0x38>)
 800dc68:	4299      	cmp	r1, r3
 800dc6a:	d002      	beq.n	800dc72 <cleanup_stdio+0x1e>
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	f002 fe0f 	bl	8010890 <_fflush_r>
 800dc72:	68e1      	ldr	r1, [r4, #12]
 800dc74:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <cleanup_stdio+0x3c>)
 800dc76:	4299      	cmp	r1, r3
 800dc78:	d004      	beq.n	800dc84 <cleanup_stdio+0x30>
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc80:	f002 be06 	b.w	8010890 <_fflush_r>
 800dc84:	bd10      	pop	{r4, pc}
 800dc86:	bf00      	nop
 800dc88:	20001708 	.word	0x20001708
 800dc8c:	20001770 	.word	0x20001770
 800dc90:	200017d8 	.word	0x200017d8

0800dc94 <global_stdio_init.part.0>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	4b0b      	ldr	r3, [pc, #44]	; (800dcc4 <global_stdio_init.part.0+0x30>)
 800dc98:	4c0b      	ldr	r4, [pc, #44]	; (800dcc8 <global_stdio_init.part.0+0x34>)
 800dc9a:	4a0c      	ldr	r2, [pc, #48]	; (800dccc <global_stdio_init.part.0+0x38>)
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	4620      	mov	r0, r4
 800dca0:	2200      	movs	r2, #0
 800dca2:	2104      	movs	r1, #4
 800dca4:	f7ff ff94 	bl	800dbd0 <std>
 800dca8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dcac:	2201      	movs	r2, #1
 800dcae:	2109      	movs	r1, #9
 800dcb0:	f7ff ff8e 	bl	800dbd0 <std>
 800dcb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dcb8:	2202      	movs	r2, #2
 800dcba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcbe:	2112      	movs	r1, #18
 800dcc0:	f7ff bf86 	b.w	800dbd0 <std>
 800dcc4:	20001840 	.word	0x20001840
 800dcc8:	20001708 	.word	0x20001708
 800dccc:	0800dc3d 	.word	0x0800dc3d

0800dcd0 <__sfp_lock_acquire>:
 800dcd0:	4801      	ldr	r0, [pc, #4]	; (800dcd8 <__sfp_lock_acquire+0x8>)
 800dcd2:	f000 b920 	b.w	800df16 <__retarget_lock_acquire_recursive>
 800dcd6:	bf00      	nop
 800dcd8:	20001849 	.word	0x20001849

0800dcdc <__sfp_lock_release>:
 800dcdc:	4801      	ldr	r0, [pc, #4]	; (800dce4 <__sfp_lock_release+0x8>)
 800dcde:	f000 b91b 	b.w	800df18 <__retarget_lock_release_recursive>
 800dce2:	bf00      	nop
 800dce4:	20001849 	.word	0x20001849

0800dce8 <__sinit>:
 800dce8:	b510      	push	{r4, lr}
 800dcea:	4604      	mov	r4, r0
 800dcec:	f7ff fff0 	bl	800dcd0 <__sfp_lock_acquire>
 800dcf0:	6a23      	ldr	r3, [r4, #32]
 800dcf2:	b11b      	cbz	r3, 800dcfc <__sinit+0x14>
 800dcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcf8:	f7ff bff0 	b.w	800dcdc <__sfp_lock_release>
 800dcfc:	4b04      	ldr	r3, [pc, #16]	; (800dd10 <__sinit+0x28>)
 800dcfe:	6223      	str	r3, [r4, #32]
 800dd00:	4b04      	ldr	r3, [pc, #16]	; (800dd14 <__sinit+0x2c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1f5      	bne.n	800dcf4 <__sinit+0xc>
 800dd08:	f7ff ffc4 	bl	800dc94 <global_stdio_init.part.0>
 800dd0c:	e7f2      	b.n	800dcf4 <__sinit+0xc>
 800dd0e:	bf00      	nop
 800dd10:	0800dc55 	.word	0x0800dc55
 800dd14:	20001840 	.word	0x20001840

0800dd18 <_fwalk_sglue>:
 800dd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd1c:	4607      	mov	r7, r0
 800dd1e:	4688      	mov	r8, r1
 800dd20:	4614      	mov	r4, r2
 800dd22:	2600      	movs	r6, #0
 800dd24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd28:	f1b9 0901 	subs.w	r9, r9, #1
 800dd2c:	d505      	bpl.n	800dd3a <_fwalk_sglue+0x22>
 800dd2e:	6824      	ldr	r4, [r4, #0]
 800dd30:	2c00      	cmp	r4, #0
 800dd32:	d1f7      	bne.n	800dd24 <_fwalk_sglue+0xc>
 800dd34:	4630      	mov	r0, r6
 800dd36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd3a:	89ab      	ldrh	r3, [r5, #12]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d907      	bls.n	800dd50 <_fwalk_sglue+0x38>
 800dd40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd44:	3301      	adds	r3, #1
 800dd46:	d003      	beq.n	800dd50 <_fwalk_sglue+0x38>
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	47c0      	blx	r8
 800dd4e:	4306      	orrs	r6, r0
 800dd50:	3568      	adds	r5, #104	; 0x68
 800dd52:	e7e9      	b.n	800dd28 <_fwalk_sglue+0x10>

0800dd54 <siprintf>:
 800dd54:	b40e      	push	{r1, r2, r3}
 800dd56:	b500      	push	{lr}
 800dd58:	b09c      	sub	sp, #112	; 0x70
 800dd5a:	ab1d      	add	r3, sp, #116	; 0x74
 800dd5c:	9002      	str	r0, [sp, #8]
 800dd5e:	9006      	str	r0, [sp, #24]
 800dd60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd64:	4809      	ldr	r0, [pc, #36]	; (800dd8c <siprintf+0x38>)
 800dd66:	9107      	str	r1, [sp, #28]
 800dd68:	9104      	str	r1, [sp, #16]
 800dd6a:	4909      	ldr	r1, [pc, #36]	; (800dd90 <siprintf+0x3c>)
 800dd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd70:	9105      	str	r1, [sp, #20]
 800dd72:	6800      	ldr	r0, [r0, #0]
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	a902      	add	r1, sp, #8
 800dd78:	f002 fc06 	bl	8010588 <_svfiprintf_r>
 800dd7c:	9b02      	ldr	r3, [sp, #8]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	701a      	strb	r2, [r3, #0]
 800dd82:	b01c      	add	sp, #112	; 0x70
 800dd84:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd88:	b003      	add	sp, #12
 800dd8a:	4770      	bx	lr
 800dd8c:	20000068 	.word	0x20000068
 800dd90:	ffff0208 	.word	0xffff0208

0800dd94 <__sread>:
 800dd94:	b510      	push	{r4, lr}
 800dd96:	460c      	mov	r4, r1
 800dd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd9c:	f000 f86c 	bl	800de78 <_read_r>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	bfab      	itete	ge
 800dda4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dda6:	89a3      	ldrhlt	r3, [r4, #12]
 800dda8:	181b      	addge	r3, r3, r0
 800ddaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddae:	bfac      	ite	ge
 800ddb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddb2:	81a3      	strhlt	r3, [r4, #12]
 800ddb4:	bd10      	pop	{r4, pc}

0800ddb6 <__swrite>:
 800ddb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddba:	461f      	mov	r7, r3
 800ddbc:	898b      	ldrh	r3, [r1, #12]
 800ddbe:	05db      	lsls	r3, r3, #23
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	4616      	mov	r6, r2
 800ddc6:	d505      	bpl.n	800ddd4 <__swrite+0x1e>
 800ddc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddcc:	2302      	movs	r3, #2
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f000 f840 	bl	800de54 <_lseek_r>
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddde:	81a3      	strh	r3, [r4, #12]
 800dde0:	4632      	mov	r2, r6
 800dde2:	463b      	mov	r3, r7
 800dde4:	4628      	mov	r0, r5
 800dde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddea:	f000 b857 	b.w	800de9c <_write_r>

0800ddee <__sseek>:
 800ddee:	b510      	push	{r4, lr}
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf6:	f000 f82d 	bl	800de54 <_lseek_r>
 800ddfa:	1c43      	adds	r3, r0, #1
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	bf15      	itete	ne
 800de00:	6560      	strne	r0, [r4, #84]	; 0x54
 800de02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de0a:	81a3      	strheq	r3, [r4, #12]
 800de0c:	bf18      	it	ne
 800de0e:	81a3      	strhne	r3, [r4, #12]
 800de10:	bd10      	pop	{r4, pc}

0800de12 <__sclose>:
 800de12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de16:	f000 b80d 	b.w	800de34 <_close_r>

0800de1a <memset>:
 800de1a:	4402      	add	r2, r0
 800de1c:	4603      	mov	r3, r0
 800de1e:	4293      	cmp	r3, r2
 800de20:	d100      	bne.n	800de24 <memset+0xa>
 800de22:	4770      	bx	lr
 800de24:	f803 1b01 	strb.w	r1, [r3], #1
 800de28:	e7f9      	b.n	800de1e <memset+0x4>
	...

0800de2c <_localeconv_r>:
 800de2c:	4800      	ldr	r0, [pc, #0]	; (800de30 <_localeconv_r+0x4>)
 800de2e:	4770      	bx	lr
 800de30:	2000015c 	.word	0x2000015c

0800de34 <_close_r>:
 800de34:	b538      	push	{r3, r4, r5, lr}
 800de36:	4d06      	ldr	r5, [pc, #24]	; (800de50 <_close_r+0x1c>)
 800de38:	2300      	movs	r3, #0
 800de3a:	4604      	mov	r4, r0
 800de3c:	4608      	mov	r0, r1
 800de3e:	602b      	str	r3, [r5, #0]
 800de40:	f7f9 f8cf 	bl	8006fe2 <_close>
 800de44:	1c43      	adds	r3, r0, #1
 800de46:	d102      	bne.n	800de4e <_close_r+0x1a>
 800de48:	682b      	ldr	r3, [r5, #0]
 800de4a:	b103      	cbz	r3, 800de4e <_close_r+0x1a>
 800de4c:	6023      	str	r3, [r4, #0]
 800de4e:	bd38      	pop	{r3, r4, r5, pc}
 800de50:	20001844 	.word	0x20001844

0800de54 <_lseek_r>:
 800de54:	b538      	push	{r3, r4, r5, lr}
 800de56:	4d07      	ldr	r5, [pc, #28]	; (800de74 <_lseek_r+0x20>)
 800de58:	4604      	mov	r4, r0
 800de5a:	4608      	mov	r0, r1
 800de5c:	4611      	mov	r1, r2
 800de5e:	2200      	movs	r2, #0
 800de60:	602a      	str	r2, [r5, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	f7f9 f8e4 	bl	8007030 <_lseek>
 800de68:	1c43      	adds	r3, r0, #1
 800de6a:	d102      	bne.n	800de72 <_lseek_r+0x1e>
 800de6c:	682b      	ldr	r3, [r5, #0]
 800de6e:	b103      	cbz	r3, 800de72 <_lseek_r+0x1e>
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	20001844 	.word	0x20001844

0800de78 <_read_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d07      	ldr	r5, [pc, #28]	; (800de98 <_read_r+0x20>)
 800de7c:	4604      	mov	r4, r0
 800de7e:	4608      	mov	r0, r1
 800de80:	4611      	mov	r1, r2
 800de82:	2200      	movs	r2, #0
 800de84:	602a      	str	r2, [r5, #0]
 800de86:	461a      	mov	r2, r3
 800de88:	f7f9 f872 	bl	8006f70 <_read>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d102      	bne.n	800de96 <_read_r+0x1e>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	b103      	cbz	r3, 800de96 <_read_r+0x1e>
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	bd38      	pop	{r3, r4, r5, pc}
 800de98:	20001844 	.word	0x20001844

0800de9c <_write_r>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	4d07      	ldr	r5, [pc, #28]	; (800debc <_write_r+0x20>)
 800dea0:	4604      	mov	r4, r0
 800dea2:	4608      	mov	r0, r1
 800dea4:	4611      	mov	r1, r2
 800dea6:	2200      	movs	r2, #0
 800dea8:	602a      	str	r2, [r5, #0]
 800deaa:	461a      	mov	r2, r3
 800deac:	f7f9 f87d 	bl	8006faa <_write>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	d102      	bne.n	800deba <_write_r+0x1e>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	b103      	cbz	r3, 800deba <_write_r+0x1e>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	20001844 	.word	0x20001844

0800dec0 <__errno>:
 800dec0:	4b01      	ldr	r3, [pc, #4]	; (800dec8 <__errno+0x8>)
 800dec2:	6818      	ldr	r0, [r3, #0]
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	20000068 	.word	0x20000068

0800decc <__libc_init_array>:
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	4d0d      	ldr	r5, [pc, #52]	; (800df04 <__libc_init_array+0x38>)
 800ded0:	4c0d      	ldr	r4, [pc, #52]	; (800df08 <__libc_init_array+0x3c>)
 800ded2:	1b64      	subs	r4, r4, r5
 800ded4:	10a4      	asrs	r4, r4, #2
 800ded6:	2600      	movs	r6, #0
 800ded8:	42a6      	cmp	r6, r4
 800deda:	d109      	bne.n	800def0 <__libc_init_array+0x24>
 800dedc:	4d0b      	ldr	r5, [pc, #44]	; (800df0c <__libc_init_array+0x40>)
 800dede:	4c0c      	ldr	r4, [pc, #48]	; (800df10 <__libc_init_array+0x44>)
 800dee0:	f003 fba6 	bl	8011630 <_init>
 800dee4:	1b64      	subs	r4, r4, r5
 800dee6:	10a4      	asrs	r4, r4, #2
 800dee8:	2600      	movs	r6, #0
 800deea:	42a6      	cmp	r6, r4
 800deec:	d105      	bne.n	800defa <__libc_init_array+0x2e>
 800deee:	bd70      	pop	{r4, r5, r6, pc}
 800def0:	f855 3b04 	ldr.w	r3, [r5], #4
 800def4:	4798      	blx	r3
 800def6:	3601      	adds	r6, #1
 800def8:	e7ee      	b.n	800ded8 <__libc_init_array+0xc>
 800defa:	f855 3b04 	ldr.w	r3, [r5], #4
 800defe:	4798      	blx	r3
 800df00:	3601      	adds	r6, #1
 800df02:	e7f2      	b.n	800deea <__libc_init_array+0x1e>
 800df04:	08011d58 	.word	0x08011d58
 800df08:	08011d58 	.word	0x08011d58
 800df0c:	08011d58 	.word	0x08011d58
 800df10:	08011d60 	.word	0x08011d60

0800df14 <__retarget_lock_init_recursive>:
 800df14:	4770      	bx	lr

0800df16 <__retarget_lock_acquire_recursive>:
 800df16:	4770      	bx	lr

0800df18 <__retarget_lock_release_recursive>:
 800df18:	4770      	bx	lr

0800df1a <memcpy>:
 800df1a:	440a      	add	r2, r1
 800df1c:	4291      	cmp	r1, r2
 800df1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800df22:	d100      	bne.n	800df26 <memcpy+0xc>
 800df24:	4770      	bx	lr
 800df26:	b510      	push	{r4, lr}
 800df28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df30:	4291      	cmp	r1, r2
 800df32:	d1f9      	bne.n	800df28 <memcpy+0xe>
 800df34:	bd10      	pop	{r4, pc}
	...

0800df38 <nanf>:
 800df38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800df40 <nanf+0x8>
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	7fc00000 	.word	0x7fc00000

0800df44 <quorem>:
 800df44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df48:	6903      	ldr	r3, [r0, #16]
 800df4a:	690c      	ldr	r4, [r1, #16]
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	4607      	mov	r7, r0
 800df50:	db7e      	blt.n	800e050 <quorem+0x10c>
 800df52:	3c01      	subs	r4, #1
 800df54:	f101 0814 	add.w	r8, r1, #20
 800df58:	f100 0514 	add.w	r5, r0, #20
 800df5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df60:	9301      	str	r3, [sp, #4]
 800df62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df6a:	3301      	adds	r3, #1
 800df6c:	429a      	cmp	r2, r3
 800df6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800df72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df76:	fbb2 f6f3 	udiv	r6, r2, r3
 800df7a:	d331      	bcc.n	800dfe0 <quorem+0x9c>
 800df7c:	f04f 0e00 	mov.w	lr, #0
 800df80:	4640      	mov	r0, r8
 800df82:	46ac      	mov	ip, r5
 800df84:	46f2      	mov	sl, lr
 800df86:	f850 2b04 	ldr.w	r2, [r0], #4
 800df8a:	b293      	uxth	r3, r2
 800df8c:	fb06 e303 	mla	r3, r6, r3, lr
 800df90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800df94:	0c1a      	lsrs	r2, r3, #16
 800df96:	b29b      	uxth	r3, r3
 800df98:	ebaa 0303 	sub.w	r3, sl, r3
 800df9c:	f8dc a000 	ldr.w	sl, [ip]
 800dfa0:	fa13 f38a 	uxtah	r3, r3, sl
 800dfa4:	fb06 220e 	mla	r2, r6, lr, r2
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	9b00      	ldr	r3, [sp, #0]
 800dfac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dfb0:	b292      	uxth	r2, r2
 800dfb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dfb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfba:	f8bd 3000 	ldrh.w	r3, [sp]
 800dfbe:	4581      	cmp	r9, r0
 800dfc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfc4:	f84c 3b04 	str.w	r3, [ip], #4
 800dfc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dfcc:	d2db      	bcs.n	800df86 <quorem+0x42>
 800dfce:	f855 300b 	ldr.w	r3, [r5, fp]
 800dfd2:	b92b      	cbnz	r3, 800dfe0 <quorem+0x9c>
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	3b04      	subs	r3, #4
 800dfd8:	429d      	cmp	r5, r3
 800dfda:	461a      	mov	r2, r3
 800dfdc:	d32c      	bcc.n	800e038 <quorem+0xf4>
 800dfde:	613c      	str	r4, [r7, #16]
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	f001 f9f1 	bl	800f3c8 <__mcmp>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	db22      	blt.n	800e030 <quorem+0xec>
 800dfea:	3601      	adds	r6, #1
 800dfec:	4629      	mov	r1, r5
 800dfee:	2000      	movs	r0, #0
 800dff0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dff4:	f8d1 c000 	ldr.w	ip, [r1]
 800dff8:	b293      	uxth	r3, r2
 800dffa:	1ac3      	subs	r3, r0, r3
 800dffc:	0c12      	lsrs	r2, r2, #16
 800dffe:	fa13 f38c 	uxtah	r3, r3, ip
 800e002:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e010:	45c1      	cmp	r9, r8
 800e012:	f841 3b04 	str.w	r3, [r1], #4
 800e016:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e01a:	d2e9      	bcs.n	800dff0 <quorem+0xac>
 800e01c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e024:	b922      	cbnz	r2, 800e030 <quorem+0xec>
 800e026:	3b04      	subs	r3, #4
 800e028:	429d      	cmp	r5, r3
 800e02a:	461a      	mov	r2, r3
 800e02c:	d30a      	bcc.n	800e044 <quorem+0x100>
 800e02e:	613c      	str	r4, [r7, #16]
 800e030:	4630      	mov	r0, r6
 800e032:	b003      	add	sp, #12
 800e034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e038:	6812      	ldr	r2, [r2, #0]
 800e03a:	3b04      	subs	r3, #4
 800e03c:	2a00      	cmp	r2, #0
 800e03e:	d1ce      	bne.n	800dfde <quorem+0x9a>
 800e040:	3c01      	subs	r4, #1
 800e042:	e7c9      	b.n	800dfd8 <quorem+0x94>
 800e044:	6812      	ldr	r2, [r2, #0]
 800e046:	3b04      	subs	r3, #4
 800e048:	2a00      	cmp	r2, #0
 800e04a:	d1f0      	bne.n	800e02e <quorem+0xea>
 800e04c:	3c01      	subs	r4, #1
 800e04e:	e7eb      	b.n	800e028 <quorem+0xe4>
 800e050:	2000      	movs	r0, #0
 800e052:	e7ee      	b.n	800e032 <quorem+0xee>
 800e054:	0000      	movs	r0, r0
	...

0800e058 <_dtoa_r>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	ed2d 8b04 	vpush	{d8-d9}
 800e060:	69c5      	ldr	r5, [r0, #28]
 800e062:	b093      	sub	sp, #76	; 0x4c
 800e064:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e068:	ec57 6b10 	vmov	r6, r7, d0
 800e06c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e070:	9107      	str	r1, [sp, #28]
 800e072:	4604      	mov	r4, r0
 800e074:	920a      	str	r2, [sp, #40]	; 0x28
 800e076:	930d      	str	r3, [sp, #52]	; 0x34
 800e078:	b975      	cbnz	r5, 800e098 <_dtoa_r+0x40>
 800e07a:	2010      	movs	r0, #16
 800e07c:	f000 fe2a 	bl	800ecd4 <malloc>
 800e080:	4602      	mov	r2, r0
 800e082:	61e0      	str	r0, [r4, #28]
 800e084:	b920      	cbnz	r0, 800e090 <_dtoa_r+0x38>
 800e086:	4bae      	ldr	r3, [pc, #696]	; (800e340 <_dtoa_r+0x2e8>)
 800e088:	21ef      	movs	r1, #239	; 0xef
 800e08a:	48ae      	ldr	r0, [pc, #696]	; (800e344 <_dtoa_r+0x2ec>)
 800e08c:	f002 fc6c 	bl	8010968 <__assert_func>
 800e090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e094:	6005      	str	r5, [r0, #0]
 800e096:	60c5      	str	r5, [r0, #12]
 800e098:	69e3      	ldr	r3, [r4, #28]
 800e09a:	6819      	ldr	r1, [r3, #0]
 800e09c:	b151      	cbz	r1, 800e0b4 <_dtoa_r+0x5c>
 800e09e:	685a      	ldr	r2, [r3, #4]
 800e0a0:	604a      	str	r2, [r1, #4]
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	4093      	lsls	r3, r2
 800e0a6:	608b      	str	r3, [r1, #8]
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f000 ff07 	bl	800eebc <_Bfree>
 800e0ae:	69e3      	ldr	r3, [r4, #28]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	1e3b      	subs	r3, r7, #0
 800e0b6:	bfbb      	ittet	lt
 800e0b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e0bc:	9303      	strlt	r3, [sp, #12]
 800e0be:	2300      	movge	r3, #0
 800e0c0:	2201      	movlt	r2, #1
 800e0c2:	bfac      	ite	ge
 800e0c4:	f8c8 3000 	strge.w	r3, [r8]
 800e0c8:	f8c8 2000 	strlt.w	r2, [r8]
 800e0cc:	4b9e      	ldr	r3, [pc, #632]	; (800e348 <_dtoa_r+0x2f0>)
 800e0ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e0d2:	ea33 0308 	bics.w	r3, r3, r8
 800e0d6:	d11b      	bne.n	800e110 <_dtoa_r+0xb8>
 800e0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0da:	f242 730f 	movw	r3, #9999	; 0x270f
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e0e4:	4333      	orrs	r3, r6
 800e0e6:	f000 8593 	beq.w	800ec10 <_dtoa_r+0xbb8>
 800e0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0ec:	b963      	cbnz	r3, 800e108 <_dtoa_r+0xb0>
 800e0ee:	4b97      	ldr	r3, [pc, #604]	; (800e34c <_dtoa_r+0x2f4>)
 800e0f0:	e027      	b.n	800e142 <_dtoa_r+0xea>
 800e0f2:	4b97      	ldr	r3, [pc, #604]	; (800e350 <_dtoa_r+0x2f8>)
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	3308      	adds	r3, #8
 800e0f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e0fa:	6013      	str	r3, [r2, #0]
 800e0fc:	9800      	ldr	r0, [sp, #0]
 800e0fe:	b013      	add	sp, #76	; 0x4c
 800e100:	ecbd 8b04 	vpop	{d8-d9}
 800e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e108:	4b90      	ldr	r3, [pc, #576]	; (800e34c <_dtoa_r+0x2f4>)
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	3303      	adds	r3, #3
 800e10e:	e7f3      	b.n	800e0f8 <_dtoa_r+0xa0>
 800e110:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e114:	2200      	movs	r2, #0
 800e116:	ec51 0b17 	vmov	r0, r1, d7
 800e11a:	eeb0 8a47 	vmov.f32	s16, s14
 800e11e:	eef0 8a67 	vmov.f32	s17, s15
 800e122:	2300      	movs	r3, #0
 800e124:	f7f2 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 800e128:	4681      	mov	r9, r0
 800e12a:	b160      	cbz	r0, 800e146 <_dtoa_r+0xee>
 800e12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e12e:	2301      	movs	r3, #1
 800e130:	6013      	str	r3, [r2, #0]
 800e132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 8568 	beq.w	800ec0a <_dtoa_r+0xbb2>
 800e13a:	4b86      	ldr	r3, [pc, #536]	; (800e354 <_dtoa_r+0x2fc>)
 800e13c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e13e:	6013      	str	r3, [r2, #0]
 800e140:	3b01      	subs	r3, #1
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	e7da      	b.n	800e0fc <_dtoa_r+0xa4>
 800e146:	aa10      	add	r2, sp, #64	; 0x40
 800e148:	a911      	add	r1, sp, #68	; 0x44
 800e14a:	4620      	mov	r0, r4
 800e14c:	eeb0 0a48 	vmov.f32	s0, s16
 800e150:	eef0 0a68 	vmov.f32	s1, s17
 800e154:	f001 fa4e 	bl	800f5f4 <__d2b>
 800e158:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e15c:	4682      	mov	sl, r0
 800e15e:	2d00      	cmp	r5, #0
 800e160:	d07f      	beq.n	800e262 <_dtoa_r+0x20a>
 800e162:	ee18 3a90 	vmov	r3, s17
 800e166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e16a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e16e:	ec51 0b18 	vmov	r0, r1, d8
 800e172:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e17a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e17e:	4619      	mov	r1, r3
 800e180:	2200      	movs	r2, #0
 800e182:	4b75      	ldr	r3, [pc, #468]	; (800e358 <_dtoa_r+0x300>)
 800e184:	f7f2 f8a0 	bl	80002c8 <__aeabi_dsub>
 800e188:	a367      	add	r3, pc, #412	; (adr r3, 800e328 <_dtoa_r+0x2d0>)
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	f7f2 fa53 	bl	8000638 <__aeabi_dmul>
 800e192:	a367      	add	r3, pc, #412	; (adr r3, 800e330 <_dtoa_r+0x2d8>)
 800e194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e198:	f7f2 f898 	bl	80002cc <__adddf3>
 800e19c:	4606      	mov	r6, r0
 800e19e:	4628      	mov	r0, r5
 800e1a0:	460f      	mov	r7, r1
 800e1a2:	f7f2 f9df 	bl	8000564 <__aeabi_i2d>
 800e1a6:	a364      	add	r3, pc, #400	; (adr r3, 800e338 <_dtoa_r+0x2e0>)
 800e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ac:	f7f2 fa44 	bl	8000638 <__aeabi_dmul>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	f7f2 f888 	bl	80002cc <__adddf3>
 800e1bc:	4606      	mov	r6, r0
 800e1be:	460f      	mov	r7, r1
 800e1c0:	f7f2 fcea 	bl	8000b98 <__aeabi_d2iz>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	4683      	mov	fp, r0
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	f7f2 fca5 	bl	8000b1c <__aeabi_dcmplt>
 800e1d2:	b148      	cbz	r0, 800e1e8 <_dtoa_r+0x190>
 800e1d4:	4658      	mov	r0, fp
 800e1d6:	f7f2 f9c5 	bl	8000564 <__aeabi_i2d>
 800e1da:	4632      	mov	r2, r6
 800e1dc:	463b      	mov	r3, r7
 800e1de:	f7f2 fc93 	bl	8000b08 <__aeabi_dcmpeq>
 800e1e2:	b908      	cbnz	r0, 800e1e8 <_dtoa_r+0x190>
 800e1e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e1e8:	f1bb 0f16 	cmp.w	fp, #22
 800e1ec:	d857      	bhi.n	800e29e <_dtoa_r+0x246>
 800e1ee:	4b5b      	ldr	r3, [pc, #364]	; (800e35c <_dtoa_r+0x304>)
 800e1f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f8:	ec51 0b18 	vmov	r0, r1, d8
 800e1fc:	f7f2 fc8e 	bl	8000b1c <__aeabi_dcmplt>
 800e200:	2800      	cmp	r0, #0
 800e202:	d04e      	beq.n	800e2a2 <_dtoa_r+0x24a>
 800e204:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e208:	2300      	movs	r3, #0
 800e20a:	930c      	str	r3, [sp, #48]	; 0x30
 800e20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e20e:	1b5b      	subs	r3, r3, r5
 800e210:	1e5a      	subs	r2, r3, #1
 800e212:	bf45      	ittet	mi
 800e214:	f1c3 0301 	rsbmi	r3, r3, #1
 800e218:	9305      	strmi	r3, [sp, #20]
 800e21a:	2300      	movpl	r3, #0
 800e21c:	2300      	movmi	r3, #0
 800e21e:	9206      	str	r2, [sp, #24]
 800e220:	bf54      	ite	pl
 800e222:	9305      	strpl	r3, [sp, #20]
 800e224:	9306      	strmi	r3, [sp, #24]
 800e226:	f1bb 0f00 	cmp.w	fp, #0
 800e22a:	db3c      	blt.n	800e2a6 <_dtoa_r+0x24e>
 800e22c:	9b06      	ldr	r3, [sp, #24]
 800e22e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e232:	445b      	add	r3, fp
 800e234:	9306      	str	r3, [sp, #24]
 800e236:	2300      	movs	r3, #0
 800e238:	9308      	str	r3, [sp, #32]
 800e23a:	9b07      	ldr	r3, [sp, #28]
 800e23c:	2b09      	cmp	r3, #9
 800e23e:	d868      	bhi.n	800e312 <_dtoa_r+0x2ba>
 800e240:	2b05      	cmp	r3, #5
 800e242:	bfc4      	itt	gt
 800e244:	3b04      	subgt	r3, #4
 800e246:	9307      	strgt	r3, [sp, #28]
 800e248:	9b07      	ldr	r3, [sp, #28]
 800e24a:	f1a3 0302 	sub.w	r3, r3, #2
 800e24e:	bfcc      	ite	gt
 800e250:	2500      	movgt	r5, #0
 800e252:	2501      	movle	r5, #1
 800e254:	2b03      	cmp	r3, #3
 800e256:	f200 8085 	bhi.w	800e364 <_dtoa_r+0x30c>
 800e25a:	e8df f003 	tbb	[pc, r3]
 800e25e:	3b2e      	.short	0x3b2e
 800e260:	5839      	.short	0x5839
 800e262:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e266:	441d      	add	r5, r3
 800e268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e26c:	2b20      	cmp	r3, #32
 800e26e:	bfc1      	itttt	gt
 800e270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e274:	fa08 f803 	lslgt.w	r8, r8, r3
 800e278:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e27c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e280:	bfd6      	itet	le
 800e282:	f1c3 0320 	rsble	r3, r3, #32
 800e286:	ea48 0003 	orrgt.w	r0, r8, r3
 800e28a:	fa06 f003 	lslle.w	r0, r6, r3
 800e28e:	f7f2 f959 	bl	8000544 <__aeabi_ui2d>
 800e292:	2201      	movs	r2, #1
 800e294:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e298:	3d01      	subs	r5, #1
 800e29a:	920e      	str	r2, [sp, #56]	; 0x38
 800e29c:	e76f      	b.n	800e17e <_dtoa_r+0x126>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e7b3      	b.n	800e20a <_dtoa_r+0x1b2>
 800e2a2:	900c      	str	r0, [sp, #48]	; 0x30
 800e2a4:	e7b2      	b.n	800e20c <_dtoa_r+0x1b4>
 800e2a6:	9b05      	ldr	r3, [sp, #20]
 800e2a8:	eba3 030b 	sub.w	r3, r3, fp
 800e2ac:	9305      	str	r3, [sp, #20]
 800e2ae:	f1cb 0300 	rsb	r3, fp, #0
 800e2b2:	9308      	str	r3, [sp, #32]
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2b8:	e7bf      	b.n	800e23a <_dtoa_r+0x1e2>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	dc52      	bgt.n	800e36a <_dtoa_r+0x312>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	9301      	str	r3, [sp, #4]
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	920a      	str	r2, [sp, #40]	; 0x28
 800e2ce:	e00b      	b.n	800e2e8 <_dtoa_r+0x290>
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	e7f3      	b.n	800e2bc <_dtoa_r+0x264>
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2da:	445b      	add	r3, fp
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	9304      	str	r3, [sp, #16]
 800e2e4:	bfb8      	it	lt
 800e2e6:	2301      	movlt	r3, #1
 800e2e8:	69e0      	ldr	r0, [r4, #28]
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	2204      	movs	r2, #4
 800e2ee:	f102 0614 	add.w	r6, r2, #20
 800e2f2:	429e      	cmp	r6, r3
 800e2f4:	d93d      	bls.n	800e372 <_dtoa_r+0x31a>
 800e2f6:	6041      	str	r1, [r0, #4]
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f000 fd9f 	bl	800ee3c <_Balloc>
 800e2fe:	9000      	str	r0, [sp, #0]
 800e300:	2800      	cmp	r0, #0
 800e302:	d139      	bne.n	800e378 <_dtoa_r+0x320>
 800e304:	4b16      	ldr	r3, [pc, #88]	; (800e360 <_dtoa_r+0x308>)
 800e306:	4602      	mov	r2, r0
 800e308:	f240 11af 	movw	r1, #431	; 0x1af
 800e30c:	e6bd      	b.n	800e08a <_dtoa_r+0x32>
 800e30e:	2301      	movs	r3, #1
 800e310:	e7e1      	b.n	800e2d6 <_dtoa_r+0x27e>
 800e312:	2501      	movs	r5, #1
 800e314:	2300      	movs	r3, #0
 800e316:	9307      	str	r3, [sp, #28]
 800e318:	9509      	str	r5, [sp, #36]	; 0x24
 800e31a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e31e:	9301      	str	r3, [sp, #4]
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	2200      	movs	r2, #0
 800e324:	2312      	movs	r3, #18
 800e326:	e7d1      	b.n	800e2cc <_dtoa_r+0x274>
 800e328:	636f4361 	.word	0x636f4361
 800e32c:	3fd287a7 	.word	0x3fd287a7
 800e330:	8b60c8b3 	.word	0x8b60c8b3
 800e334:	3fc68a28 	.word	0x3fc68a28
 800e338:	509f79fb 	.word	0x509f79fb
 800e33c:	3fd34413 	.word	0x3fd34413
 800e340:	0801196a 	.word	0x0801196a
 800e344:	08011981 	.word	0x08011981
 800e348:	7ff00000 	.word	0x7ff00000
 800e34c:	08011966 	.word	0x08011966
 800e350:	0801195d 	.word	0x0801195d
 800e354:	08011935 	.word	0x08011935
 800e358:	3ff80000 	.word	0x3ff80000
 800e35c:	08011a70 	.word	0x08011a70
 800e360:	080119d9 	.word	0x080119d9
 800e364:	2301      	movs	r3, #1
 800e366:	9309      	str	r3, [sp, #36]	; 0x24
 800e368:	e7d7      	b.n	800e31a <_dtoa_r+0x2c2>
 800e36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e36c:	9301      	str	r3, [sp, #4]
 800e36e:	9304      	str	r3, [sp, #16]
 800e370:	e7ba      	b.n	800e2e8 <_dtoa_r+0x290>
 800e372:	3101      	adds	r1, #1
 800e374:	0052      	lsls	r2, r2, #1
 800e376:	e7ba      	b.n	800e2ee <_dtoa_r+0x296>
 800e378:	69e3      	ldr	r3, [r4, #28]
 800e37a:	9a00      	ldr	r2, [sp, #0]
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	9b04      	ldr	r3, [sp, #16]
 800e380:	2b0e      	cmp	r3, #14
 800e382:	f200 80a8 	bhi.w	800e4d6 <_dtoa_r+0x47e>
 800e386:	2d00      	cmp	r5, #0
 800e388:	f000 80a5 	beq.w	800e4d6 <_dtoa_r+0x47e>
 800e38c:	f1bb 0f00 	cmp.w	fp, #0
 800e390:	dd38      	ble.n	800e404 <_dtoa_r+0x3ac>
 800e392:	4bc0      	ldr	r3, [pc, #768]	; (800e694 <_dtoa_r+0x63c>)
 800e394:	f00b 020f 	and.w	r2, fp, #15
 800e398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e39c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e3a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e3a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e3a8:	d019      	beq.n	800e3de <_dtoa_r+0x386>
 800e3aa:	4bbb      	ldr	r3, [pc, #748]	; (800e698 <_dtoa_r+0x640>)
 800e3ac:	ec51 0b18 	vmov	r0, r1, d8
 800e3b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e3b4:	f7f2 fa6a 	bl	800088c <__aeabi_ddiv>
 800e3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3bc:	f008 080f 	and.w	r8, r8, #15
 800e3c0:	2503      	movs	r5, #3
 800e3c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e698 <_dtoa_r+0x640>
 800e3c6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ca:	d10a      	bne.n	800e3e2 <_dtoa_r+0x38a>
 800e3cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3d0:	4632      	mov	r2, r6
 800e3d2:	463b      	mov	r3, r7
 800e3d4:	f7f2 fa5a 	bl	800088c <__aeabi_ddiv>
 800e3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3dc:	e02b      	b.n	800e436 <_dtoa_r+0x3de>
 800e3de:	2502      	movs	r5, #2
 800e3e0:	e7ef      	b.n	800e3c2 <_dtoa_r+0x36a>
 800e3e2:	f018 0f01 	tst.w	r8, #1
 800e3e6:	d008      	beq.n	800e3fa <_dtoa_r+0x3a2>
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	4639      	mov	r1, r7
 800e3ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e3f0:	f7f2 f922 	bl	8000638 <__aeabi_dmul>
 800e3f4:	3501      	adds	r5, #1
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	460f      	mov	r7, r1
 800e3fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e3fe:	f109 0908 	add.w	r9, r9, #8
 800e402:	e7e0      	b.n	800e3c6 <_dtoa_r+0x36e>
 800e404:	f000 809f 	beq.w	800e546 <_dtoa_r+0x4ee>
 800e408:	f1cb 0600 	rsb	r6, fp, #0
 800e40c:	4ba1      	ldr	r3, [pc, #644]	; (800e694 <_dtoa_r+0x63c>)
 800e40e:	4fa2      	ldr	r7, [pc, #648]	; (800e698 <_dtoa_r+0x640>)
 800e410:	f006 020f 	and.w	r2, r6, #15
 800e414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	ec51 0b18 	vmov	r0, r1, d8
 800e420:	f7f2 f90a 	bl	8000638 <__aeabi_dmul>
 800e424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e428:	1136      	asrs	r6, r6, #4
 800e42a:	2300      	movs	r3, #0
 800e42c:	2502      	movs	r5, #2
 800e42e:	2e00      	cmp	r6, #0
 800e430:	d17e      	bne.n	800e530 <_dtoa_r+0x4d8>
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1d0      	bne.n	800e3d8 <_dtoa_r+0x380>
 800e436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e438:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f000 8084 	beq.w	800e54a <_dtoa_r+0x4f2>
 800e442:	4b96      	ldr	r3, [pc, #600]	; (800e69c <_dtoa_r+0x644>)
 800e444:	2200      	movs	r2, #0
 800e446:	4640      	mov	r0, r8
 800e448:	4649      	mov	r1, r9
 800e44a:	f7f2 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d07b      	beq.n	800e54a <_dtoa_r+0x4f2>
 800e452:	9b04      	ldr	r3, [sp, #16]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d078      	beq.n	800e54a <_dtoa_r+0x4f2>
 800e458:	9b01      	ldr	r3, [sp, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	dd39      	ble.n	800e4d2 <_dtoa_r+0x47a>
 800e45e:	4b90      	ldr	r3, [pc, #576]	; (800e6a0 <_dtoa_r+0x648>)
 800e460:	2200      	movs	r2, #0
 800e462:	4640      	mov	r0, r8
 800e464:	4649      	mov	r1, r9
 800e466:	f7f2 f8e7 	bl	8000638 <__aeabi_dmul>
 800e46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e46e:	9e01      	ldr	r6, [sp, #4]
 800e470:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e474:	3501      	adds	r5, #1
 800e476:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e47a:	4628      	mov	r0, r5
 800e47c:	f7f2 f872 	bl	8000564 <__aeabi_i2d>
 800e480:	4642      	mov	r2, r8
 800e482:	464b      	mov	r3, r9
 800e484:	f7f2 f8d8 	bl	8000638 <__aeabi_dmul>
 800e488:	4b86      	ldr	r3, [pc, #536]	; (800e6a4 <_dtoa_r+0x64c>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	f7f1 ff1e 	bl	80002cc <__adddf3>
 800e490:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e498:	9303      	str	r3, [sp, #12]
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	d158      	bne.n	800e550 <_dtoa_r+0x4f8>
 800e49e:	4b82      	ldr	r3, [pc, #520]	; (800e6a8 <_dtoa_r+0x650>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	f7f1 ff0f 	bl	80002c8 <__aeabi_dsub>
 800e4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4ae:	4680      	mov	r8, r0
 800e4b0:	4689      	mov	r9, r1
 800e4b2:	f7f2 fb51 	bl	8000b58 <__aeabi_dcmpgt>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	f040 8296 	bne.w	800e9e8 <_dtoa_r+0x990>
 800e4bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	f7f2 fb28 	bl	8000b1c <__aeabi_dcmplt>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	f040 8289 	bne.w	800e9e4 <_dtoa_r+0x98c>
 800e4d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f2c0 814e 	blt.w	800e77a <_dtoa_r+0x722>
 800e4de:	f1bb 0f0e 	cmp.w	fp, #14
 800e4e2:	f300 814a 	bgt.w	800e77a <_dtoa_r+0x722>
 800e4e6:	4b6b      	ldr	r3, [pc, #428]	; (800e694 <_dtoa_r+0x63c>)
 800e4e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f280 80dc 	bge.w	800e6b0 <_dtoa_r+0x658>
 800e4f8:	9b04      	ldr	r3, [sp, #16]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f300 80d8 	bgt.w	800e6b0 <_dtoa_r+0x658>
 800e500:	f040 826f 	bne.w	800e9e2 <_dtoa_r+0x98a>
 800e504:	4b68      	ldr	r3, [pc, #416]	; (800e6a8 <_dtoa_r+0x650>)
 800e506:	2200      	movs	r2, #0
 800e508:	4640      	mov	r0, r8
 800e50a:	4649      	mov	r1, r9
 800e50c:	f7f2 f894 	bl	8000638 <__aeabi_dmul>
 800e510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e514:	f7f2 fb16 	bl	8000b44 <__aeabi_dcmpge>
 800e518:	9e04      	ldr	r6, [sp, #16]
 800e51a:	4637      	mov	r7, r6
 800e51c:	2800      	cmp	r0, #0
 800e51e:	f040 8245 	bne.w	800e9ac <_dtoa_r+0x954>
 800e522:	9d00      	ldr	r5, [sp, #0]
 800e524:	2331      	movs	r3, #49	; 0x31
 800e526:	f805 3b01 	strb.w	r3, [r5], #1
 800e52a:	f10b 0b01 	add.w	fp, fp, #1
 800e52e:	e241      	b.n	800e9b4 <_dtoa_r+0x95c>
 800e530:	07f2      	lsls	r2, r6, #31
 800e532:	d505      	bpl.n	800e540 <_dtoa_r+0x4e8>
 800e534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e538:	f7f2 f87e 	bl	8000638 <__aeabi_dmul>
 800e53c:	3501      	adds	r5, #1
 800e53e:	2301      	movs	r3, #1
 800e540:	1076      	asrs	r6, r6, #1
 800e542:	3708      	adds	r7, #8
 800e544:	e773      	b.n	800e42e <_dtoa_r+0x3d6>
 800e546:	2502      	movs	r5, #2
 800e548:	e775      	b.n	800e436 <_dtoa_r+0x3de>
 800e54a:	9e04      	ldr	r6, [sp, #16]
 800e54c:	465f      	mov	r7, fp
 800e54e:	e792      	b.n	800e476 <_dtoa_r+0x41e>
 800e550:	9900      	ldr	r1, [sp, #0]
 800e552:	4b50      	ldr	r3, [pc, #320]	; (800e694 <_dtoa_r+0x63c>)
 800e554:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e558:	4431      	add	r1, r6
 800e55a:	9102      	str	r1, [sp, #8]
 800e55c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e55e:	eeb0 9a47 	vmov.f32	s18, s14
 800e562:	eef0 9a67 	vmov.f32	s19, s15
 800e566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e56a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e56e:	2900      	cmp	r1, #0
 800e570:	d044      	beq.n	800e5fc <_dtoa_r+0x5a4>
 800e572:	494e      	ldr	r1, [pc, #312]	; (800e6ac <_dtoa_r+0x654>)
 800e574:	2000      	movs	r0, #0
 800e576:	f7f2 f989 	bl	800088c <__aeabi_ddiv>
 800e57a:	ec53 2b19 	vmov	r2, r3, d9
 800e57e:	f7f1 fea3 	bl	80002c8 <__aeabi_dsub>
 800e582:	9d00      	ldr	r5, [sp, #0]
 800e584:	ec41 0b19 	vmov	d9, r0, r1
 800e588:	4649      	mov	r1, r9
 800e58a:	4640      	mov	r0, r8
 800e58c:	f7f2 fb04 	bl	8000b98 <__aeabi_d2iz>
 800e590:	4606      	mov	r6, r0
 800e592:	f7f1 ffe7 	bl	8000564 <__aeabi_i2d>
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4640      	mov	r0, r8
 800e59c:	4649      	mov	r1, r9
 800e59e:	f7f1 fe93 	bl	80002c8 <__aeabi_dsub>
 800e5a2:	3630      	adds	r6, #48	; 0x30
 800e5a4:	f805 6b01 	strb.w	r6, [r5], #1
 800e5a8:	ec53 2b19 	vmov	r2, r3, d9
 800e5ac:	4680      	mov	r8, r0
 800e5ae:	4689      	mov	r9, r1
 800e5b0:	f7f2 fab4 	bl	8000b1c <__aeabi_dcmplt>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d164      	bne.n	800e682 <_dtoa_r+0x62a>
 800e5b8:	4642      	mov	r2, r8
 800e5ba:	464b      	mov	r3, r9
 800e5bc:	4937      	ldr	r1, [pc, #220]	; (800e69c <_dtoa_r+0x644>)
 800e5be:	2000      	movs	r0, #0
 800e5c0:	f7f1 fe82 	bl	80002c8 <__aeabi_dsub>
 800e5c4:	ec53 2b19 	vmov	r2, r3, d9
 800e5c8:	f7f2 faa8 	bl	8000b1c <__aeabi_dcmplt>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	f040 80b6 	bne.w	800e73e <_dtoa_r+0x6e6>
 800e5d2:	9b02      	ldr	r3, [sp, #8]
 800e5d4:	429d      	cmp	r5, r3
 800e5d6:	f43f af7c 	beq.w	800e4d2 <_dtoa_r+0x47a>
 800e5da:	4b31      	ldr	r3, [pc, #196]	; (800e6a0 <_dtoa_r+0x648>)
 800e5dc:	ec51 0b19 	vmov	r0, r1, d9
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f7f2 f829 	bl	8000638 <__aeabi_dmul>
 800e5e6:	4b2e      	ldr	r3, [pc, #184]	; (800e6a0 <_dtoa_r+0x648>)
 800e5e8:	ec41 0b19 	vmov	d9, r0, r1
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4640      	mov	r0, r8
 800e5f0:	4649      	mov	r1, r9
 800e5f2:	f7f2 f821 	bl	8000638 <__aeabi_dmul>
 800e5f6:	4680      	mov	r8, r0
 800e5f8:	4689      	mov	r9, r1
 800e5fa:	e7c5      	b.n	800e588 <_dtoa_r+0x530>
 800e5fc:	ec51 0b17 	vmov	r0, r1, d7
 800e600:	f7f2 f81a 	bl	8000638 <__aeabi_dmul>
 800e604:	9b02      	ldr	r3, [sp, #8]
 800e606:	9d00      	ldr	r5, [sp, #0]
 800e608:	930f      	str	r3, [sp, #60]	; 0x3c
 800e60a:	ec41 0b19 	vmov	d9, r0, r1
 800e60e:	4649      	mov	r1, r9
 800e610:	4640      	mov	r0, r8
 800e612:	f7f2 fac1 	bl	8000b98 <__aeabi_d2iz>
 800e616:	4606      	mov	r6, r0
 800e618:	f7f1 ffa4 	bl	8000564 <__aeabi_i2d>
 800e61c:	3630      	adds	r6, #48	; 0x30
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4640      	mov	r0, r8
 800e624:	4649      	mov	r1, r9
 800e626:	f7f1 fe4f 	bl	80002c8 <__aeabi_dsub>
 800e62a:	f805 6b01 	strb.w	r6, [r5], #1
 800e62e:	9b02      	ldr	r3, [sp, #8]
 800e630:	429d      	cmp	r5, r3
 800e632:	4680      	mov	r8, r0
 800e634:	4689      	mov	r9, r1
 800e636:	f04f 0200 	mov.w	r2, #0
 800e63a:	d124      	bne.n	800e686 <_dtoa_r+0x62e>
 800e63c:	4b1b      	ldr	r3, [pc, #108]	; (800e6ac <_dtoa_r+0x654>)
 800e63e:	ec51 0b19 	vmov	r0, r1, d9
 800e642:	f7f1 fe43 	bl	80002cc <__adddf3>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	4640      	mov	r0, r8
 800e64c:	4649      	mov	r1, r9
 800e64e:	f7f2 fa83 	bl	8000b58 <__aeabi_dcmpgt>
 800e652:	2800      	cmp	r0, #0
 800e654:	d173      	bne.n	800e73e <_dtoa_r+0x6e6>
 800e656:	ec53 2b19 	vmov	r2, r3, d9
 800e65a:	4914      	ldr	r1, [pc, #80]	; (800e6ac <_dtoa_r+0x654>)
 800e65c:	2000      	movs	r0, #0
 800e65e:	f7f1 fe33 	bl	80002c8 <__aeabi_dsub>
 800e662:	4602      	mov	r2, r0
 800e664:	460b      	mov	r3, r1
 800e666:	4640      	mov	r0, r8
 800e668:	4649      	mov	r1, r9
 800e66a:	f7f2 fa57 	bl	8000b1c <__aeabi_dcmplt>
 800e66e:	2800      	cmp	r0, #0
 800e670:	f43f af2f 	beq.w	800e4d2 <_dtoa_r+0x47a>
 800e674:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e676:	1e6b      	subs	r3, r5, #1
 800e678:	930f      	str	r3, [sp, #60]	; 0x3c
 800e67a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e67e:	2b30      	cmp	r3, #48	; 0x30
 800e680:	d0f8      	beq.n	800e674 <_dtoa_r+0x61c>
 800e682:	46bb      	mov	fp, r7
 800e684:	e04a      	b.n	800e71c <_dtoa_r+0x6c4>
 800e686:	4b06      	ldr	r3, [pc, #24]	; (800e6a0 <_dtoa_r+0x648>)
 800e688:	f7f1 ffd6 	bl	8000638 <__aeabi_dmul>
 800e68c:	4680      	mov	r8, r0
 800e68e:	4689      	mov	r9, r1
 800e690:	e7bd      	b.n	800e60e <_dtoa_r+0x5b6>
 800e692:	bf00      	nop
 800e694:	08011a70 	.word	0x08011a70
 800e698:	08011a48 	.word	0x08011a48
 800e69c:	3ff00000 	.word	0x3ff00000
 800e6a0:	40240000 	.word	0x40240000
 800e6a4:	401c0000 	.word	0x401c0000
 800e6a8:	40140000 	.word	0x40140000
 800e6ac:	3fe00000 	.word	0x3fe00000
 800e6b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e6b4:	9d00      	ldr	r5, [sp, #0]
 800e6b6:	4642      	mov	r2, r8
 800e6b8:	464b      	mov	r3, r9
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	4639      	mov	r1, r7
 800e6be:	f7f2 f8e5 	bl	800088c <__aeabi_ddiv>
 800e6c2:	f7f2 fa69 	bl	8000b98 <__aeabi_d2iz>
 800e6c6:	9001      	str	r0, [sp, #4]
 800e6c8:	f7f1 ff4c 	bl	8000564 <__aeabi_i2d>
 800e6cc:	4642      	mov	r2, r8
 800e6ce:	464b      	mov	r3, r9
 800e6d0:	f7f1 ffb2 	bl	8000638 <__aeabi_dmul>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	4630      	mov	r0, r6
 800e6da:	4639      	mov	r1, r7
 800e6dc:	f7f1 fdf4 	bl	80002c8 <__aeabi_dsub>
 800e6e0:	9e01      	ldr	r6, [sp, #4]
 800e6e2:	9f04      	ldr	r7, [sp, #16]
 800e6e4:	3630      	adds	r6, #48	; 0x30
 800e6e6:	f805 6b01 	strb.w	r6, [r5], #1
 800e6ea:	9e00      	ldr	r6, [sp, #0]
 800e6ec:	1bae      	subs	r6, r5, r6
 800e6ee:	42b7      	cmp	r7, r6
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	d134      	bne.n	800e760 <_dtoa_r+0x708>
 800e6f6:	f7f1 fde9 	bl	80002cc <__adddf3>
 800e6fa:	4642      	mov	r2, r8
 800e6fc:	464b      	mov	r3, r9
 800e6fe:	4606      	mov	r6, r0
 800e700:	460f      	mov	r7, r1
 800e702:	f7f2 fa29 	bl	8000b58 <__aeabi_dcmpgt>
 800e706:	b9c8      	cbnz	r0, 800e73c <_dtoa_r+0x6e4>
 800e708:	4642      	mov	r2, r8
 800e70a:	464b      	mov	r3, r9
 800e70c:	4630      	mov	r0, r6
 800e70e:	4639      	mov	r1, r7
 800e710:	f7f2 f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 800e714:	b110      	cbz	r0, 800e71c <_dtoa_r+0x6c4>
 800e716:	9b01      	ldr	r3, [sp, #4]
 800e718:	07db      	lsls	r3, r3, #31
 800e71a:	d40f      	bmi.n	800e73c <_dtoa_r+0x6e4>
 800e71c:	4651      	mov	r1, sl
 800e71e:	4620      	mov	r0, r4
 800e720:	f000 fbcc 	bl	800eebc <_Bfree>
 800e724:	2300      	movs	r3, #0
 800e726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e728:	702b      	strb	r3, [r5, #0]
 800e72a:	f10b 0301 	add.w	r3, fp, #1
 800e72e:	6013      	str	r3, [r2, #0]
 800e730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e732:	2b00      	cmp	r3, #0
 800e734:	f43f ace2 	beq.w	800e0fc <_dtoa_r+0xa4>
 800e738:	601d      	str	r5, [r3, #0]
 800e73a:	e4df      	b.n	800e0fc <_dtoa_r+0xa4>
 800e73c:	465f      	mov	r7, fp
 800e73e:	462b      	mov	r3, r5
 800e740:	461d      	mov	r5, r3
 800e742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e746:	2a39      	cmp	r2, #57	; 0x39
 800e748:	d106      	bne.n	800e758 <_dtoa_r+0x700>
 800e74a:	9a00      	ldr	r2, [sp, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d1f7      	bne.n	800e740 <_dtoa_r+0x6e8>
 800e750:	9900      	ldr	r1, [sp, #0]
 800e752:	2230      	movs	r2, #48	; 0x30
 800e754:	3701      	adds	r7, #1
 800e756:	700a      	strb	r2, [r1, #0]
 800e758:	781a      	ldrb	r2, [r3, #0]
 800e75a:	3201      	adds	r2, #1
 800e75c:	701a      	strb	r2, [r3, #0]
 800e75e:	e790      	b.n	800e682 <_dtoa_r+0x62a>
 800e760:	4ba3      	ldr	r3, [pc, #652]	; (800e9f0 <_dtoa_r+0x998>)
 800e762:	2200      	movs	r2, #0
 800e764:	f7f1 ff68 	bl	8000638 <__aeabi_dmul>
 800e768:	2200      	movs	r2, #0
 800e76a:	2300      	movs	r3, #0
 800e76c:	4606      	mov	r6, r0
 800e76e:	460f      	mov	r7, r1
 800e770:	f7f2 f9ca 	bl	8000b08 <__aeabi_dcmpeq>
 800e774:	2800      	cmp	r0, #0
 800e776:	d09e      	beq.n	800e6b6 <_dtoa_r+0x65e>
 800e778:	e7d0      	b.n	800e71c <_dtoa_r+0x6c4>
 800e77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e77c:	2a00      	cmp	r2, #0
 800e77e:	f000 80ca 	beq.w	800e916 <_dtoa_r+0x8be>
 800e782:	9a07      	ldr	r2, [sp, #28]
 800e784:	2a01      	cmp	r2, #1
 800e786:	f300 80ad 	bgt.w	800e8e4 <_dtoa_r+0x88c>
 800e78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e78c:	2a00      	cmp	r2, #0
 800e78e:	f000 80a5 	beq.w	800e8dc <_dtoa_r+0x884>
 800e792:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e796:	9e08      	ldr	r6, [sp, #32]
 800e798:	9d05      	ldr	r5, [sp, #20]
 800e79a:	9a05      	ldr	r2, [sp, #20]
 800e79c:	441a      	add	r2, r3
 800e79e:	9205      	str	r2, [sp, #20]
 800e7a0:	9a06      	ldr	r2, [sp, #24]
 800e7a2:	2101      	movs	r1, #1
 800e7a4:	441a      	add	r2, r3
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	9206      	str	r2, [sp, #24]
 800e7aa:	f000 fc87 	bl	800f0bc <__i2b>
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	b165      	cbz	r5, 800e7cc <_dtoa_r+0x774>
 800e7b2:	9b06      	ldr	r3, [sp, #24]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	dd09      	ble.n	800e7cc <_dtoa_r+0x774>
 800e7b8:	42ab      	cmp	r3, r5
 800e7ba:	9a05      	ldr	r2, [sp, #20]
 800e7bc:	bfa8      	it	ge
 800e7be:	462b      	movge	r3, r5
 800e7c0:	1ad2      	subs	r2, r2, r3
 800e7c2:	9205      	str	r2, [sp, #20]
 800e7c4:	9a06      	ldr	r2, [sp, #24]
 800e7c6:	1aed      	subs	r5, r5, r3
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	9306      	str	r3, [sp, #24]
 800e7cc:	9b08      	ldr	r3, [sp, #32]
 800e7ce:	b1f3      	cbz	r3, 800e80e <_dtoa_r+0x7b6>
 800e7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f000 80a3 	beq.w	800e91e <_dtoa_r+0x8c6>
 800e7d8:	2e00      	cmp	r6, #0
 800e7da:	dd10      	ble.n	800e7fe <_dtoa_r+0x7a6>
 800e7dc:	4639      	mov	r1, r7
 800e7de:	4632      	mov	r2, r6
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f000 fd2b 	bl	800f23c <__pow5mult>
 800e7e6:	4652      	mov	r2, sl
 800e7e8:	4601      	mov	r1, r0
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	f000 fc7b 	bl	800f0e8 <__multiply>
 800e7f2:	4651      	mov	r1, sl
 800e7f4:	4680      	mov	r8, r0
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f000 fb60 	bl	800eebc <_Bfree>
 800e7fc:	46c2      	mov	sl, r8
 800e7fe:	9b08      	ldr	r3, [sp, #32]
 800e800:	1b9a      	subs	r2, r3, r6
 800e802:	d004      	beq.n	800e80e <_dtoa_r+0x7b6>
 800e804:	4651      	mov	r1, sl
 800e806:	4620      	mov	r0, r4
 800e808:	f000 fd18 	bl	800f23c <__pow5mult>
 800e80c:	4682      	mov	sl, r0
 800e80e:	2101      	movs	r1, #1
 800e810:	4620      	mov	r0, r4
 800e812:	f000 fc53 	bl	800f0bc <__i2b>
 800e816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e818:	2b00      	cmp	r3, #0
 800e81a:	4606      	mov	r6, r0
 800e81c:	f340 8081 	ble.w	800e922 <_dtoa_r+0x8ca>
 800e820:	461a      	mov	r2, r3
 800e822:	4601      	mov	r1, r0
 800e824:	4620      	mov	r0, r4
 800e826:	f000 fd09 	bl	800f23c <__pow5mult>
 800e82a:	9b07      	ldr	r3, [sp, #28]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	4606      	mov	r6, r0
 800e830:	dd7a      	ble.n	800e928 <_dtoa_r+0x8d0>
 800e832:	f04f 0800 	mov.w	r8, #0
 800e836:	6933      	ldr	r3, [r6, #16]
 800e838:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e83c:	6918      	ldr	r0, [r3, #16]
 800e83e:	f000 fbef 	bl	800f020 <__hi0bits>
 800e842:	f1c0 0020 	rsb	r0, r0, #32
 800e846:	9b06      	ldr	r3, [sp, #24]
 800e848:	4418      	add	r0, r3
 800e84a:	f010 001f 	ands.w	r0, r0, #31
 800e84e:	f000 8094 	beq.w	800e97a <_dtoa_r+0x922>
 800e852:	f1c0 0320 	rsb	r3, r0, #32
 800e856:	2b04      	cmp	r3, #4
 800e858:	f340 8085 	ble.w	800e966 <_dtoa_r+0x90e>
 800e85c:	9b05      	ldr	r3, [sp, #20]
 800e85e:	f1c0 001c 	rsb	r0, r0, #28
 800e862:	4403      	add	r3, r0
 800e864:	9305      	str	r3, [sp, #20]
 800e866:	9b06      	ldr	r3, [sp, #24]
 800e868:	4403      	add	r3, r0
 800e86a:	4405      	add	r5, r0
 800e86c:	9306      	str	r3, [sp, #24]
 800e86e:	9b05      	ldr	r3, [sp, #20]
 800e870:	2b00      	cmp	r3, #0
 800e872:	dd05      	ble.n	800e880 <_dtoa_r+0x828>
 800e874:	4651      	mov	r1, sl
 800e876:	461a      	mov	r2, r3
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 fd39 	bl	800f2f0 <__lshift>
 800e87e:	4682      	mov	sl, r0
 800e880:	9b06      	ldr	r3, [sp, #24]
 800e882:	2b00      	cmp	r3, #0
 800e884:	dd05      	ble.n	800e892 <_dtoa_r+0x83a>
 800e886:	4631      	mov	r1, r6
 800e888:	461a      	mov	r2, r3
 800e88a:	4620      	mov	r0, r4
 800e88c:	f000 fd30 	bl	800f2f0 <__lshift>
 800e890:	4606      	mov	r6, r0
 800e892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e894:	2b00      	cmp	r3, #0
 800e896:	d072      	beq.n	800e97e <_dtoa_r+0x926>
 800e898:	4631      	mov	r1, r6
 800e89a:	4650      	mov	r0, sl
 800e89c:	f000 fd94 	bl	800f3c8 <__mcmp>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	da6c      	bge.n	800e97e <_dtoa_r+0x926>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4651      	mov	r1, sl
 800e8a8:	220a      	movs	r2, #10
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f000 fb28 	bl	800ef00 <__multadd>
 800e8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e8b6:	4682      	mov	sl, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 81b0 	beq.w	800ec1e <_dtoa_r+0xbc6>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	220a      	movs	r2, #10
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f000 fb1b 	bl	800ef00 <__multadd>
 800e8ca:	9b01      	ldr	r3, [sp, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	4607      	mov	r7, r0
 800e8d0:	f300 8096 	bgt.w	800ea00 <_dtoa_r+0x9a8>
 800e8d4:	9b07      	ldr	r3, [sp, #28]
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	dc59      	bgt.n	800e98e <_dtoa_r+0x936>
 800e8da:	e091      	b.n	800ea00 <_dtoa_r+0x9a8>
 800e8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e8e2:	e758      	b.n	800e796 <_dtoa_r+0x73e>
 800e8e4:	9b04      	ldr	r3, [sp, #16]
 800e8e6:	1e5e      	subs	r6, r3, #1
 800e8e8:	9b08      	ldr	r3, [sp, #32]
 800e8ea:	42b3      	cmp	r3, r6
 800e8ec:	bfbf      	itttt	lt
 800e8ee:	9b08      	ldrlt	r3, [sp, #32]
 800e8f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e8f2:	9608      	strlt	r6, [sp, #32]
 800e8f4:	1af3      	sublt	r3, r6, r3
 800e8f6:	bfb4      	ite	lt
 800e8f8:	18d2      	addlt	r2, r2, r3
 800e8fa:	1b9e      	subge	r6, r3, r6
 800e8fc:	9b04      	ldr	r3, [sp, #16]
 800e8fe:	bfbc      	itt	lt
 800e900:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e902:	2600      	movlt	r6, #0
 800e904:	2b00      	cmp	r3, #0
 800e906:	bfb7      	itett	lt
 800e908:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e90c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e910:	1a9d      	sublt	r5, r3, r2
 800e912:	2300      	movlt	r3, #0
 800e914:	e741      	b.n	800e79a <_dtoa_r+0x742>
 800e916:	9e08      	ldr	r6, [sp, #32]
 800e918:	9d05      	ldr	r5, [sp, #20]
 800e91a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e91c:	e748      	b.n	800e7b0 <_dtoa_r+0x758>
 800e91e:	9a08      	ldr	r2, [sp, #32]
 800e920:	e770      	b.n	800e804 <_dtoa_r+0x7ac>
 800e922:	9b07      	ldr	r3, [sp, #28]
 800e924:	2b01      	cmp	r3, #1
 800e926:	dc19      	bgt.n	800e95c <_dtoa_r+0x904>
 800e928:	9b02      	ldr	r3, [sp, #8]
 800e92a:	b9bb      	cbnz	r3, 800e95c <_dtoa_r+0x904>
 800e92c:	9b03      	ldr	r3, [sp, #12]
 800e92e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e932:	b99b      	cbnz	r3, 800e95c <_dtoa_r+0x904>
 800e934:	9b03      	ldr	r3, [sp, #12]
 800e936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e93a:	0d1b      	lsrs	r3, r3, #20
 800e93c:	051b      	lsls	r3, r3, #20
 800e93e:	b183      	cbz	r3, 800e962 <_dtoa_r+0x90a>
 800e940:	9b05      	ldr	r3, [sp, #20]
 800e942:	3301      	adds	r3, #1
 800e944:	9305      	str	r3, [sp, #20]
 800e946:	9b06      	ldr	r3, [sp, #24]
 800e948:	3301      	adds	r3, #1
 800e94a:	9306      	str	r3, [sp, #24]
 800e94c:	f04f 0801 	mov.w	r8, #1
 800e950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e952:	2b00      	cmp	r3, #0
 800e954:	f47f af6f 	bne.w	800e836 <_dtoa_r+0x7de>
 800e958:	2001      	movs	r0, #1
 800e95a:	e774      	b.n	800e846 <_dtoa_r+0x7ee>
 800e95c:	f04f 0800 	mov.w	r8, #0
 800e960:	e7f6      	b.n	800e950 <_dtoa_r+0x8f8>
 800e962:	4698      	mov	r8, r3
 800e964:	e7f4      	b.n	800e950 <_dtoa_r+0x8f8>
 800e966:	d082      	beq.n	800e86e <_dtoa_r+0x816>
 800e968:	9a05      	ldr	r2, [sp, #20]
 800e96a:	331c      	adds	r3, #28
 800e96c:	441a      	add	r2, r3
 800e96e:	9205      	str	r2, [sp, #20]
 800e970:	9a06      	ldr	r2, [sp, #24]
 800e972:	441a      	add	r2, r3
 800e974:	441d      	add	r5, r3
 800e976:	9206      	str	r2, [sp, #24]
 800e978:	e779      	b.n	800e86e <_dtoa_r+0x816>
 800e97a:	4603      	mov	r3, r0
 800e97c:	e7f4      	b.n	800e968 <_dtoa_r+0x910>
 800e97e:	9b04      	ldr	r3, [sp, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	dc37      	bgt.n	800e9f4 <_dtoa_r+0x99c>
 800e984:	9b07      	ldr	r3, [sp, #28]
 800e986:	2b02      	cmp	r3, #2
 800e988:	dd34      	ble.n	800e9f4 <_dtoa_r+0x99c>
 800e98a:	9b04      	ldr	r3, [sp, #16]
 800e98c:	9301      	str	r3, [sp, #4]
 800e98e:	9b01      	ldr	r3, [sp, #4]
 800e990:	b963      	cbnz	r3, 800e9ac <_dtoa_r+0x954>
 800e992:	4631      	mov	r1, r6
 800e994:	2205      	movs	r2, #5
 800e996:	4620      	mov	r0, r4
 800e998:	f000 fab2 	bl	800ef00 <__multadd>
 800e99c:	4601      	mov	r1, r0
 800e99e:	4606      	mov	r6, r0
 800e9a0:	4650      	mov	r0, sl
 800e9a2:	f000 fd11 	bl	800f3c8 <__mcmp>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f73f adbb 	bgt.w	800e522 <_dtoa_r+0x4ca>
 800e9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ae:	9d00      	ldr	r5, [sp, #0]
 800e9b0:	ea6f 0b03 	mvn.w	fp, r3
 800e9b4:	f04f 0800 	mov.w	r8, #0
 800e9b8:	4631      	mov	r1, r6
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f000 fa7e 	bl	800eebc <_Bfree>
 800e9c0:	2f00      	cmp	r7, #0
 800e9c2:	f43f aeab 	beq.w	800e71c <_dtoa_r+0x6c4>
 800e9c6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ca:	d005      	beq.n	800e9d8 <_dtoa_r+0x980>
 800e9cc:	45b8      	cmp	r8, r7
 800e9ce:	d003      	beq.n	800e9d8 <_dtoa_r+0x980>
 800e9d0:	4641      	mov	r1, r8
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f000 fa72 	bl	800eebc <_Bfree>
 800e9d8:	4639      	mov	r1, r7
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f000 fa6e 	bl	800eebc <_Bfree>
 800e9e0:	e69c      	b.n	800e71c <_dtoa_r+0x6c4>
 800e9e2:	2600      	movs	r6, #0
 800e9e4:	4637      	mov	r7, r6
 800e9e6:	e7e1      	b.n	800e9ac <_dtoa_r+0x954>
 800e9e8:	46bb      	mov	fp, r7
 800e9ea:	4637      	mov	r7, r6
 800e9ec:	e599      	b.n	800e522 <_dtoa_r+0x4ca>
 800e9ee:	bf00      	nop
 800e9f0:	40240000 	.word	0x40240000
 800e9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	f000 80c8 	beq.w	800eb8c <_dtoa_r+0xb34>
 800e9fc:	9b04      	ldr	r3, [sp, #16]
 800e9fe:	9301      	str	r3, [sp, #4]
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	dd05      	ble.n	800ea10 <_dtoa_r+0x9b8>
 800ea04:	4639      	mov	r1, r7
 800ea06:	462a      	mov	r2, r5
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f000 fc71 	bl	800f2f0 <__lshift>
 800ea0e:	4607      	mov	r7, r0
 800ea10:	f1b8 0f00 	cmp.w	r8, #0
 800ea14:	d05b      	beq.n	800eace <_dtoa_r+0xa76>
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 fa0f 	bl	800ee3c <_Balloc>
 800ea1e:	4605      	mov	r5, r0
 800ea20:	b928      	cbnz	r0, 800ea2e <_dtoa_r+0x9d6>
 800ea22:	4b83      	ldr	r3, [pc, #524]	; (800ec30 <_dtoa_r+0xbd8>)
 800ea24:	4602      	mov	r2, r0
 800ea26:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ea2a:	f7ff bb2e 	b.w	800e08a <_dtoa_r+0x32>
 800ea2e:	693a      	ldr	r2, [r7, #16]
 800ea30:	3202      	adds	r2, #2
 800ea32:	0092      	lsls	r2, r2, #2
 800ea34:	f107 010c 	add.w	r1, r7, #12
 800ea38:	300c      	adds	r0, #12
 800ea3a:	f7ff fa6e 	bl	800df1a <memcpy>
 800ea3e:	2201      	movs	r2, #1
 800ea40:	4629      	mov	r1, r5
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 fc54 	bl	800f2f0 <__lshift>
 800ea48:	9b00      	ldr	r3, [sp, #0]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	9304      	str	r3, [sp, #16]
 800ea4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea52:	4413      	add	r3, r2
 800ea54:	9308      	str	r3, [sp, #32]
 800ea56:	9b02      	ldr	r3, [sp, #8]
 800ea58:	f003 0301 	and.w	r3, r3, #1
 800ea5c:	46b8      	mov	r8, r7
 800ea5e:	9306      	str	r3, [sp, #24]
 800ea60:	4607      	mov	r7, r0
 800ea62:	9b04      	ldr	r3, [sp, #16]
 800ea64:	4631      	mov	r1, r6
 800ea66:	3b01      	subs	r3, #1
 800ea68:	4650      	mov	r0, sl
 800ea6a:	9301      	str	r3, [sp, #4]
 800ea6c:	f7ff fa6a 	bl	800df44 <quorem>
 800ea70:	4641      	mov	r1, r8
 800ea72:	9002      	str	r0, [sp, #8]
 800ea74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ea78:	4650      	mov	r0, sl
 800ea7a:	f000 fca5 	bl	800f3c8 <__mcmp>
 800ea7e:	463a      	mov	r2, r7
 800ea80:	9005      	str	r0, [sp, #20]
 800ea82:	4631      	mov	r1, r6
 800ea84:	4620      	mov	r0, r4
 800ea86:	f000 fcbb 	bl	800f400 <__mdiff>
 800ea8a:	68c2      	ldr	r2, [r0, #12]
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	bb02      	cbnz	r2, 800ead2 <_dtoa_r+0xa7a>
 800ea90:	4601      	mov	r1, r0
 800ea92:	4650      	mov	r0, sl
 800ea94:	f000 fc98 	bl	800f3c8 <__mcmp>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	9209      	str	r2, [sp, #36]	; 0x24
 800eaa0:	f000 fa0c 	bl	800eebc <_Bfree>
 800eaa4:	9b07      	ldr	r3, [sp, #28]
 800eaa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaa8:	9d04      	ldr	r5, [sp, #16]
 800eaaa:	ea43 0102 	orr.w	r1, r3, r2
 800eaae:	9b06      	ldr	r3, [sp, #24]
 800eab0:	4319      	orrs	r1, r3
 800eab2:	d110      	bne.n	800ead6 <_dtoa_r+0xa7e>
 800eab4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eab8:	d029      	beq.n	800eb0e <_dtoa_r+0xab6>
 800eaba:	9b05      	ldr	r3, [sp, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	dd02      	ble.n	800eac6 <_dtoa_r+0xa6e>
 800eac0:	9b02      	ldr	r3, [sp, #8]
 800eac2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800eac6:	9b01      	ldr	r3, [sp, #4]
 800eac8:	f883 9000 	strb.w	r9, [r3]
 800eacc:	e774      	b.n	800e9b8 <_dtoa_r+0x960>
 800eace:	4638      	mov	r0, r7
 800ead0:	e7ba      	b.n	800ea48 <_dtoa_r+0x9f0>
 800ead2:	2201      	movs	r2, #1
 800ead4:	e7e1      	b.n	800ea9a <_dtoa_r+0xa42>
 800ead6:	9b05      	ldr	r3, [sp, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	db04      	blt.n	800eae6 <_dtoa_r+0xa8e>
 800eadc:	9907      	ldr	r1, [sp, #28]
 800eade:	430b      	orrs	r3, r1
 800eae0:	9906      	ldr	r1, [sp, #24]
 800eae2:	430b      	orrs	r3, r1
 800eae4:	d120      	bne.n	800eb28 <_dtoa_r+0xad0>
 800eae6:	2a00      	cmp	r2, #0
 800eae8:	dded      	ble.n	800eac6 <_dtoa_r+0xa6e>
 800eaea:	4651      	mov	r1, sl
 800eaec:	2201      	movs	r2, #1
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f000 fbfe 	bl	800f2f0 <__lshift>
 800eaf4:	4631      	mov	r1, r6
 800eaf6:	4682      	mov	sl, r0
 800eaf8:	f000 fc66 	bl	800f3c8 <__mcmp>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	dc03      	bgt.n	800eb08 <_dtoa_r+0xab0>
 800eb00:	d1e1      	bne.n	800eac6 <_dtoa_r+0xa6e>
 800eb02:	f019 0f01 	tst.w	r9, #1
 800eb06:	d0de      	beq.n	800eac6 <_dtoa_r+0xa6e>
 800eb08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eb0c:	d1d8      	bne.n	800eac0 <_dtoa_r+0xa68>
 800eb0e:	9a01      	ldr	r2, [sp, #4]
 800eb10:	2339      	movs	r3, #57	; 0x39
 800eb12:	7013      	strb	r3, [r2, #0]
 800eb14:	462b      	mov	r3, r5
 800eb16:	461d      	mov	r5, r3
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eb1e:	2a39      	cmp	r2, #57	; 0x39
 800eb20:	d06c      	beq.n	800ebfc <_dtoa_r+0xba4>
 800eb22:	3201      	adds	r2, #1
 800eb24:	701a      	strb	r2, [r3, #0]
 800eb26:	e747      	b.n	800e9b8 <_dtoa_r+0x960>
 800eb28:	2a00      	cmp	r2, #0
 800eb2a:	dd07      	ble.n	800eb3c <_dtoa_r+0xae4>
 800eb2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eb30:	d0ed      	beq.n	800eb0e <_dtoa_r+0xab6>
 800eb32:	9a01      	ldr	r2, [sp, #4]
 800eb34:	f109 0301 	add.w	r3, r9, #1
 800eb38:	7013      	strb	r3, [r2, #0]
 800eb3a:	e73d      	b.n	800e9b8 <_dtoa_r+0x960>
 800eb3c:	9b04      	ldr	r3, [sp, #16]
 800eb3e:	9a08      	ldr	r2, [sp, #32]
 800eb40:	f803 9c01 	strb.w	r9, [r3, #-1]
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d043      	beq.n	800ebd0 <_dtoa_r+0xb78>
 800eb48:	4651      	mov	r1, sl
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	220a      	movs	r2, #10
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 f9d6 	bl	800ef00 <__multadd>
 800eb54:	45b8      	cmp	r8, r7
 800eb56:	4682      	mov	sl, r0
 800eb58:	f04f 0300 	mov.w	r3, #0
 800eb5c:	f04f 020a 	mov.w	r2, #10
 800eb60:	4641      	mov	r1, r8
 800eb62:	4620      	mov	r0, r4
 800eb64:	d107      	bne.n	800eb76 <_dtoa_r+0xb1e>
 800eb66:	f000 f9cb 	bl	800ef00 <__multadd>
 800eb6a:	4680      	mov	r8, r0
 800eb6c:	4607      	mov	r7, r0
 800eb6e:	9b04      	ldr	r3, [sp, #16]
 800eb70:	3301      	adds	r3, #1
 800eb72:	9304      	str	r3, [sp, #16]
 800eb74:	e775      	b.n	800ea62 <_dtoa_r+0xa0a>
 800eb76:	f000 f9c3 	bl	800ef00 <__multadd>
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	4680      	mov	r8, r0
 800eb7e:	2300      	movs	r3, #0
 800eb80:	220a      	movs	r2, #10
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 f9bc 	bl	800ef00 <__multadd>
 800eb88:	4607      	mov	r7, r0
 800eb8a:	e7f0      	b.n	800eb6e <_dtoa_r+0xb16>
 800eb8c:	9b04      	ldr	r3, [sp, #16]
 800eb8e:	9301      	str	r3, [sp, #4]
 800eb90:	9d00      	ldr	r5, [sp, #0]
 800eb92:	4631      	mov	r1, r6
 800eb94:	4650      	mov	r0, sl
 800eb96:	f7ff f9d5 	bl	800df44 <quorem>
 800eb9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eb9e:	9b00      	ldr	r3, [sp, #0]
 800eba0:	f805 9b01 	strb.w	r9, [r5], #1
 800eba4:	1aea      	subs	r2, r5, r3
 800eba6:	9b01      	ldr	r3, [sp, #4]
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	dd07      	ble.n	800ebbc <_dtoa_r+0xb64>
 800ebac:	4651      	mov	r1, sl
 800ebae:	2300      	movs	r3, #0
 800ebb0:	220a      	movs	r2, #10
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f000 f9a4 	bl	800ef00 <__multadd>
 800ebb8:	4682      	mov	sl, r0
 800ebba:	e7ea      	b.n	800eb92 <_dtoa_r+0xb3a>
 800ebbc:	9b01      	ldr	r3, [sp, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	bfc8      	it	gt
 800ebc2:	461d      	movgt	r5, r3
 800ebc4:	9b00      	ldr	r3, [sp, #0]
 800ebc6:	bfd8      	it	le
 800ebc8:	2501      	movle	r5, #1
 800ebca:	441d      	add	r5, r3
 800ebcc:	f04f 0800 	mov.w	r8, #0
 800ebd0:	4651      	mov	r1, sl
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f000 fb8b 	bl	800f2f0 <__lshift>
 800ebda:	4631      	mov	r1, r6
 800ebdc:	4682      	mov	sl, r0
 800ebde:	f000 fbf3 	bl	800f3c8 <__mcmp>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	dc96      	bgt.n	800eb14 <_dtoa_r+0xabc>
 800ebe6:	d102      	bne.n	800ebee <_dtoa_r+0xb96>
 800ebe8:	f019 0f01 	tst.w	r9, #1
 800ebec:	d192      	bne.n	800eb14 <_dtoa_r+0xabc>
 800ebee:	462b      	mov	r3, r5
 800ebf0:	461d      	mov	r5, r3
 800ebf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebf6:	2a30      	cmp	r2, #48	; 0x30
 800ebf8:	d0fa      	beq.n	800ebf0 <_dtoa_r+0xb98>
 800ebfa:	e6dd      	b.n	800e9b8 <_dtoa_r+0x960>
 800ebfc:	9a00      	ldr	r2, [sp, #0]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d189      	bne.n	800eb16 <_dtoa_r+0xabe>
 800ec02:	f10b 0b01 	add.w	fp, fp, #1
 800ec06:	2331      	movs	r3, #49	; 0x31
 800ec08:	e796      	b.n	800eb38 <_dtoa_r+0xae0>
 800ec0a:	4b0a      	ldr	r3, [pc, #40]	; (800ec34 <_dtoa_r+0xbdc>)
 800ec0c:	f7ff ba99 	b.w	800e142 <_dtoa_r+0xea>
 800ec10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f47f aa6d 	bne.w	800e0f2 <_dtoa_r+0x9a>
 800ec18:	4b07      	ldr	r3, [pc, #28]	; (800ec38 <_dtoa_r+0xbe0>)
 800ec1a:	f7ff ba92 	b.w	800e142 <_dtoa_r+0xea>
 800ec1e:	9b01      	ldr	r3, [sp, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dcb5      	bgt.n	800eb90 <_dtoa_r+0xb38>
 800ec24:	9b07      	ldr	r3, [sp, #28]
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	f73f aeb1 	bgt.w	800e98e <_dtoa_r+0x936>
 800ec2c:	e7b0      	b.n	800eb90 <_dtoa_r+0xb38>
 800ec2e:	bf00      	nop
 800ec30:	080119d9 	.word	0x080119d9
 800ec34:	08011934 	.word	0x08011934
 800ec38:	0801195d 	.word	0x0801195d

0800ec3c <_free_r>:
 800ec3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec3e:	2900      	cmp	r1, #0
 800ec40:	d044      	beq.n	800eccc <_free_r+0x90>
 800ec42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec46:	9001      	str	r0, [sp, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec4e:	bfb8      	it	lt
 800ec50:	18e4      	addlt	r4, r4, r3
 800ec52:	f000 f8e7 	bl	800ee24 <__malloc_lock>
 800ec56:	4a1e      	ldr	r2, [pc, #120]	; (800ecd0 <_free_r+0x94>)
 800ec58:	9801      	ldr	r0, [sp, #4]
 800ec5a:	6813      	ldr	r3, [r2, #0]
 800ec5c:	b933      	cbnz	r3, 800ec6c <_free_r+0x30>
 800ec5e:	6063      	str	r3, [r4, #4]
 800ec60:	6014      	str	r4, [r2, #0]
 800ec62:	b003      	add	sp, #12
 800ec64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec68:	f000 b8e2 	b.w	800ee30 <__malloc_unlock>
 800ec6c:	42a3      	cmp	r3, r4
 800ec6e:	d908      	bls.n	800ec82 <_free_r+0x46>
 800ec70:	6825      	ldr	r5, [r4, #0]
 800ec72:	1961      	adds	r1, r4, r5
 800ec74:	428b      	cmp	r3, r1
 800ec76:	bf01      	itttt	eq
 800ec78:	6819      	ldreq	r1, [r3, #0]
 800ec7a:	685b      	ldreq	r3, [r3, #4]
 800ec7c:	1949      	addeq	r1, r1, r5
 800ec7e:	6021      	streq	r1, [r4, #0]
 800ec80:	e7ed      	b.n	800ec5e <_free_r+0x22>
 800ec82:	461a      	mov	r2, r3
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	b10b      	cbz	r3, 800ec8c <_free_r+0x50>
 800ec88:	42a3      	cmp	r3, r4
 800ec8a:	d9fa      	bls.n	800ec82 <_free_r+0x46>
 800ec8c:	6811      	ldr	r1, [r2, #0]
 800ec8e:	1855      	adds	r5, r2, r1
 800ec90:	42a5      	cmp	r5, r4
 800ec92:	d10b      	bne.n	800ecac <_free_r+0x70>
 800ec94:	6824      	ldr	r4, [r4, #0]
 800ec96:	4421      	add	r1, r4
 800ec98:	1854      	adds	r4, r2, r1
 800ec9a:	42a3      	cmp	r3, r4
 800ec9c:	6011      	str	r1, [r2, #0]
 800ec9e:	d1e0      	bne.n	800ec62 <_free_r+0x26>
 800eca0:	681c      	ldr	r4, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	6053      	str	r3, [r2, #4]
 800eca6:	440c      	add	r4, r1
 800eca8:	6014      	str	r4, [r2, #0]
 800ecaa:	e7da      	b.n	800ec62 <_free_r+0x26>
 800ecac:	d902      	bls.n	800ecb4 <_free_r+0x78>
 800ecae:	230c      	movs	r3, #12
 800ecb0:	6003      	str	r3, [r0, #0]
 800ecb2:	e7d6      	b.n	800ec62 <_free_r+0x26>
 800ecb4:	6825      	ldr	r5, [r4, #0]
 800ecb6:	1961      	adds	r1, r4, r5
 800ecb8:	428b      	cmp	r3, r1
 800ecba:	bf04      	itt	eq
 800ecbc:	6819      	ldreq	r1, [r3, #0]
 800ecbe:	685b      	ldreq	r3, [r3, #4]
 800ecc0:	6063      	str	r3, [r4, #4]
 800ecc2:	bf04      	itt	eq
 800ecc4:	1949      	addeq	r1, r1, r5
 800ecc6:	6021      	streq	r1, [r4, #0]
 800ecc8:	6054      	str	r4, [r2, #4]
 800ecca:	e7ca      	b.n	800ec62 <_free_r+0x26>
 800eccc:	b003      	add	sp, #12
 800ecce:	bd30      	pop	{r4, r5, pc}
 800ecd0:	2000184c 	.word	0x2000184c

0800ecd4 <malloc>:
 800ecd4:	4b02      	ldr	r3, [pc, #8]	; (800ece0 <malloc+0xc>)
 800ecd6:	4601      	mov	r1, r0
 800ecd8:	6818      	ldr	r0, [r3, #0]
 800ecda:	f000 b823 	b.w	800ed24 <_malloc_r>
 800ecde:	bf00      	nop
 800ece0:	20000068 	.word	0x20000068

0800ece4 <sbrk_aligned>:
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	4e0e      	ldr	r6, [pc, #56]	; (800ed20 <sbrk_aligned+0x3c>)
 800ece8:	460c      	mov	r4, r1
 800ecea:	6831      	ldr	r1, [r6, #0]
 800ecec:	4605      	mov	r5, r0
 800ecee:	b911      	cbnz	r1, 800ecf6 <sbrk_aligned+0x12>
 800ecf0:	f001 fe22 	bl	8010938 <_sbrk_r>
 800ecf4:	6030      	str	r0, [r6, #0]
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f001 fe1d 	bl	8010938 <_sbrk_r>
 800ecfe:	1c43      	adds	r3, r0, #1
 800ed00:	d00a      	beq.n	800ed18 <sbrk_aligned+0x34>
 800ed02:	1cc4      	adds	r4, r0, #3
 800ed04:	f024 0403 	bic.w	r4, r4, #3
 800ed08:	42a0      	cmp	r0, r4
 800ed0a:	d007      	beq.n	800ed1c <sbrk_aligned+0x38>
 800ed0c:	1a21      	subs	r1, r4, r0
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f001 fe12 	bl	8010938 <_sbrk_r>
 800ed14:	3001      	adds	r0, #1
 800ed16:	d101      	bne.n	800ed1c <sbrk_aligned+0x38>
 800ed18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	20001850 	.word	0x20001850

0800ed24 <_malloc_r>:
 800ed24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed28:	1ccd      	adds	r5, r1, #3
 800ed2a:	f025 0503 	bic.w	r5, r5, #3
 800ed2e:	3508      	adds	r5, #8
 800ed30:	2d0c      	cmp	r5, #12
 800ed32:	bf38      	it	cc
 800ed34:	250c      	movcc	r5, #12
 800ed36:	2d00      	cmp	r5, #0
 800ed38:	4607      	mov	r7, r0
 800ed3a:	db01      	blt.n	800ed40 <_malloc_r+0x1c>
 800ed3c:	42a9      	cmp	r1, r5
 800ed3e:	d905      	bls.n	800ed4c <_malloc_r+0x28>
 800ed40:	230c      	movs	r3, #12
 800ed42:	603b      	str	r3, [r7, #0]
 800ed44:	2600      	movs	r6, #0
 800ed46:	4630      	mov	r0, r6
 800ed48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ee20 <_malloc_r+0xfc>
 800ed50:	f000 f868 	bl	800ee24 <__malloc_lock>
 800ed54:	f8d8 3000 	ldr.w	r3, [r8]
 800ed58:	461c      	mov	r4, r3
 800ed5a:	bb5c      	cbnz	r4, 800edb4 <_malloc_r+0x90>
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	4638      	mov	r0, r7
 800ed60:	f7ff ffc0 	bl	800ece4 <sbrk_aligned>
 800ed64:	1c43      	adds	r3, r0, #1
 800ed66:	4604      	mov	r4, r0
 800ed68:	d155      	bne.n	800ee16 <_malloc_r+0xf2>
 800ed6a:	f8d8 4000 	ldr.w	r4, [r8]
 800ed6e:	4626      	mov	r6, r4
 800ed70:	2e00      	cmp	r6, #0
 800ed72:	d145      	bne.n	800ee00 <_malloc_r+0xdc>
 800ed74:	2c00      	cmp	r4, #0
 800ed76:	d048      	beq.n	800ee0a <_malloc_r+0xe6>
 800ed78:	6823      	ldr	r3, [r4, #0]
 800ed7a:	4631      	mov	r1, r6
 800ed7c:	4638      	mov	r0, r7
 800ed7e:	eb04 0903 	add.w	r9, r4, r3
 800ed82:	f001 fdd9 	bl	8010938 <_sbrk_r>
 800ed86:	4581      	cmp	r9, r0
 800ed88:	d13f      	bne.n	800ee0a <_malloc_r+0xe6>
 800ed8a:	6821      	ldr	r1, [r4, #0]
 800ed8c:	1a6d      	subs	r5, r5, r1
 800ed8e:	4629      	mov	r1, r5
 800ed90:	4638      	mov	r0, r7
 800ed92:	f7ff ffa7 	bl	800ece4 <sbrk_aligned>
 800ed96:	3001      	adds	r0, #1
 800ed98:	d037      	beq.n	800ee0a <_malloc_r+0xe6>
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	442b      	add	r3, r5
 800ed9e:	6023      	str	r3, [r4, #0]
 800eda0:	f8d8 3000 	ldr.w	r3, [r8]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d038      	beq.n	800ee1a <_malloc_r+0xf6>
 800eda8:	685a      	ldr	r2, [r3, #4]
 800edaa:	42a2      	cmp	r2, r4
 800edac:	d12b      	bne.n	800ee06 <_malloc_r+0xe2>
 800edae:	2200      	movs	r2, #0
 800edb0:	605a      	str	r2, [r3, #4]
 800edb2:	e00f      	b.n	800edd4 <_malloc_r+0xb0>
 800edb4:	6822      	ldr	r2, [r4, #0]
 800edb6:	1b52      	subs	r2, r2, r5
 800edb8:	d41f      	bmi.n	800edfa <_malloc_r+0xd6>
 800edba:	2a0b      	cmp	r2, #11
 800edbc:	d917      	bls.n	800edee <_malloc_r+0xca>
 800edbe:	1961      	adds	r1, r4, r5
 800edc0:	42a3      	cmp	r3, r4
 800edc2:	6025      	str	r5, [r4, #0]
 800edc4:	bf18      	it	ne
 800edc6:	6059      	strne	r1, [r3, #4]
 800edc8:	6863      	ldr	r3, [r4, #4]
 800edca:	bf08      	it	eq
 800edcc:	f8c8 1000 	streq.w	r1, [r8]
 800edd0:	5162      	str	r2, [r4, r5]
 800edd2:	604b      	str	r3, [r1, #4]
 800edd4:	4638      	mov	r0, r7
 800edd6:	f104 060b 	add.w	r6, r4, #11
 800edda:	f000 f829 	bl	800ee30 <__malloc_unlock>
 800edde:	f026 0607 	bic.w	r6, r6, #7
 800ede2:	1d23      	adds	r3, r4, #4
 800ede4:	1af2      	subs	r2, r6, r3
 800ede6:	d0ae      	beq.n	800ed46 <_malloc_r+0x22>
 800ede8:	1b9b      	subs	r3, r3, r6
 800edea:	50a3      	str	r3, [r4, r2]
 800edec:	e7ab      	b.n	800ed46 <_malloc_r+0x22>
 800edee:	42a3      	cmp	r3, r4
 800edf0:	6862      	ldr	r2, [r4, #4]
 800edf2:	d1dd      	bne.n	800edb0 <_malloc_r+0x8c>
 800edf4:	f8c8 2000 	str.w	r2, [r8]
 800edf8:	e7ec      	b.n	800edd4 <_malloc_r+0xb0>
 800edfa:	4623      	mov	r3, r4
 800edfc:	6864      	ldr	r4, [r4, #4]
 800edfe:	e7ac      	b.n	800ed5a <_malloc_r+0x36>
 800ee00:	4634      	mov	r4, r6
 800ee02:	6876      	ldr	r6, [r6, #4]
 800ee04:	e7b4      	b.n	800ed70 <_malloc_r+0x4c>
 800ee06:	4613      	mov	r3, r2
 800ee08:	e7cc      	b.n	800eda4 <_malloc_r+0x80>
 800ee0a:	230c      	movs	r3, #12
 800ee0c:	603b      	str	r3, [r7, #0]
 800ee0e:	4638      	mov	r0, r7
 800ee10:	f000 f80e 	bl	800ee30 <__malloc_unlock>
 800ee14:	e797      	b.n	800ed46 <_malloc_r+0x22>
 800ee16:	6025      	str	r5, [r4, #0]
 800ee18:	e7dc      	b.n	800edd4 <_malloc_r+0xb0>
 800ee1a:	605b      	str	r3, [r3, #4]
 800ee1c:	deff      	udf	#255	; 0xff
 800ee1e:	bf00      	nop
 800ee20:	2000184c 	.word	0x2000184c

0800ee24 <__malloc_lock>:
 800ee24:	4801      	ldr	r0, [pc, #4]	; (800ee2c <__malloc_lock+0x8>)
 800ee26:	f7ff b876 	b.w	800df16 <__retarget_lock_acquire_recursive>
 800ee2a:	bf00      	nop
 800ee2c:	20001848 	.word	0x20001848

0800ee30 <__malloc_unlock>:
 800ee30:	4801      	ldr	r0, [pc, #4]	; (800ee38 <__malloc_unlock+0x8>)
 800ee32:	f7ff b871 	b.w	800df18 <__retarget_lock_release_recursive>
 800ee36:	bf00      	nop
 800ee38:	20001848 	.word	0x20001848

0800ee3c <_Balloc>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	69c6      	ldr	r6, [r0, #28]
 800ee40:	4604      	mov	r4, r0
 800ee42:	460d      	mov	r5, r1
 800ee44:	b976      	cbnz	r6, 800ee64 <_Balloc+0x28>
 800ee46:	2010      	movs	r0, #16
 800ee48:	f7ff ff44 	bl	800ecd4 <malloc>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	61e0      	str	r0, [r4, #28]
 800ee50:	b920      	cbnz	r0, 800ee5c <_Balloc+0x20>
 800ee52:	4b18      	ldr	r3, [pc, #96]	; (800eeb4 <_Balloc+0x78>)
 800ee54:	4818      	ldr	r0, [pc, #96]	; (800eeb8 <_Balloc+0x7c>)
 800ee56:	216b      	movs	r1, #107	; 0x6b
 800ee58:	f001 fd86 	bl	8010968 <__assert_func>
 800ee5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee60:	6006      	str	r6, [r0, #0]
 800ee62:	60c6      	str	r6, [r0, #12]
 800ee64:	69e6      	ldr	r6, [r4, #28]
 800ee66:	68f3      	ldr	r3, [r6, #12]
 800ee68:	b183      	cbz	r3, 800ee8c <_Balloc+0x50>
 800ee6a:	69e3      	ldr	r3, [r4, #28]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee72:	b9b8      	cbnz	r0, 800eea4 <_Balloc+0x68>
 800ee74:	2101      	movs	r1, #1
 800ee76:	fa01 f605 	lsl.w	r6, r1, r5
 800ee7a:	1d72      	adds	r2, r6, #5
 800ee7c:	0092      	lsls	r2, r2, #2
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f001 fd90 	bl	80109a4 <_calloc_r>
 800ee84:	b160      	cbz	r0, 800eea0 <_Balloc+0x64>
 800ee86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee8a:	e00e      	b.n	800eeaa <_Balloc+0x6e>
 800ee8c:	2221      	movs	r2, #33	; 0x21
 800ee8e:	2104      	movs	r1, #4
 800ee90:	4620      	mov	r0, r4
 800ee92:	f001 fd87 	bl	80109a4 <_calloc_r>
 800ee96:	69e3      	ldr	r3, [r4, #28]
 800ee98:	60f0      	str	r0, [r6, #12]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d1e4      	bne.n	800ee6a <_Balloc+0x2e>
 800eea0:	2000      	movs	r0, #0
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	6802      	ldr	r2, [r0, #0]
 800eea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eeb0:	e7f7      	b.n	800eea2 <_Balloc+0x66>
 800eeb2:	bf00      	nop
 800eeb4:	0801196a 	.word	0x0801196a
 800eeb8:	080119ea 	.word	0x080119ea

0800eebc <_Bfree>:
 800eebc:	b570      	push	{r4, r5, r6, lr}
 800eebe:	69c6      	ldr	r6, [r0, #28]
 800eec0:	4605      	mov	r5, r0
 800eec2:	460c      	mov	r4, r1
 800eec4:	b976      	cbnz	r6, 800eee4 <_Bfree+0x28>
 800eec6:	2010      	movs	r0, #16
 800eec8:	f7ff ff04 	bl	800ecd4 <malloc>
 800eecc:	4602      	mov	r2, r0
 800eece:	61e8      	str	r0, [r5, #28]
 800eed0:	b920      	cbnz	r0, 800eedc <_Bfree+0x20>
 800eed2:	4b09      	ldr	r3, [pc, #36]	; (800eef8 <_Bfree+0x3c>)
 800eed4:	4809      	ldr	r0, [pc, #36]	; (800eefc <_Bfree+0x40>)
 800eed6:	218f      	movs	r1, #143	; 0x8f
 800eed8:	f001 fd46 	bl	8010968 <__assert_func>
 800eedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eee0:	6006      	str	r6, [r0, #0]
 800eee2:	60c6      	str	r6, [r0, #12]
 800eee4:	b13c      	cbz	r4, 800eef6 <_Bfree+0x3a>
 800eee6:	69eb      	ldr	r3, [r5, #28]
 800eee8:	6862      	ldr	r2, [r4, #4]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eef0:	6021      	str	r1, [r4, #0]
 800eef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eef6:	bd70      	pop	{r4, r5, r6, pc}
 800eef8:	0801196a 	.word	0x0801196a
 800eefc:	080119ea 	.word	0x080119ea

0800ef00 <__multadd>:
 800ef00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef04:	690d      	ldr	r5, [r1, #16]
 800ef06:	4607      	mov	r7, r0
 800ef08:	460c      	mov	r4, r1
 800ef0a:	461e      	mov	r6, r3
 800ef0c:	f101 0c14 	add.w	ip, r1, #20
 800ef10:	2000      	movs	r0, #0
 800ef12:	f8dc 3000 	ldr.w	r3, [ip]
 800ef16:	b299      	uxth	r1, r3
 800ef18:	fb02 6101 	mla	r1, r2, r1, r6
 800ef1c:	0c1e      	lsrs	r6, r3, #16
 800ef1e:	0c0b      	lsrs	r3, r1, #16
 800ef20:	fb02 3306 	mla	r3, r2, r6, r3
 800ef24:	b289      	uxth	r1, r1
 800ef26:	3001      	adds	r0, #1
 800ef28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef2c:	4285      	cmp	r5, r0
 800ef2e:	f84c 1b04 	str.w	r1, [ip], #4
 800ef32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef36:	dcec      	bgt.n	800ef12 <__multadd+0x12>
 800ef38:	b30e      	cbz	r6, 800ef7e <__multadd+0x7e>
 800ef3a:	68a3      	ldr	r3, [r4, #8]
 800ef3c:	42ab      	cmp	r3, r5
 800ef3e:	dc19      	bgt.n	800ef74 <__multadd+0x74>
 800ef40:	6861      	ldr	r1, [r4, #4]
 800ef42:	4638      	mov	r0, r7
 800ef44:	3101      	adds	r1, #1
 800ef46:	f7ff ff79 	bl	800ee3c <_Balloc>
 800ef4a:	4680      	mov	r8, r0
 800ef4c:	b928      	cbnz	r0, 800ef5a <__multadd+0x5a>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	4b0c      	ldr	r3, [pc, #48]	; (800ef84 <__multadd+0x84>)
 800ef52:	480d      	ldr	r0, [pc, #52]	; (800ef88 <__multadd+0x88>)
 800ef54:	21ba      	movs	r1, #186	; 0xba
 800ef56:	f001 fd07 	bl	8010968 <__assert_func>
 800ef5a:	6922      	ldr	r2, [r4, #16]
 800ef5c:	3202      	adds	r2, #2
 800ef5e:	f104 010c 	add.w	r1, r4, #12
 800ef62:	0092      	lsls	r2, r2, #2
 800ef64:	300c      	adds	r0, #12
 800ef66:	f7fe ffd8 	bl	800df1a <memcpy>
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	f7ff ffa5 	bl	800eebc <_Bfree>
 800ef72:	4644      	mov	r4, r8
 800ef74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef78:	3501      	adds	r5, #1
 800ef7a:	615e      	str	r6, [r3, #20]
 800ef7c:	6125      	str	r5, [r4, #16]
 800ef7e:	4620      	mov	r0, r4
 800ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef84:	080119d9 	.word	0x080119d9
 800ef88:	080119ea 	.word	0x080119ea

0800ef8c <__s2b>:
 800ef8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef90:	460c      	mov	r4, r1
 800ef92:	4615      	mov	r5, r2
 800ef94:	461f      	mov	r7, r3
 800ef96:	2209      	movs	r2, #9
 800ef98:	3308      	adds	r3, #8
 800ef9a:	4606      	mov	r6, r0
 800ef9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800efa0:	2100      	movs	r1, #0
 800efa2:	2201      	movs	r2, #1
 800efa4:	429a      	cmp	r2, r3
 800efa6:	db09      	blt.n	800efbc <__s2b+0x30>
 800efa8:	4630      	mov	r0, r6
 800efaa:	f7ff ff47 	bl	800ee3c <_Balloc>
 800efae:	b940      	cbnz	r0, 800efc2 <__s2b+0x36>
 800efb0:	4602      	mov	r2, r0
 800efb2:	4b19      	ldr	r3, [pc, #100]	; (800f018 <__s2b+0x8c>)
 800efb4:	4819      	ldr	r0, [pc, #100]	; (800f01c <__s2b+0x90>)
 800efb6:	21d3      	movs	r1, #211	; 0xd3
 800efb8:	f001 fcd6 	bl	8010968 <__assert_func>
 800efbc:	0052      	lsls	r2, r2, #1
 800efbe:	3101      	adds	r1, #1
 800efc0:	e7f0      	b.n	800efa4 <__s2b+0x18>
 800efc2:	9b08      	ldr	r3, [sp, #32]
 800efc4:	6143      	str	r3, [r0, #20]
 800efc6:	2d09      	cmp	r5, #9
 800efc8:	f04f 0301 	mov.w	r3, #1
 800efcc:	6103      	str	r3, [r0, #16]
 800efce:	dd16      	ble.n	800effe <__s2b+0x72>
 800efd0:	f104 0909 	add.w	r9, r4, #9
 800efd4:	46c8      	mov	r8, r9
 800efd6:	442c      	add	r4, r5
 800efd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800efdc:	4601      	mov	r1, r0
 800efde:	3b30      	subs	r3, #48	; 0x30
 800efe0:	220a      	movs	r2, #10
 800efe2:	4630      	mov	r0, r6
 800efe4:	f7ff ff8c 	bl	800ef00 <__multadd>
 800efe8:	45a0      	cmp	r8, r4
 800efea:	d1f5      	bne.n	800efd8 <__s2b+0x4c>
 800efec:	f1a5 0408 	sub.w	r4, r5, #8
 800eff0:	444c      	add	r4, r9
 800eff2:	1b2d      	subs	r5, r5, r4
 800eff4:	1963      	adds	r3, r4, r5
 800eff6:	42bb      	cmp	r3, r7
 800eff8:	db04      	blt.n	800f004 <__s2b+0x78>
 800effa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effe:	340a      	adds	r4, #10
 800f000:	2509      	movs	r5, #9
 800f002:	e7f6      	b.n	800eff2 <__s2b+0x66>
 800f004:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f008:	4601      	mov	r1, r0
 800f00a:	3b30      	subs	r3, #48	; 0x30
 800f00c:	220a      	movs	r2, #10
 800f00e:	4630      	mov	r0, r6
 800f010:	f7ff ff76 	bl	800ef00 <__multadd>
 800f014:	e7ee      	b.n	800eff4 <__s2b+0x68>
 800f016:	bf00      	nop
 800f018:	080119d9 	.word	0x080119d9
 800f01c:	080119ea 	.word	0x080119ea

0800f020 <__hi0bits>:
 800f020:	0c03      	lsrs	r3, r0, #16
 800f022:	041b      	lsls	r3, r3, #16
 800f024:	b9d3      	cbnz	r3, 800f05c <__hi0bits+0x3c>
 800f026:	0400      	lsls	r0, r0, #16
 800f028:	2310      	movs	r3, #16
 800f02a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f02e:	bf04      	itt	eq
 800f030:	0200      	lsleq	r0, r0, #8
 800f032:	3308      	addeq	r3, #8
 800f034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f038:	bf04      	itt	eq
 800f03a:	0100      	lsleq	r0, r0, #4
 800f03c:	3304      	addeq	r3, #4
 800f03e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f042:	bf04      	itt	eq
 800f044:	0080      	lsleq	r0, r0, #2
 800f046:	3302      	addeq	r3, #2
 800f048:	2800      	cmp	r0, #0
 800f04a:	db05      	blt.n	800f058 <__hi0bits+0x38>
 800f04c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f050:	f103 0301 	add.w	r3, r3, #1
 800f054:	bf08      	it	eq
 800f056:	2320      	moveq	r3, #32
 800f058:	4618      	mov	r0, r3
 800f05a:	4770      	bx	lr
 800f05c:	2300      	movs	r3, #0
 800f05e:	e7e4      	b.n	800f02a <__hi0bits+0xa>

0800f060 <__lo0bits>:
 800f060:	6803      	ldr	r3, [r0, #0]
 800f062:	f013 0207 	ands.w	r2, r3, #7
 800f066:	d00c      	beq.n	800f082 <__lo0bits+0x22>
 800f068:	07d9      	lsls	r1, r3, #31
 800f06a:	d422      	bmi.n	800f0b2 <__lo0bits+0x52>
 800f06c:	079a      	lsls	r2, r3, #30
 800f06e:	bf49      	itett	mi
 800f070:	085b      	lsrmi	r3, r3, #1
 800f072:	089b      	lsrpl	r3, r3, #2
 800f074:	6003      	strmi	r3, [r0, #0]
 800f076:	2201      	movmi	r2, #1
 800f078:	bf5c      	itt	pl
 800f07a:	6003      	strpl	r3, [r0, #0]
 800f07c:	2202      	movpl	r2, #2
 800f07e:	4610      	mov	r0, r2
 800f080:	4770      	bx	lr
 800f082:	b299      	uxth	r1, r3
 800f084:	b909      	cbnz	r1, 800f08a <__lo0bits+0x2a>
 800f086:	0c1b      	lsrs	r3, r3, #16
 800f088:	2210      	movs	r2, #16
 800f08a:	b2d9      	uxtb	r1, r3
 800f08c:	b909      	cbnz	r1, 800f092 <__lo0bits+0x32>
 800f08e:	3208      	adds	r2, #8
 800f090:	0a1b      	lsrs	r3, r3, #8
 800f092:	0719      	lsls	r1, r3, #28
 800f094:	bf04      	itt	eq
 800f096:	091b      	lsreq	r3, r3, #4
 800f098:	3204      	addeq	r2, #4
 800f09a:	0799      	lsls	r1, r3, #30
 800f09c:	bf04      	itt	eq
 800f09e:	089b      	lsreq	r3, r3, #2
 800f0a0:	3202      	addeq	r2, #2
 800f0a2:	07d9      	lsls	r1, r3, #31
 800f0a4:	d403      	bmi.n	800f0ae <__lo0bits+0x4e>
 800f0a6:	085b      	lsrs	r3, r3, #1
 800f0a8:	f102 0201 	add.w	r2, r2, #1
 800f0ac:	d003      	beq.n	800f0b6 <__lo0bits+0x56>
 800f0ae:	6003      	str	r3, [r0, #0]
 800f0b0:	e7e5      	b.n	800f07e <__lo0bits+0x1e>
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	e7e3      	b.n	800f07e <__lo0bits+0x1e>
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	e7e1      	b.n	800f07e <__lo0bits+0x1e>
	...

0800f0bc <__i2b>:
 800f0bc:	b510      	push	{r4, lr}
 800f0be:	460c      	mov	r4, r1
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	f7ff febb 	bl	800ee3c <_Balloc>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	b928      	cbnz	r0, 800f0d6 <__i2b+0x1a>
 800f0ca:	4b05      	ldr	r3, [pc, #20]	; (800f0e0 <__i2b+0x24>)
 800f0cc:	4805      	ldr	r0, [pc, #20]	; (800f0e4 <__i2b+0x28>)
 800f0ce:	f240 1145 	movw	r1, #325	; 0x145
 800f0d2:	f001 fc49 	bl	8010968 <__assert_func>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	6144      	str	r4, [r0, #20]
 800f0da:	6103      	str	r3, [r0, #16]
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	bf00      	nop
 800f0e0:	080119d9 	.word	0x080119d9
 800f0e4:	080119ea 	.word	0x080119ea

0800f0e8 <__multiply>:
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	4691      	mov	r9, r2
 800f0ee:	690a      	ldr	r2, [r1, #16]
 800f0f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	bfb8      	it	lt
 800f0f8:	460b      	movlt	r3, r1
 800f0fa:	460c      	mov	r4, r1
 800f0fc:	bfbc      	itt	lt
 800f0fe:	464c      	movlt	r4, r9
 800f100:	4699      	movlt	r9, r3
 800f102:	6927      	ldr	r7, [r4, #16]
 800f104:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f108:	68a3      	ldr	r3, [r4, #8]
 800f10a:	6861      	ldr	r1, [r4, #4]
 800f10c:	eb07 060a 	add.w	r6, r7, sl
 800f110:	42b3      	cmp	r3, r6
 800f112:	b085      	sub	sp, #20
 800f114:	bfb8      	it	lt
 800f116:	3101      	addlt	r1, #1
 800f118:	f7ff fe90 	bl	800ee3c <_Balloc>
 800f11c:	b930      	cbnz	r0, 800f12c <__multiply+0x44>
 800f11e:	4602      	mov	r2, r0
 800f120:	4b44      	ldr	r3, [pc, #272]	; (800f234 <__multiply+0x14c>)
 800f122:	4845      	ldr	r0, [pc, #276]	; (800f238 <__multiply+0x150>)
 800f124:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f128:	f001 fc1e 	bl	8010968 <__assert_func>
 800f12c:	f100 0514 	add.w	r5, r0, #20
 800f130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f134:	462b      	mov	r3, r5
 800f136:	2200      	movs	r2, #0
 800f138:	4543      	cmp	r3, r8
 800f13a:	d321      	bcc.n	800f180 <__multiply+0x98>
 800f13c:	f104 0314 	add.w	r3, r4, #20
 800f140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f144:	f109 0314 	add.w	r3, r9, #20
 800f148:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f14c:	9202      	str	r2, [sp, #8]
 800f14e:	1b3a      	subs	r2, r7, r4
 800f150:	3a15      	subs	r2, #21
 800f152:	f022 0203 	bic.w	r2, r2, #3
 800f156:	3204      	adds	r2, #4
 800f158:	f104 0115 	add.w	r1, r4, #21
 800f15c:	428f      	cmp	r7, r1
 800f15e:	bf38      	it	cc
 800f160:	2204      	movcc	r2, #4
 800f162:	9201      	str	r2, [sp, #4]
 800f164:	9a02      	ldr	r2, [sp, #8]
 800f166:	9303      	str	r3, [sp, #12]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d80c      	bhi.n	800f186 <__multiply+0x9e>
 800f16c:	2e00      	cmp	r6, #0
 800f16e:	dd03      	ble.n	800f178 <__multiply+0x90>
 800f170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f174:	2b00      	cmp	r3, #0
 800f176:	d05b      	beq.n	800f230 <__multiply+0x148>
 800f178:	6106      	str	r6, [r0, #16]
 800f17a:	b005      	add	sp, #20
 800f17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f180:	f843 2b04 	str.w	r2, [r3], #4
 800f184:	e7d8      	b.n	800f138 <__multiply+0x50>
 800f186:	f8b3 a000 	ldrh.w	sl, [r3]
 800f18a:	f1ba 0f00 	cmp.w	sl, #0
 800f18e:	d024      	beq.n	800f1da <__multiply+0xf2>
 800f190:	f104 0e14 	add.w	lr, r4, #20
 800f194:	46a9      	mov	r9, r5
 800f196:	f04f 0c00 	mov.w	ip, #0
 800f19a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f19e:	f8d9 1000 	ldr.w	r1, [r9]
 800f1a2:	fa1f fb82 	uxth.w	fp, r2
 800f1a6:	b289      	uxth	r1, r1
 800f1a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800f1ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f1b0:	f8d9 2000 	ldr.w	r2, [r9]
 800f1b4:	4461      	add	r1, ip
 800f1b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800f1be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1c2:	b289      	uxth	r1, r1
 800f1c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1c8:	4577      	cmp	r7, lr
 800f1ca:	f849 1b04 	str.w	r1, [r9], #4
 800f1ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1d2:	d8e2      	bhi.n	800f19a <__multiply+0xb2>
 800f1d4:	9a01      	ldr	r2, [sp, #4]
 800f1d6:	f845 c002 	str.w	ip, [r5, r2]
 800f1da:	9a03      	ldr	r2, [sp, #12]
 800f1dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	f1b9 0f00 	cmp.w	r9, #0
 800f1e6:	d021      	beq.n	800f22c <__multiply+0x144>
 800f1e8:	6829      	ldr	r1, [r5, #0]
 800f1ea:	f104 0c14 	add.w	ip, r4, #20
 800f1ee:	46ae      	mov	lr, r5
 800f1f0:	f04f 0a00 	mov.w	sl, #0
 800f1f4:	f8bc b000 	ldrh.w	fp, [ip]
 800f1f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f1fc:	fb09 220b 	mla	r2, r9, fp, r2
 800f200:	4452      	add	r2, sl
 800f202:	b289      	uxth	r1, r1
 800f204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f208:	f84e 1b04 	str.w	r1, [lr], #4
 800f20c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f214:	f8be 1000 	ldrh.w	r1, [lr]
 800f218:	fb09 110a 	mla	r1, r9, sl, r1
 800f21c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f220:	4567      	cmp	r7, ip
 800f222:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f226:	d8e5      	bhi.n	800f1f4 <__multiply+0x10c>
 800f228:	9a01      	ldr	r2, [sp, #4]
 800f22a:	50a9      	str	r1, [r5, r2]
 800f22c:	3504      	adds	r5, #4
 800f22e:	e799      	b.n	800f164 <__multiply+0x7c>
 800f230:	3e01      	subs	r6, #1
 800f232:	e79b      	b.n	800f16c <__multiply+0x84>
 800f234:	080119d9 	.word	0x080119d9
 800f238:	080119ea 	.word	0x080119ea

0800f23c <__pow5mult>:
 800f23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f240:	4615      	mov	r5, r2
 800f242:	f012 0203 	ands.w	r2, r2, #3
 800f246:	4606      	mov	r6, r0
 800f248:	460f      	mov	r7, r1
 800f24a:	d007      	beq.n	800f25c <__pow5mult+0x20>
 800f24c:	4c25      	ldr	r4, [pc, #148]	; (800f2e4 <__pow5mult+0xa8>)
 800f24e:	3a01      	subs	r2, #1
 800f250:	2300      	movs	r3, #0
 800f252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f256:	f7ff fe53 	bl	800ef00 <__multadd>
 800f25a:	4607      	mov	r7, r0
 800f25c:	10ad      	asrs	r5, r5, #2
 800f25e:	d03d      	beq.n	800f2dc <__pow5mult+0xa0>
 800f260:	69f4      	ldr	r4, [r6, #28]
 800f262:	b97c      	cbnz	r4, 800f284 <__pow5mult+0x48>
 800f264:	2010      	movs	r0, #16
 800f266:	f7ff fd35 	bl	800ecd4 <malloc>
 800f26a:	4602      	mov	r2, r0
 800f26c:	61f0      	str	r0, [r6, #28]
 800f26e:	b928      	cbnz	r0, 800f27c <__pow5mult+0x40>
 800f270:	4b1d      	ldr	r3, [pc, #116]	; (800f2e8 <__pow5mult+0xac>)
 800f272:	481e      	ldr	r0, [pc, #120]	; (800f2ec <__pow5mult+0xb0>)
 800f274:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f278:	f001 fb76 	bl	8010968 <__assert_func>
 800f27c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f280:	6004      	str	r4, [r0, #0]
 800f282:	60c4      	str	r4, [r0, #12]
 800f284:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f28c:	b94c      	cbnz	r4, 800f2a2 <__pow5mult+0x66>
 800f28e:	f240 2171 	movw	r1, #625	; 0x271
 800f292:	4630      	mov	r0, r6
 800f294:	f7ff ff12 	bl	800f0bc <__i2b>
 800f298:	2300      	movs	r3, #0
 800f29a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f29e:	4604      	mov	r4, r0
 800f2a0:	6003      	str	r3, [r0, #0]
 800f2a2:	f04f 0900 	mov.w	r9, #0
 800f2a6:	07eb      	lsls	r3, r5, #31
 800f2a8:	d50a      	bpl.n	800f2c0 <__pow5mult+0x84>
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	4622      	mov	r2, r4
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	f7ff ff1a 	bl	800f0e8 <__multiply>
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	4680      	mov	r8, r0
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	f7ff fdff 	bl	800eebc <_Bfree>
 800f2be:	4647      	mov	r7, r8
 800f2c0:	106d      	asrs	r5, r5, #1
 800f2c2:	d00b      	beq.n	800f2dc <__pow5mult+0xa0>
 800f2c4:	6820      	ldr	r0, [r4, #0]
 800f2c6:	b938      	cbnz	r0, 800f2d8 <__pow5mult+0x9c>
 800f2c8:	4622      	mov	r2, r4
 800f2ca:	4621      	mov	r1, r4
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f7ff ff0b 	bl	800f0e8 <__multiply>
 800f2d2:	6020      	str	r0, [r4, #0]
 800f2d4:	f8c0 9000 	str.w	r9, [r0]
 800f2d8:	4604      	mov	r4, r0
 800f2da:	e7e4      	b.n	800f2a6 <__pow5mult+0x6a>
 800f2dc:	4638      	mov	r0, r7
 800f2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2e2:	bf00      	nop
 800f2e4:	08011b38 	.word	0x08011b38
 800f2e8:	0801196a 	.word	0x0801196a
 800f2ec:	080119ea 	.word	0x080119ea

0800f2f0 <__lshift>:
 800f2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	6849      	ldr	r1, [r1, #4]
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2fe:	68a3      	ldr	r3, [r4, #8]
 800f300:	4607      	mov	r7, r0
 800f302:	4691      	mov	r9, r2
 800f304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f308:	f108 0601 	add.w	r6, r8, #1
 800f30c:	42b3      	cmp	r3, r6
 800f30e:	db0b      	blt.n	800f328 <__lshift+0x38>
 800f310:	4638      	mov	r0, r7
 800f312:	f7ff fd93 	bl	800ee3c <_Balloc>
 800f316:	4605      	mov	r5, r0
 800f318:	b948      	cbnz	r0, 800f32e <__lshift+0x3e>
 800f31a:	4602      	mov	r2, r0
 800f31c:	4b28      	ldr	r3, [pc, #160]	; (800f3c0 <__lshift+0xd0>)
 800f31e:	4829      	ldr	r0, [pc, #164]	; (800f3c4 <__lshift+0xd4>)
 800f320:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f324:	f001 fb20 	bl	8010968 <__assert_func>
 800f328:	3101      	adds	r1, #1
 800f32a:	005b      	lsls	r3, r3, #1
 800f32c:	e7ee      	b.n	800f30c <__lshift+0x1c>
 800f32e:	2300      	movs	r3, #0
 800f330:	f100 0114 	add.w	r1, r0, #20
 800f334:	f100 0210 	add.w	r2, r0, #16
 800f338:	4618      	mov	r0, r3
 800f33a:	4553      	cmp	r3, sl
 800f33c:	db33      	blt.n	800f3a6 <__lshift+0xb6>
 800f33e:	6920      	ldr	r0, [r4, #16]
 800f340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f344:	f104 0314 	add.w	r3, r4, #20
 800f348:	f019 091f 	ands.w	r9, r9, #31
 800f34c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f354:	d02b      	beq.n	800f3ae <__lshift+0xbe>
 800f356:	f1c9 0e20 	rsb	lr, r9, #32
 800f35a:	468a      	mov	sl, r1
 800f35c:	2200      	movs	r2, #0
 800f35e:	6818      	ldr	r0, [r3, #0]
 800f360:	fa00 f009 	lsl.w	r0, r0, r9
 800f364:	4310      	orrs	r0, r2
 800f366:	f84a 0b04 	str.w	r0, [sl], #4
 800f36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f36e:	459c      	cmp	ip, r3
 800f370:	fa22 f20e 	lsr.w	r2, r2, lr
 800f374:	d8f3      	bhi.n	800f35e <__lshift+0x6e>
 800f376:	ebac 0304 	sub.w	r3, ip, r4
 800f37a:	3b15      	subs	r3, #21
 800f37c:	f023 0303 	bic.w	r3, r3, #3
 800f380:	3304      	adds	r3, #4
 800f382:	f104 0015 	add.w	r0, r4, #21
 800f386:	4584      	cmp	ip, r0
 800f388:	bf38      	it	cc
 800f38a:	2304      	movcc	r3, #4
 800f38c:	50ca      	str	r2, [r1, r3]
 800f38e:	b10a      	cbz	r2, 800f394 <__lshift+0xa4>
 800f390:	f108 0602 	add.w	r6, r8, #2
 800f394:	3e01      	subs	r6, #1
 800f396:	4638      	mov	r0, r7
 800f398:	612e      	str	r6, [r5, #16]
 800f39a:	4621      	mov	r1, r4
 800f39c:	f7ff fd8e 	bl	800eebc <_Bfree>
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	e7c5      	b.n	800f33a <__lshift+0x4a>
 800f3ae:	3904      	subs	r1, #4
 800f3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3b8:	459c      	cmp	ip, r3
 800f3ba:	d8f9      	bhi.n	800f3b0 <__lshift+0xc0>
 800f3bc:	e7ea      	b.n	800f394 <__lshift+0xa4>
 800f3be:	bf00      	nop
 800f3c0:	080119d9 	.word	0x080119d9
 800f3c4:	080119ea 	.word	0x080119ea

0800f3c8 <__mcmp>:
 800f3c8:	b530      	push	{r4, r5, lr}
 800f3ca:	6902      	ldr	r2, [r0, #16]
 800f3cc:	690c      	ldr	r4, [r1, #16]
 800f3ce:	1b12      	subs	r2, r2, r4
 800f3d0:	d10e      	bne.n	800f3f0 <__mcmp+0x28>
 800f3d2:	f100 0314 	add.w	r3, r0, #20
 800f3d6:	3114      	adds	r1, #20
 800f3d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f3dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f3e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f3e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f3e8:	42a5      	cmp	r5, r4
 800f3ea:	d003      	beq.n	800f3f4 <__mcmp+0x2c>
 800f3ec:	d305      	bcc.n	800f3fa <__mcmp+0x32>
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	bd30      	pop	{r4, r5, pc}
 800f3f4:	4283      	cmp	r3, r0
 800f3f6:	d3f3      	bcc.n	800f3e0 <__mcmp+0x18>
 800f3f8:	e7fa      	b.n	800f3f0 <__mcmp+0x28>
 800f3fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3fe:	e7f7      	b.n	800f3f0 <__mcmp+0x28>

0800f400 <__mdiff>:
 800f400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	460c      	mov	r4, r1
 800f406:	4606      	mov	r6, r0
 800f408:	4611      	mov	r1, r2
 800f40a:	4620      	mov	r0, r4
 800f40c:	4690      	mov	r8, r2
 800f40e:	f7ff ffdb 	bl	800f3c8 <__mcmp>
 800f412:	1e05      	subs	r5, r0, #0
 800f414:	d110      	bne.n	800f438 <__mdiff+0x38>
 800f416:	4629      	mov	r1, r5
 800f418:	4630      	mov	r0, r6
 800f41a:	f7ff fd0f 	bl	800ee3c <_Balloc>
 800f41e:	b930      	cbnz	r0, 800f42e <__mdiff+0x2e>
 800f420:	4b3a      	ldr	r3, [pc, #232]	; (800f50c <__mdiff+0x10c>)
 800f422:	4602      	mov	r2, r0
 800f424:	f240 2137 	movw	r1, #567	; 0x237
 800f428:	4839      	ldr	r0, [pc, #228]	; (800f510 <__mdiff+0x110>)
 800f42a:	f001 fa9d 	bl	8010968 <__assert_func>
 800f42e:	2301      	movs	r3, #1
 800f430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f438:	bfa4      	itt	ge
 800f43a:	4643      	movge	r3, r8
 800f43c:	46a0      	movge	r8, r4
 800f43e:	4630      	mov	r0, r6
 800f440:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f444:	bfa6      	itte	ge
 800f446:	461c      	movge	r4, r3
 800f448:	2500      	movge	r5, #0
 800f44a:	2501      	movlt	r5, #1
 800f44c:	f7ff fcf6 	bl	800ee3c <_Balloc>
 800f450:	b920      	cbnz	r0, 800f45c <__mdiff+0x5c>
 800f452:	4b2e      	ldr	r3, [pc, #184]	; (800f50c <__mdiff+0x10c>)
 800f454:	4602      	mov	r2, r0
 800f456:	f240 2145 	movw	r1, #581	; 0x245
 800f45a:	e7e5      	b.n	800f428 <__mdiff+0x28>
 800f45c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f460:	6926      	ldr	r6, [r4, #16]
 800f462:	60c5      	str	r5, [r0, #12]
 800f464:	f104 0914 	add.w	r9, r4, #20
 800f468:	f108 0514 	add.w	r5, r8, #20
 800f46c:	f100 0e14 	add.w	lr, r0, #20
 800f470:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f478:	f108 0210 	add.w	r2, r8, #16
 800f47c:	46f2      	mov	sl, lr
 800f47e:	2100      	movs	r1, #0
 800f480:	f859 3b04 	ldr.w	r3, [r9], #4
 800f484:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f488:	fa11 f88b 	uxtah	r8, r1, fp
 800f48c:	b299      	uxth	r1, r3
 800f48e:	0c1b      	lsrs	r3, r3, #16
 800f490:	eba8 0801 	sub.w	r8, r8, r1
 800f494:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f498:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f49c:	fa1f f888 	uxth.w	r8, r8
 800f4a0:	1419      	asrs	r1, r3, #16
 800f4a2:	454e      	cmp	r6, r9
 800f4a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f4a8:	f84a 3b04 	str.w	r3, [sl], #4
 800f4ac:	d8e8      	bhi.n	800f480 <__mdiff+0x80>
 800f4ae:	1b33      	subs	r3, r6, r4
 800f4b0:	3b15      	subs	r3, #21
 800f4b2:	f023 0303 	bic.w	r3, r3, #3
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	3415      	adds	r4, #21
 800f4ba:	42a6      	cmp	r6, r4
 800f4bc:	bf38      	it	cc
 800f4be:	2304      	movcc	r3, #4
 800f4c0:	441d      	add	r5, r3
 800f4c2:	4473      	add	r3, lr
 800f4c4:	469e      	mov	lr, r3
 800f4c6:	462e      	mov	r6, r5
 800f4c8:	4566      	cmp	r6, ip
 800f4ca:	d30e      	bcc.n	800f4ea <__mdiff+0xea>
 800f4cc:	f10c 0203 	add.w	r2, ip, #3
 800f4d0:	1b52      	subs	r2, r2, r5
 800f4d2:	f022 0203 	bic.w	r2, r2, #3
 800f4d6:	3d03      	subs	r5, #3
 800f4d8:	45ac      	cmp	ip, r5
 800f4da:	bf38      	it	cc
 800f4dc:	2200      	movcc	r2, #0
 800f4de:	4413      	add	r3, r2
 800f4e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f4e4:	b17a      	cbz	r2, 800f506 <__mdiff+0x106>
 800f4e6:	6107      	str	r7, [r0, #16]
 800f4e8:	e7a4      	b.n	800f434 <__mdiff+0x34>
 800f4ea:	f856 8b04 	ldr.w	r8, [r6], #4
 800f4ee:	fa11 f288 	uxtah	r2, r1, r8
 800f4f2:	1414      	asrs	r4, r2, #16
 800f4f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f4f8:	b292      	uxth	r2, r2
 800f4fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f4fe:	f84e 2b04 	str.w	r2, [lr], #4
 800f502:	1421      	asrs	r1, r4, #16
 800f504:	e7e0      	b.n	800f4c8 <__mdiff+0xc8>
 800f506:	3f01      	subs	r7, #1
 800f508:	e7ea      	b.n	800f4e0 <__mdiff+0xe0>
 800f50a:	bf00      	nop
 800f50c:	080119d9 	.word	0x080119d9
 800f510:	080119ea 	.word	0x080119ea

0800f514 <__ulp>:
 800f514:	b082      	sub	sp, #8
 800f516:	ed8d 0b00 	vstr	d0, [sp]
 800f51a:	9a01      	ldr	r2, [sp, #4]
 800f51c:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <__ulp+0x48>)
 800f51e:	4013      	ands	r3, r2
 800f520:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f524:	2b00      	cmp	r3, #0
 800f526:	dc08      	bgt.n	800f53a <__ulp+0x26>
 800f528:	425b      	negs	r3, r3
 800f52a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f52e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f532:	da04      	bge.n	800f53e <__ulp+0x2a>
 800f534:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f538:	4113      	asrs	r3, r2
 800f53a:	2200      	movs	r2, #0
 800f53c:	e008      	b.n	800f550 <__ulp+0x3c>
 800f53e:	f1a2 0314 	sub.w	r3, r2, #20
 800f542:	2b1e      	cmp	r3, #30
 800f544:	bfda      	itte	le
 800f546:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f54a:	40da      	lsrle	r2, r3
 800f54c:	2201      	movgt	r2, #1
 800f54e:	2300      	movs	r3, #0
 800f550:	4619      	mov	r1, r3
 800f552:	4610      	mov	r0, r2
 800f554:	ec41 0b10 	vmov	d0, r0, r1
 800f558:	b002      	add	sp, #8
 800f55a:	4770      	bx	lr
 800f55c:	7ff00000 	.word	0x7ff00000

0800f560 <__b2d>:
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	6906      	ldr	r6, [r0, #16]
 800f566:	f100 0814 	add.w	r8, r0, #20
 800f56a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f56e:	1f37      	subs	r7, r6, #4
 800f570:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f574:	4610      	mov	r0, r2
 800f576:	f7ff fd53 	bl	800f020 <__hi0bits>
 800f57a:	f1c0 0320 	rsb	r3, r0, #32
 800f57e:	280a      	cmp	r0, #10
 800f580:	600b      	str	r3, [r1, #0]
 800f582:	491b      	ldr	r1, [pc, #108]	; (800f5f0 <__b2d+0x90>)
 800f584:	dc15      	bgt.n	800f5b2 <__b2d+0x52>
 800f586:	f1c0 0c0b 	rsb	ip, r0, #11
 800f58a:	fa22 f30c 	lsr.w	r3, r2, ip
 800f58e:	45b8      	cmp	r8, r7
 800f590:	ea43 0501 	orr.w	r5, r3, r1
 800f594:	bf34      	ite	cc
 800f596:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f59a:	2300      	movcs	r3, #0
 800f59c:	3015      	adds	r0, #21
 800f59e:	fa02 f000 	lsl.w	r0, r2, r0
 800f5a2:	fa23 f30c 	lsr.w	r3, r3, ip
 800f5a6:	4303      	orrs	r3, r0
 800f5a8:	461c      	mov	r4, r3
 800f5aa:	ec45 4b10 	vmov	d0, r4, r5
 800f5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b2:	45b8      	cmp	r8, r7
 800f5b4:	bf3a      	itte	cc
 800f5b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f5ba:	f1a6 0708 	subcc.w	r7, r6, #8
 800f5be:	2300      	movcs	r3, #0
 800f5c0:	380b      	subs	r0, #11
 800f5c2:	d012      	beq.n	800f5ea <__b2d+0x8a>
 800f5c4:	f1c0 0120 	rsb	r1, r0, #32
 800f5c8:	fa23 f401 	lsr.w	r4, r3, r1
 800f5cc:	4082      	lsls	r2, r0
 800f5ce:	4322      	orrs	r2, r4
 800f5d0:	4547      	cmp	r7, r8
 800f5d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f5d6:	bf8c      	ite	hi
 800f5d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f5dc:	2200      	movls	r2, #0
 800f5de:	4083      	lsls	r3, r0
 800f5e0:	40ca      	lsrs	r2, r1
 800f5e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	e7de      	b.n	800f5a8 <__b2d+0x48>
 800f5ea:	ea42 0501 	orr.w	r5, r2, r1
 800f5ee:	e7db      	b.n	800f5a8 <__b2d+0x48>
 800f5f0:	3ff00000 	.word	0x3ff00000

0800f5f4 <__d2b>:
 800f5f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5f8:	460f      	mov	r7, r1
 800f5fa:	2101      	movs	r1, #1
 800f5fc:	ec59 8b10 	vmov	r8, r9, d0
 800f600:	4616      	mov	r6, r2
 800f602:	f7ff fc1b 	bl	800ee3c <_Balloc>
 800f606:	4604      	mov	r4, r0
 800f608:	b930      	cbnz	r0, 800f618 <__d2b+0x24>
 800f60a:	4602      	mov	r2, r0
 800f60c:	4b24      	ldr	r3, [pc, #144]	; (800f6a0 <__d2b+0xac>)
 800f60e:	4825      	ldr	r0, [pc, #148]	; (800f6a4 <__d2b+0xb0>)
 800f610:	f240 310f 	movw	r1, #783	; 0x30f
 800f614:	f001 f9a8 	bl	8010968 <__assert_func>
 800f618:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f61c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f620:	bb2d      	cbnz	r5, 800f66e <__d2b+0x7a>
 800f622:	9301      	str	r3, [sp, #4]
 800f624:	f1b8 0300 	subs.w	r3, r8, #0
 800f628:	d026      	beq.n	800f678 <__d2b+0x84>
 800f62a:	4668      	mov	r0, sp
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	f7ff fd17 	bl	800f060 <__lo0bits>
 800f632:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f636:	b1e8      	cbz	r0, 800f674 <__d2b+0x80>
 800f638:	f1c0 0320 	rsb	r3, r0, #32
 800f63c:	fa02 f303 	lsl.w	r3, r2, r3
 800f640:	430b      	orrs	r3, r1
 800f642:	40c2      	lsrs	r2, r0
 800f644:	6163      	str	r3, [r4, #20]
 800f646:	9201      	str	r2, [sp, #4]
 800f648:	9b01      	ldr	r3, [sp, #4]
 800f64a:	61a3      	str	r3, [r4, #24]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	bf14      	ite	ne
 800f650:	2202      	movne	r2, #2
 800f652:	2201      	moveq	r2, #1
 800f654:	6122      	str	r2, [r4, #16]
 800f656:	b1bd      	cbz	r5, 800f688 <__d2b+0x94>
 800f658:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f65c:	4405      	add	r5, r0
 800f65e:	603d      	str	r5, [r7, #0]
 800f660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f664:	6030      	str	r0, [r6, #0]
 800f666:	4620      	mov	r0, r4
 800f668:	b003      	add	sp, #12
 800f66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f66e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f672:	e7d6      	b.n	800f622 <__d2b+0x2e>
 800f674:	6161      	str	r1, [r4, #20]
 800f676:	e7e7      	b.n	800f648 <__d2b+0x54>
 800f678:	a801      	add	r0, sp, #4
 800f67a:	f7ff fcf1 	bl	800f060 <__lo0bits>
 800f67e:	9b01      	ldr	r3, [sp, #4]
 800f680:	6163      	str	r3, [r4, #20]
 800f682:	3020      	adds	r0, #32
 800f684:	2201      	movs	r2, #1
 800f686:	e7e5      	b.n	800f654 <__d2b+0x60>
 800f688:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f68c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f690:	6038      	str	r0, [r7, #0]
 800f692:	6918      	ldr	r0, [r3, #16]
 800f694:	f7ff fcc4 	bl	800f020 <__hi0bits>
 800f698:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f69c:	e7e2      	b.n	800f664 <__d2b+0x70>
 800f69e:	bf00      	nop
 800f6a0:	080119d9 	.word	0x080119d9
 800f6a4:	080119ea 	.word	0x080119ea

0800f6a8 <__ratio>:
 800f6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	4688      	mov	r8, r1
 800f6ae:	4669      	mov	r1, sp
 800f6b0:	4681      	mov	r9, r0
 800f6b2:	f7ff ff55 	bl	800f560 <__b2d>
 800f6b6:	a901      	add	r1, sp, #4
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	ec55 4b10 	vmov	r4, r5, d0
 800f6be:	f7ff ff4f 	bl	800f560 <__b2d>
 800f6c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f6ca:	eba3 0c02 	sub.w	ip, r3, r2
 800f6ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f6d2:	1a9b      	subs	r3, r3, r2
 800f6d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f6d8:	ec51 0b10 	vmov	r0, r1, d0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	bfd6      	itet	le
 800f6e0:	460a      	movle	r2, r1
 800f6e2:	462a      	movgt	r2, r5
 800f6e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f6e8:	468b      	mov	fp, r1
 800f6ea:	462f      	mov	r7, r5
 800f6ec:	bfd4      	ite	le
 800f6ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f6f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	ee10 2a10 	vmov	r2, s0
 800f6fc:	465b      	mov	r3, fp
 800f6fe:	4639      	mov	r1, r7
 800f700:	f7f1 f8c4 	bl	800088c <__aeabi_ddiv>
 800f704:	ec41 0b10 	vmov	d0, r0, r1
 800f708:	b003      	add	sp, #12
 800f70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f70e <__copybits>:
 800f70e:	3901      	subs	r1, #1
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	1149      	asrs	r1, r1, #5
 800f714:	6914      	ldr	r4, [r2, #16]
 800f716:	3101      	adds	r1, #1
 800f718:	f102 0314 	add.w	r3, r2, #20
 800f71c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f720:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f724:	1f05      	subs	r5, r0, #4
 800f726:	42a3      	cmp	r3, r4
 800f728:	d30c      	bcc.n	800f744 <__copybits+0x36>
 800f72a:	1aa3      	subs	r3, r4, r2
 800f72c:	3b11      	subs	r3, #17
 800f72e:	f023 0303 	bic.w	r3, r3, #3
 800f732:	3211      	adds	r2, #17
 800f734:	42a2      	cmp	r2, r4
 800f736:	bf88      	it	hi
 800f738:	2300      	movhi	r3, #0
 800f73a:	4418      	add	r0, r3
 800f73c:	2300      	movs	r3, #0
 800f73e:	4288      	cmp	r0, r1
 800f740:	d305      	bcc.n	800f74e <__copybits+0x40>
 800f742:	bd70      	pop	{r4, r5, r6, pc}
 800f744:	f853 6b04 	ldr.w	r6, [r3], #4
 800f748:	f845 6f04 	str.w	r6, [r5, #4]!
 800f74c:	e7eb      	b.n	800f726 <__copybits+0x18>
 800f74e:	f840 3b04 	str.w	r3, [r0], #4
 800f752:	e7f4      	b.n	800f73e <__copybits+0x30>

0800f754 <__any_on>:
 800f754:	f100 0214 	add.w	r2, r0, #20
 800f758:	6900      	ldr	r0, [r0, #16]
 800f75a:	114b      	asrs	r3, r1, #5
 800f75c:	4298      	cmp	r0, r3
 800f75e:	b510      	push	{r4, lr}
 800f760:	db11      	blt.n	800f786 <__any_on+0x32>
 800f762:	dd0a      	ble.n	800f77a <__any_on+0x26>
 800f764:	f011 011f 	ands.w	r1, r1, #31
 800f768:	d007      	beq.n	800f77a <__any_on+0x26>
 800f76a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f76e:	fa24 f001 	lsr.w	r0, r4, r1
 800f772:	fa00 f101 	lsl.w	r1, r0, r1
 800f776:	428c      	cmp	r4, r1
 800f778:	d10b      	bne.n	800f792 <__any_on+0x3e>
 800f77a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f77e:	4293      	cmp	r3, r2
 800f780:	d803      	bhi.n	800f78a <__any_on+0x36>
 800f782:	2000      	movs	r0, #0
 800f784:	bd10      	pop	{r4, pc}
 800f786:	4603      	mov	r3, r0
 800f788:	e7f7      	b.n	800f77a <__any_on+0x26>
 800f78a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f78e:	2900      	cmp	r1, #0
 800f790:	d0f5      	beq.n	800f77e <__any_on+0x2a>
 800f792:	2001      	movs	r0, #1
 800f794:	e7f6      	b.n	800f784 <__any_on+0x30>

0800f796 <_malloc_usable_size_r>:
 800f796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f79a:	1f18      	subs	r0, r3, #4
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	bfbc      	itt	lt
 800f7a0:	580b      	ldrlt	r3, [r1, r0]
 800f7a2:	18c0      	addlt	r0, r0, r3
 800f7a4:	4770      	bx	lr

0800f7a6 <sulp>:
 800f7a6:	b570      	push	{r4, r5, r6, lr}
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	460d      	mov	r5, r1
 800f7ac:	ec45 4b10 	vmov	d0, r4, r5
 800f7b0:	4616      	mov	r6, r2
 800f7b2:	f7ff feaf 	bl	800f514 <__ulp>
 800f7b6:	ec51 0b10 	vmov	r0, r1, d0
 800f7ba:	b17e      	cbz	r6, 800f7dc <sulp+0x36>
 800f7bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f7c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dd09      	ble.n	800f7dc <sulp+0x36>
 800f7c8:	051b      	lsls	r3, r3, #20
 800f7ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f7ce:	2400      	movs	r4, #0
 800f7d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f7d4:	4622      	mov	r2, r4
 800f7d6:	462b      	mov	r3, r5
 800f7d8:	f7f0 ff2e 	bl	8000638 <__aeabi_dmul>
 800f7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f7e0 <_strtod_l>:
 800f7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e4:	ed2d 8b02 	vpush	{d8}
 800f7e8:	b09b      	sub	sp, #108	; 0x6c
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	9216      	str	r2, [sp, #88]	; 0x58
 800f7f2:	460d      	mov	r5, r1
 800f7f4:	f04f 0800 	mov.w	r8, #0
 800f7f8:	f04f 0900 	mov.w	r9, #0
 800f7fc:	460a      	mov	r2, r1
 800f7fe:	9215      	str	r2, [sp, #84]	; 0x54
 800f800:	7811      	ldrb	r1, [r2, #0]
 800f802:	292b      	cmp	r1, #43	; 0x2b
 800f804:	d04c      	beq.n	800f8a0 <_strtod_l+0xc0>
 800f806:	d83a      	bhi.n	800f87e <_strtod_l+0x9e>
 800f808:	290d      	cmp	r1, #13
 800f80a:	d834      	bhi.n	800f876 <_strtod_l+0x96>
 800f80c:	2908      	cmp	r1, #8
 800f80e:	d834      	bhi.n	800f87a <_strtod_l+0x9a>
 800f810:	2900      	cmp	r1, #0
 800f812:	d03d      	beq.n	800f890 <_strtod_l+0xb0>
 800f814:	2200      	movs	r2, #0
 800f816:	920a      	str	r2, [sp, #40]	; 0x28
 800f818:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f81a:	7832      	ldrb	r2, [r6, #0]
 800f81c:	2a30      	cmp	r2, #48	; 0x30
 800f81e:	f040 80b4 	bne.w	800f98a <_strtod_l+0x1aa>
 800f822:	7872      	ldrb	r2, [r6, #1]
 800f824:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f828:	2a58      	cmp	r2, #88	; 0x58
 800f82a:	d170      	bne.n	800f90e <_strtod_l+0x12e>
 800f82c:	9302      	str	r3, [sp, #8]
 800f82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	ab16      	add	r3, sp, #88	; 0x58
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	4a8e      	ldr	r2, [pc, #568]	; (800fa70 <_strtod_l+0x290>)
 800f838:	ab17      	add	r3, sp, #92	; 0x5c
 800f83a:	a915      	add	r1, sp, #84	; 0x54
 800f83c:	4620      	mov	r0, r4
 800f83e:	f001 f92f 	bl	8010aa0 <__gethex>
 800f842:	f010 070f 	ands.w	r7, r0, #15
 800f846:	4605      	mov	r5, r0
 800f848:	d005      	beq.n	800f856 <_strtod_l+0x76>
 800f84a:	2f06      	cmp	r7, #6
 800f84c:	d12a      	bne.n	800f8a4 <_strtod_l+0xc4>
 800f84e:	3601      	adds	r6, #1
 800f850:	2300      	movs	r3, #0
 800f852:	9615      	str	r6, [sp, #84]	; 0x54
 800f854:	930a      	str	r3, [sp, #40]	; 0x28
 800f856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f040 857f 	bne.w	801035c <_strtod_l+0xb7c>
 800f85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f860:	b1db      	cbz	r3, 800f89a <_strtod_l+0xba>
 800f862:	4642      	mov	r2, r8
 800f864:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f868:	ec43 2b10 	vmov	d0, r2, r3
 800f86c:	b01b      	add	sp, #108	; 0x6c
 800f86e:	ecbd 8b02 	vpop	{d8}
 800f872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f876:	2920      	cmp	r1, #32
 800f878:	d1cc      	bne.n	800f814 <_strtod_l+0x34>
 800f87a:	3201      	adds	r2, #1
 800f87c:	e7bf      	b.n	800f7fe <_strtod_l+0x1e>
 800f87e:	292d      	cmp	r1, #45	; 0x2d
 800f880:	d1c8      	bne.n	800f814 <_strtod_l+0x34>
 800f882:	2101      	movs	r1, #1
 800f884:	910a      	str	r1, [sp, #40]	; 0x28
 800f886:	1c51      	adds	r1, r2, #1
 800f888:	9115      	str	r1, [sp, #84]	; 0x54
 800f88a:	7852      	ldrb	r2, [r2, #1]
 800f88c:	2a00      	cmp	r2, #0
 800f88e:	d1c3      	bne.n	800f818 <_strtod_l+0x38>
 800f890:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f892:	9515      	str	r5, [sp, #84]	; 0x54
 800f894:	2b00      	cmp	r3, #0
 800f896:	f040 855f 	bne.w	8010358 <_strtod_l+0xb78>
 800f89a:	4642      	mov	r2, r8
 800f89c:	464b      	mov	r3, r9
 800f89e:	e7e3      	b.n	800f868 <_strtod_l+0x88>
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	e7ef      	b.n	800f884 <_strtod_l+0xa4>
 800f8a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f8a6:	b13a      	cbz	r2, 800f8b8 <_strtod_l+0xd8>
 800f8a8:	2135      	movs	r1, #53	; 0x35
 800f8aa:	a818      	add	r0, sp, #96	; 0x60
 800f8ac:	f7ff ff2f 	bl	800f70e <__copybits>
 800f8b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f7ff fb02 	bl	800eebc <_Bfree>
 800f8b8:	3f01      	subs	r7, #1
 800f8ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8bc:	2f04      	cmp	r7, #4
 800f8be:	d806      	bhi.n	800f8ce <_strtod_l+0xee>
 800f8c0:	e8df f007 	tbb	[pc, r7]
 800f8c4:	201d0314 	.word	0x201d0314
 800f8c8:	14          	.byte	0x14
 800f8c9:	00          	.byte	0x00
 800f8ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800f8ce:	05e9      	lsls	r1, r5, #23
 800f8d0:	bf48      	it	mi
 800f8d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800f8d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f8da:	0d1b      	lsrs	r3, r3, #20
 800f8dc:	051b      	lsls	r3, r3, #20
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1b9      	bne.n	800f856 <_strtod_l+0x76>
 800f8e2:	f7fe faed 	bl	800dec0 <__errno>
 800f8e6:	2322      	movs	r3, #34	; 0x22
 800f8e8:	6003      	str	r3, [r0, #0]
 800f8ea:	e7b4      	b.n	800f856 <_strtod_l+0x76>
 800f8ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800f8f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f8f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f8f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f8fc:	e7e7      	b.n	800f8ce <_strtod_l+0xee>
 800f8fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fa78 <_strtod_l+0x298>
 800f902:	e7e4      	b.n	800f8ce <_strtod_l+0xee>
 800f904:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f908:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f90c:	e7df      	b.n	800f8ce <_strtod_l+0xee>
 800f90e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f910:	1c5a      	adds	r2, r3, #1
 800f912:	9215      	str	r2, [sp, #84]	; 0x54
 800f914:	785b      	ldrb	r3, [r3, #1]
 800f916:	2b30      	cmp	r3, #48	; 0x30
 800f918:	d0f9      	beq.n	800f90e <_strtod_l+0x12e>
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d09b      	beq.n	800f856 <_strtod_l+0x76>
 800f91e:	2301      	movs	r3, #1
 800f920:	f04f 0a00 	mov.w	sl, #0
 800f924:	9304      	str	r3, [sp, #16]
 800f926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f928:	930b      	str	r3, [sp, #44]	; 0x2c
 800f92a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f92e:	46d3      	mov	fp, sl
 800f930:	220a      	movs	r2, #10
 800f932:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f934:	7806      	ldrb	r6, [r0, #0]
 800f936:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f93a:	b2d9      	uxtb	r1, r3
 800f93c:	2909      	cmp	r1, #9
 800f93e:	d926      	bls.n	800f98e <_strtod_l+0x1ae>
 800f940:	494c      	ldr	r1, [pc, #304]	; (800fa74 <_strtod_l+0x294>)
 800f942:	2201      	movs	r2, #1
 800f944:	f000 ffe6 	bl	8010914 <strncmp>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d030      	beq.n	800f9ae <_strtod_l+0x1ce>
 800f94c:	2000      	movs	r0, #0
 800f94e:	4632      	mov	r2, r6
 800f950:	9005      	str	r0, [sp, #20]
 800f952:	465e      	mov	r6, fp
 800f954:	4603      	mov	r3, r0
 800f956:	2a65      	cmp	r2, #101	; 0x65
 800f958:	d001      	beq.n	800f95e <_strtod_l+0x17e>
 800f95a:	2a45      	cmp	r2, #69	; 0x45
 800f95c:	d113      	bne.n	800f986 <_strtod_l+0x1a6>
 800f95e:	b91e      	cbnz	r6, 800f968 <_strtod_l+0x188>
 800f960:	9a04      	ldr	r2, [sp, #16]
 800f962:	4302      	orrs	r2, r0
 800f964:	d094      	beq.n	800f890 <_strtod_l+0xb0>
 800f966:	2600      	movs	r6, #0
 800f968:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f96a:	1c6a      	adds	r2, r5, #1
 800f96c:	9215      	str	r2, [sp, #84]	; 0x54
 800f96e:	786a      	ldrb	r2, [r5, #1]
 800f970:	2a2b      	cmp	r2, #43	; 0x2b
 800f972:	d074      	beq.n	800fa5e <_strtod_l+0x27e>
 800f974:	2a2d      	cmp	r2, #45	; 0x2d
 800f976:	d078      	beq.n	800fa6a <_strtod_l+0x28a>
 800f978:	f04f 0c00 	mov.w	ip, #0
 800f97c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f980:	2909      	cmp	r1, #9
 800f982:	d97f      	bls.n	800fa84 <_strtod_l+0x2a4>
 800f984:	9515      	str	r5, [sp, #84]	; 0x54
 800f986:	2700      	movs	r7, #0
 800f988:	e09e      	b.n	800fac8 <_strtod_l+0x2e8>
 800f98a:	2300      	movs	r3, #0
 800f98c:	e7c8      	b.n	800f920 <_strtod_l+0x140>
 800f98e:	f1bb 0f08 	cmp.w	fp, #8
 800f992:	bfd8      	it	le
 800f994:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f996:	f100 0001 	add.w	r0, r0, #1
 800f99a:	bfda      	itte	le
 800f99c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f9a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800f9a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f9a6:	f10b 0b01 	add.w	fp, fp, #1
 800f9aa:	9015      	str	r0, [sp, #84]	; 0x54
 800f9ac:	e7c1      	b.n	800f932 <_strtod_l+0x152>
 800f9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	9215      	str	r2, [sp, #84]	; 0x54
 800f9b4:	785a      	ldrb	r2, [r3, #1]
 800f9b6:	f1bb 0f00 	cmp.w	fp, #0
 800f9ba:	d037      	beq.n	800fa2c <_strtod_l+0x24c>
 800f9bc:	9005      	str	r0, [sp, #20]
 800f9be:	465e      	mov	r6, fp
 800f9c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f9c4:	2b09      	cmp	r3, #9
 800f9c6:	d912      	bls.n	800f9ee <_strtod_l+0x20e>
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e7c4      	b.n	800f956 <_strtod_l+0x176>
 800f9cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9ce:	1c5a      	adds	r2, r3, #1
 800f9d0:	9215      	str	r2, [sp, #84]	; 0x54
 800f9d2:	785a      	ldrb	r2, [r3, #1]
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	2a30      	cmp	r2, #48	; 0x30
 800f9d8:	d0f8      	beq.n	800f9cc <_strtod_l+0x1ec>
 800f9da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f9de:	2b08      	cmp	r3, #8
 800f9e0:	f200 84c1 	bhi.w	8010366 <_strtod_l+0xb86>
 800f9e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9e6:	9005      	str	r0, [sp, #20]
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9ec:	4606      	mov	r6, r0
 800f9ee:	3a30      	subs	r2, #48	; 0x30
 800f9f0:	f100 0301 	add.w	r3, r0, #1
 800f9f4:	d014      	beq.n	800fa20 <_strtod_l+0x240>
 800f9f6:	9905      	ldr	r1, [sp, #20]
 800f9f8:	4419      	add	r1, r3
 800f9fa:	9105      	str	r1, [sp, #20]
 800f9fc:	4633      	mov	r3, r6
 800f9fe:	eb00 0c06 	add.w	ip, r0, r6
 800fa02:	210a      	movs	r1, #10
 800fa04:	4563      	cmp	r3, ip
 800fa06:	d113      	bne.n	800fa30 <_strtod_l+0x250>
 800fa08:	1833      	adds	r3, r6, r0
 800fa0a:	2b08      	cmp	r3, #8
 800fa0c:	f106 0601 	add.w	r6, r6, #1
 800fa10:	4406      	add	r6, r0
 800fa12:	dc1a      	bgt.n	800fa4a <_strtod_l+0x26a>
 800fa14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa16:	230a      	movs	r3, #10
 800fa18:	fb03 2301 	mla	r3, r3, r1, r2
 800fa1c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa1e:	2300      	movs	r3, #0
 800fa20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa22:	1c51      	adds	r1, r2, #1
 800fa24:	9115      	str	r1, [sp, #84]	; 0x54
 800fa26:	7852      	ldrb	r2, [r2, #1]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	e7c9      	b.n	800f9c0 <_strtod_l+0x1e0>
 800fa2c:	4658      	mov	r0, fp
 800fa2e:	e7d2      	b.n	800f9d6 <_strtod_l+0x1f6>
 800fa30:	2b08      	cmp	r3, #8
 800fa32:	f103 0301 	add.w	r3, r3, #1
 800fa36:	dc03      	bgt.n	800fa40 <_strtod_l+0x260>
 800fa38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fa3a:	434f      	muls	r7, r1
 800fa3c:	9709      	str	r7, [sp, #36]	; 0x24
 800fa3e:	e7e1      	b.n	800fa04 <_strtod_l+0x224>
 800fa40:	2b10      	cmp	r3, #16
 800fa42:	bfd8      	it	le
 800fa44:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fa48:	e7dc      	b.n	800fa04 <_strtod_l+0x224>
 800fa4a:	2e10      	cmp	r6, #16
 800fa4c:	bfdc      	itt	le
 800fa4e:	230a      	movle	r3, #10
 800fa50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fa54:	e7e3      	b.n	800fa1e <_strtod_l+0x23e>
 800fa56:	2300      	movs	r3, #0
 800fa58:	9305      	str	r3, [sp, #20]
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e780      	b.n	800f960 <_strtod_l+0x180>
 800fa5e:	f04f 0c00 	mov.w	ip, #0
 800fa62:	1caa      	adds	r2, r5, #2
 800fa64:	9215      	str	r2, [sp, #84]	; 0x54
 800fa66:	78aa      	ldrb	r2, [r5, #2]
 800fa68:	e788      	b.n	800f97c <_strtod_l+0x19c>
 800fa6a:	f04f 0c01 	mov.w	ip, #1
 800fa6e:	e7f8      	b.n	800fa62 <_strtod_l+0x282>
 800fa70:	08011b48 	.word	0x08011b48
 800fa74:	08011b44 	.word	0x08011b44
 800fa78:	7ff00000 	.word	0x7ff00000
 800fa7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa7e:	1c51      	adds	r1, r2, #1
 800fa80:	9115      	str	r1, [sp, #84]	; 0x54
 800fa82:	7852      	ldrb	r2, [r2, #1]
 800fa84:	2a30      	cmp	r2, #48	; 0x30
 800fa86:	d0f9      	beq.n	800fa7c <_strtod_l+0x29c>
 800fa88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fa8c:	2908      	cmp	r1, #8
 800fa8e:	f63f af7a 	bhi.w	800f986 <_strtod_l+0x1a6>
 800fa92:	3a30      	subs	r2, #48	; 0x30
 800fa94:	9208      	str	r2, [sp, #32]
 800fa96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa98:	920c      	str	r2, [sp, #48]	; 0x30
 800fa9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa9c:	1c57      	adds	r7, r2, #1
 800fa9e:	9715      	str	r7, [sp, #84]	; 0x54
 800faa0:	7852      	ldrb	r2, [r2, #1]
 800faa2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800faa6:	f1be 0f09 	cmp.w	lr, #9
 800faaa:	d938      	bls.n	800fb1e <_strtod_l+0x33e>
 800faac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800faae:	1a7f      	subs	r7, r7, r1
 800fab0:	2f08      	cmp	r7, #8
 800fab2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fab6:	dc03      	bgt.n	800fac0 <_strtod_l+0x2e0>
 800fab8:	9908      	ldr	r1, [sp, #32]
 800faba:	428f      	cmp	r7, r1
 800fabc:	bfa8      	it	ge
 800fabe:	460f      	movge	r7, r1
 800fac0:	f1bc 0f00 	cmp.w	ip, #0
 800fac4:	d000      	beq.n	800fac8 <_strtod_l+0x2e8>
 800fac6:	427f      	negs	r7, r7
 800fac8:	2e00      	cmp	r6, #0
 800faca:	d14f      	bne.n	800fb6c <_strtod_l+0x38c>
 800facc:	9904      	ldr	r1, [sp, #16]
 800face:	4301      	orrs	r1, r0
 800fad0:	f47f aec1 	bne.w	800f856 <_strtod_l+0x76>
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f47f aedb 	bne.w	800f890 <_strtod_l+0xb0>
 800fada:	2a69      	cmp	r2, #105	; 0x69
 800fadc:	d029      	beq.n	800fb32 <_strtod_l+0x352>
 800fade:	dc26      	bgt.n	800fb2e <_strtod_l+0x34e>
 800fae0:	2a49      	cmp	r2, #73	; 0x49
 800fae2:	d026      	beq.n	800fb32 <_strtod_l+0x352>
 800fae4:	2a4e      	cmp	r2, #78	; 0x4e
 800fae6:	f47f aed3 	bne.w	800f890 <_strtod_l+0xb0>
 800faea:	499b      	ldr	r1, [pc, #620]	; (800fd58 <_strtod_l+0x578>)
 800faec:	a815      	add	r0, sp, #84	; 0x54
 800faee:	f001 fa17 	bl	8010f20 <__match>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f43f aecc 	beq.w	800f890 <_strtod_l+0xb0>
 800faf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	2b28      	cmp	r3, #40	; 0x28
 800fafe:	d12f      	bne.n	800fb60 <_strtod_l+0x380>
 800fb00:	4996      	ldr	r1, [pc, #600]	; (800fd5c <_strtod_l+0x57c>)
 800fb02:	aa18      	add	r2, sp, #96	; 0x60
 800fb04:	a815      	add	r0, sp, #84	; 0x54
 800fb06:	f001 fa1f 	bl	8010f48 <__hexnan>
 800fb0a:	2805      	cmp	r0, #5
 800fb0c:	d128      	bne.n	800fb60 <_strtod_l+0x380>
 800fb0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fb14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fb18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fb1c:	e69b      	b.n	800f856 <_strtod_l+0x76>
 800fb1e:	9f08      	ldr	r7, [sp, #32]
 800fb20:	210a      	movs	r1, #10
 800fb22:	fb01 2107 	mla	r1, r1, r7, r2
 800fb26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fb2a:	9208      	str	r2, [sp, #32]
 800fb2c:	e7b5      	b.n	800fa9a <_strtod_l+0x2ba>
 800fb2e:	2a6e      	cmp	r2, #110	; 0x6e
 800fb30:	e7d9      	b.n	800fae6 <_strtod_l+0x306>
 800fb32:	498b      	ldr	r1, [pc, #556]	; (800fd60 <_strtod_l+0x580>)
 800fb34:	a815      	add	r0, sp, #84	; 0x54
 800fb36:	f001 f9f3 	bl	8010f20 <__match>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	f43f aea8 	beq.w	800f890 <_strtod_l+0xb0>
 800fb40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb42:	4988      	ldr	r1, [pc, #544]	; (800fd64 <_strtod_l+0x584>)
 800fb44:	3b01      	subs	r3, #1
 800fb46:	a815      	add	r0, sp, #84	; 0x54
 800fb48:	9315      	str	r3, [sp, #84]	; 0x54
 800fb4a:	f001 f9e9 	bl	8010f20 <__match>
 800fb4e:	b910      	cbnz	r0, 800fb56 <_strtod_l+0x376>
 800fb50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb52:	3301      	adds	r3, #1
 800fb54:	9315      	str	r3, [sp, #84]	; 0x54
 800fb56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800fd74 <_strtod_l+0x594>
 800fb5a:	f04f 0800 	mov.w	r8, #0
 800fb5e:	e67a      	b.n	800f856 <_strtod_l+0x76>
 800fb60:	4881      	ldr	r0, [pc, #516]	; (800fd68 <_strtod_l+0x588>)
 800fb62:	f000 fef9 	bl	8010958 <nan>
 800fb66:	ec59 8b10 	vmov	r8, r9, d0
 800fb6a:	e674      	b.n	800f856 <_strtod_l+0x76>
 800fb6c:	9b05      	ldr	r3, [sp, #20]
 800fb6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb70:	1afb      	subs	r3, r7, r3
 800fb72:	f1bb 0f00 	cmp.w	fp, #0
 800fb76:	bf08      	it	eq
 800fb78:	46b3      	moveq	fp, r6
 800fb7a:	2e10      	cmp	r6, #16
 800fb7c:	9308      	str	r3, [sp, #32]
 800fb7e:	4635      	mov	r5, r6
 800fb80:	bfa8      	it	ge
 800fb82:	2510      	movge	r5, #16
 800fb84:	f7f0 fcde 	bl	8000544 <__aeabi_ui2d>
 800fb88:	2e09      	cmp	r6, #9
 800fb8a:	4680      	mov	r8, r0
 800fb8c:	4689      	mov	r9, r1
 800fb8e:	dd13      	ble.n	800fbb8 <_strtod_l+0x3d8>
 800fb90:	4b76      	ldr	r3, [pc, #472]	; (800fd6c <_strtod_l+0x58c>)
 800fb92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fb96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fb9a:	f7f0 fd4d 	bl	8000638 <__aeabi_dmul>
 800fb9e:	4680      	mov	r8, r0
 800fba0:	4650      	mov	r0, sl
 800fba2:	4689      	mov	r9, r1
 800fba4:	f7f0 fcce 	bl	8000544 <__aeabi_ui2d>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	4640      	mov	r0, r8
 800fbae:	4649      	mov	r1, r9
 800fbb0:	f7f0 fb8c 	bl	80002cc <__adddf3>
 800fbb4:	4680      	mov	r8, r0
 800fbb6:	4689      	mov	r9, r1
 800fbb8:	2e0f      	cmp	r6, #15
 800fbba:	dc38      	bgt.n	800fc2e <_strtod_l+0x44e>
 800fbbc:	9b08      	ldr	r3, [sp, #32]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	f43f ae49 	beq.w	800f856 <_strtod_l+0x76>
 800fbc4:	dd24      	ble.n	800fc10 <_strtod_l+0x430>
 800fbc6:	2b16      	cmp	r3, #22
 800fbc8:	dc0b      	bgt.n	800fbe2 <_strtod_l+0x402>
 800fbca:	4968      	ldr	r1, [pc, #416]	; (800fd6c <_strtod_l+0x58c>)
 800fbcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbd4:	4642      	mov	r2, r8
 800fbd6:	464b      	mov	r3, r9
 800fbd8:	f7f0 fd2e 	bl	8000638 <__aeabi_dmul>
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	e639      	b.n	800f856 <_strtod_l+0x76>
 800fbe2:	9a08      	ldr	r2, [sp, #32]
 800fbe4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	db20      	blt.n	800fc2e <_strtod_l+0x44e>
 800fbec:	4c5f      	ldr	r4, [pc, #380]	; (800fd6c <_strtod_l+0x58c>)
 800fbee:	f1c6 060f 	rsb	r6, r6, #15
 800fbf2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800fbf6:	4642      	mov	r2, r8
 800fbf8:	464b      	mov	r3, r9
 800fbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbfe:	f7f0 fd1b 	bl	8000638 <__aeabi_dmul>
 800fc02:	9b08      	ldr	r3, [sp, #32]
 800fc04:	1b9e      	subs	r6, r3, r6
 800fc06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800fc0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fc0e:	e7e3      	b.n	800fbd8 <_strtod_l+0x3f8>
 800fc10:	9b08      	ldr	r3, [sp, #32]
 800fc12:	3316      	adds	r3, #22
 800fc14:	db0b      	blt.n	800fc2e <_strtod_l+0x44e>
 800fc16:	9b05      	ldr	r3, [sp, #20]
 800fc18:	1bdf      	subs	r7, r3, r7
 800fc1a:	4b54      	ldr	r3, [pc, #336]	; (800fd6c <_strtod_l+0x58c>)
 800fc1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fc20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc24:	4640      	mov	r0, r8
 800fc26:	4649      	mov	r1, r9
 800fc28:	f7f0 fe30 	bl	800088c <__aeabi_ddiv>
 800fc2c:	e7d6      	b.n	800fbdc <_strtod_l+0x3fc>
 800fc2e:	9b08      	ldr	r3, [sp, #32]
 800fc30:	1b75      	subs	r5, r6, r5
 800fc32:	441d      	add	r5, r3
 800fc34:	2d00      	cmp	r5, #0
 800fc36:	dd70      	ble.n	800fd1a <_strtod_l+0x53a>
 800fc38:	f015 030f 	ands.w	r3, r5, #15
 800fc3c:	d00a      	beq.n	800fc54 <_strtod_l+0x474>
 800fc3e:	494b      	ldr	r1, [pc, #300]	; (800fd6c <_strtod_l+0x58c>)
 800fc40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc44:	4642      	mov	r2, r8
 800fc46:	464b      	mov	r3, r9
 800fc48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc4c:	f7f0 fcf4 	bl	8000638 <__aeabi_dmul>
 800fc50:	4680      	mov	r8, r0
 800fc52:	4689      	mov	r9, r1
 800fc54:	f035 050f 	bics.w	r5, r5, #15
 800fc58:	d04d      	beq.n	800fcf6 <_strtod_l+0x516>
 800fc5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800fc5e:	dd22      	ble.n	800fca6 <_strtod_l+0x4c6>
 800fc60:	2500      	movs	r5, #0
 800fc62:	46ab      	mov	fp, r5
 800fc64:	9509      	str	r5, [sp, #36]	; 0x24
 800fc66:	9505      	str	r5, [sp, #20]
 800fc68:	2322      	movs	r3, #34	; 0x22
 800fc6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800fd74 <_strtod_l+0x594>
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	f04f 0800 	mov.w	r8, #0
 800fc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f43f aded 	beq.w	800f856 <_strtod_l+0x76>
 800fc7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f7ff f91c 	bl	800eebc <_Bfree>
 800fc84:	9905      	ldr	r1, [sp, #20]
 800fc86:	4620      	mov	r0, r4
 800fc88:	f7ff f918 	bl	800eebc <_Bfree>
 800fc8c:	4659      	mov	r1, fp
 800fc8e:	4620      	mov	r0, r4
 800fc90:	f7ff f914 	bl	800eebc <_Bfree>
 800fc94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc96:	4620      	mov	r0, r4
 800fc98:	f7ff f910 	bl	800eebc <_Bfree>
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f7ff f90c 	bl	800eebc <_Bfree>
 800fca4:	e5d7      	b.n	800f856 <_strtod_l+0x76>
 800fca6:	4b32      	ldr	r3, [pc, #200]	; (800fd70 <_strtod_l+0x590>)
 800fca8:	9304      	str	r3, [sp, #16]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	112d      	asrs	r5, r5, #4
 800fcae:	4640      	mov	r0, r8
 800fcb0:	4649      	mov	r1, r9
 800fcb2:	469a      	mov	sl, r3
 800fcb4:	2d01      	cmp	r5, #1
 800fcb6:	dc21      	bgt.n	800fcfc <_strtod_l+0x51c>
 800fcb8:	b10b      	cbz	r3, 800fcbe <_strtod_l+0x4de>
 800fcba:	4680      	mov	r8, r0
 800fcbc:	4689      	mov	r9, r1
 800fcbe:	492c      	ldr	r1, [pc, #176]	; (800fd70 <_strtod_l+0x590>)
 800fcc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800fcc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fcc8:	4642      	mov	r2, r8
 800fcca:	464b      	mov	r3, r9
 800fccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcd0:	f7f0 fcb2 	bl	8000638 <__aeabi_dmul>
 800fcd4:	4b27      	ldr	r3, [pc, #156]	; (800fd74 <_strtod_l+0x594>)
 800fcd6:	460a      	mov	r2, r1
 800fcd8:	400b      	ands	r3, r1
 800fcda:	4927      	ldr	r1, [pc, #156]	; (800fd78 <_strtod_l+0x598>)
 800fcdc:	428b      	cmp	r3, r1
 800fcde:	4680      	mov	r8, r0
 800fce0:	d8be      	bhi.n	800fc60 <_strtod_l+0x480>
 800fce2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fce6:	428b      	cmp	r3, r1
 800fce8:	bf86      	itte	hi
 800fcea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800fd7c <_strtod_l+0x59c>
 800fcee:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800fcf2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	9304      	str	r3, [sp, #16]
 800fcfa:	e07b      	b.n	800fdf4 <_strtod_l+0x614>
 800fcfc:	07ea      	lsls	r2, r5, #31
 800fcfe:	d505      	bpl.n	800fd0c <_strtod_l+0x52c>
 800fd00:	9b04      	ldr	r3, [sp, #16]
 800fd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd06:	f7f0 fc97 	bl	8000638 <__aeabi_dmul>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	9a04      	ldr	r2, [sp, #16]
 800fd0e:	3208      	adds	r2, #8
 800fd10:	f10a 0a01 	add.w	sl, sl, #1
 800fd14:	106d      	asrs	r5, r5, #1
 800fd16:	9204      	str	r2, [sp, #16]
 800fd18:	e7cc      	b.n	800fcb4 <_strtod_l+0x4d4>
 800fd1a:	d0ec      	beq.n	800fcf6 <_strtod_l+0x516>
 800fd1c:	426d      	negs	r5, r5
 800fd1e:	f015 020f 	ands.w	r2, r5, #15
 800fd22:	d00a      	beq.n	800fd3a <_strtod_l+0x55a>
 800fd24:	4b11      	ldr	r3, [pc, #68]	; (800fd6c <_strtod_l+0x58c>)
 800fd26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd32:	f7f0 fdab 	bl	800088c <__aeabi_ddiv>
 800fd36:	4680      	mov	r8, r0
 800fd38:	4689      	mov	r9, r1
 800fd3a:	112d      	asrs	r5, r5, #4
 800fd3c:	d0db      	beq.n	800fcf6 <_strtod_l+0x516>
 800fd3e:	2d1f      	cmp	r5, #31
 800fd40:	dd1e      	ble.n	800fd80 <_strtod_l+0x5a0>
 800fd42:	2500      	movs	r5, #0
 800fd44:	46ab      	mov	fp, r5
 800fd46:	9509      	str	r5, [sp, #36]	; 0x24
 800fd48:	9505      	str	r5, [sp, #20]
 800fd4a:	2322      	movs	r3, #34	; 0x22
 800fd4c:	f04f 0800 	mov.w	r8, #0
 800fd50:	f04f 0900 	mov.w	r9, #0
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	e78d      	b.n	800fc74 <_strtod_l+0x494>
 800fd58:	08011931 	.word	0x08011931
 800fd5c:	08011b5c 	.word	0x08011b5c
 800fd60:	08011929 	.word	0x08011929
 800fd64:	08011960 	.word	0x08011960
 800fd68:	08011ced 	.word	0x08011ced
 800fd6c:	08011a70 	.word	0x08011a70
 800fd70:	08011a48 	.word	0x08011a48
 800fd74:	7ff00000 	.word	0x7ff00000
 800fd78:	7ca00000 	.word	0x7ca00000
 800fd7c:	7fefffff 	.word	0x7fefffff
 800fd80:	f015 0310 	ands.w	r3, r5, #16
 800fd84:	bf18      	it	ne
 800fd86:	236a      	movne	r3, #106	; 0x6a
 800fd88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801012c <_strtod_l+0x94c>
 800fd8c:	9304      	str	r3, [sp, #16]
 800fd8e:	4640      	mov	r0, r8
 800fd90:	4649      	mov	r1, r9
 800fd92:	2300      	movs	r3, #0
 800fd94:	07ea      	lsls	r2, r5, #31
 800fd96:	d504      	bpl.n	800fda2 <_strtod_l+0x5c2>
 800fd98:	e9da 2300 	ldrd	r2, r3, [sl]
 800fd9c:	f7f0 fc4c 	bl	8000638 <__aeabi_dmul>
 800fda0:	2301      	movs	r3, #1
 800fda2:	106d      	asrs	r5, r5, #1
 800fda4:	f10a 0a08 	add.w	sl, sl, #8
 800fda8:	d1f4      	bne.n	800fd94 <_strtod_l+0x5b4>
 800fdaa:	b10b      	cbz	r3, 800fdb0 <_strtod_l+0x5d0>
 800fdac:	4680      	mov	r8, r0
 800fdae:	4689      	mov	r9, r1
 800fdb0:	9b04      	ldr	r3, [sp, #16]
 800fdb2:	b1bb      	cbz	r3, 800fde4 <_strtod_l+0x604>
 800fdb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800fdb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	dd10      	ble.n	800fde4 <_strtod_l+0x604>
 800fdc2:	2b1f      	cmp	r3, #31
 800fdc4:	f340 811e 	ble.w	8010004 <_strtod_l+0x824>
 800fdc8:	2b34      	cmp	r3, #52	; 0x34
 800fdca:	bfde      	ittt	le
 800fdcc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800fdd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fdd4:	4093      	lslle	r3, r2
 800fdd6:	f04f 0800 	mov.w	r8, #0
 800fdda:	bfcc      	ite	gt
 800fddc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800fde0:	ea03 0901 	andle.w	r9, r3, r1
 800fde4:	2200      	movs	r2, #0
 800fde6:	2300      	movs	r3, #0
 800fde8:	4640      	mov	r0, r8
 800fdea:	4649      	mov	r1, r9
 800fdec:	f7f0 fe8c 	bl	8000b08 <__aeabi_dcmpeq>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d1a6      	bne.n	800fd42 <_strtod_l+0x562>
 800fdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fdfa:	4633      	mov	r3, r6
 800fdfc:	465a      	mov	r2, fp
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7ff f8c4 	bl	800ef8c <__s2b>
 800fe04:	9009      	str	r0, [sp, #36]	; 0x24
 800fe06:	2800      	cmp	r0, #0
 800fe08:	f43f af2a 	beq.w	800fc60 <_strtod_l+0x480>
 800fe0c:	9a08      	ldr	r2, [sp, #32]
 800fe0e:	9b05      	ldr	r3, [sp, #20]
 800fe10:	2a00      	cmp	r2, #0
 800fe12:	eba3 0307 	sub.w	r3, r3, r7
 800fe16:	bfa8      	it	ge
 800fe18:	2300      	movge	r3, #0
 800fe1a:	930c      	str	r3, [sp, #48]	; 0x30
 800fe1c:	2500      	movs	r5, #0
 800fe1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fe22:	9312      	str	r3, [sp, #72]	; 0x48
 800fe24:	46ab      	mov	fp, r5
 800fe26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe28:	4620      	mov	r0, r4
 800fe2a:	6859      	ldr	r1, [r3, #4]
 800fe2c:	f7ff f806 	bl	800ee3c <_Balloc>
 800fe30:	9005      	str	r0, [sp, #20]
 800fe32:	2800      	cmp	r0, #0
 800fe34:	f43f af18 	beq.w	800fc68 <_strtod_l+0x488>
 800fe38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe3a:	691a      	ldr	r2, [r3, #16]
 800fe3c:	3202      	adds	r2, #2
 800fe3e:	f103 010c 	add.w	r1, r3, #12
 800fe42:	0092      	lsls	r2, r2, #2
 800fe44:	300c      	adds	r0, #12
 800fe46:	f7fe f868 	bl	800df1a <memcpy>
 800fe4a:	ec49 8b10 	vmov	d0, r8, r9
 800fe4e:	aa18      	add	r2, sp, #96	; 0x60
 800fe50:	a917      	add	r1, sp, #92	; 0x5c
 800fe52:	4620      	mov	r0, r4
 800fe54:	f7ff fbce 	bl	800f5f4 <__d2b>
 800fe58:	ec49 8b18 	vmov	d8, r8, r9
 800fe5c:	9016      	str	r0, [sp, #88]	; 0x58
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	f43f af02 	beq.w	800fc68 <_strtod_l+0x488>
 800fe64:	2101      	movs	r1, #1
 800fe66:	4620      	mov	r0, r4
 800fe68:	f7ff f928 	bl	800f0bc <__i2b>
 800fe6c:	4683      	mov	fp, r0
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	f43f aefa 	beq.w	800fc68 <_strtod_l+0x488>
 800fe74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fe76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fe78:	2e00      	cmp	r6, #0
 800fe7a:	bfab      	itete	ge
 800fe7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800fe7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800fe80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fe82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800fe86:	bfac      	ite	ge
 800fe88:	eb06 0a03 	addge.w	sl, r6, r3
 800fe8c:	1b9f      	sublt	r7, r3, r6
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	1af6      	subs	r6, r6, r3
 800fe92:	4416      	add	r6, r2
 800fe94:	4ba0      	ldr	r3, [pc, #640]	; (8010118 <_strtod_l+0x938>)
 800fe96:	3e01      	subs	r6, #1
 800fe98:	429e      	cmp	r6, r3
 800fe9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fe9e:	f280 80c4 	bge.w	801002a <_strtod_l+0x84a>
 800fea2:	1b9b      	subs	r3, r3, r6
 800fea4:	2b1f      	cmp	r3, #31
 800fea6:	eba2 0203 	sub.w	r2, r2, r3
 800feaa:	f04f 0101 	mov.w	r1, #1
 800feae:	f300 80b0 	bgt.w	8010012 <_strtod_l+0x832>
 800feb2:	fa01 f303 	lsl.w	r3, r1, r3
 800feb6:	930e      	str	r3, [sp, #56]	; 0x38
 800feb8:	2300      	movs	r3, #0
 800feba:	930d      	str	r3, [sp, #52]	; 0x34
 800febc:	eb0a 0602 	add.w	r6, sl, r2
 800fec0:	9b04      	ldr	r3, [sp, #16]
 800fec2:	45b2      	cmp	sl, r6
 800fec4:	4417      	add	r7, r2
 800fec6:	441f      	add	r7, r3
 800fec8:	4653      	mov	r3, sl
 800feca:	bfa8      	it	ge
 800fecc:	4633      	movge	r3, r6
 800fece:	42bb      	cmp	r3, r7
 800fed0:	bfa8      	it	ge
 800fed2:	463b      	movge	r3, r7
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	bfc2      	ittt	gt
 800fed8:	1af6      	subgt	r6, r6, r3
 800feda:	1aff      	subgt	r7, r7, r3
 800fedc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800fee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	dd17      	ble.n	800ff16 <_strtod_l+0x736>
 800fee6:	4659      	mov	r1, fp
 800fee8:	461a      	mov	r2, r3
 800feea:	4620      	mov	r0, r4
 800feec:	f7ff f9a6 	bl	800f23c <__pow5mult>
 800fef0:	4683      	mov	fp, r0
 800fef2:	2800      	cmp	r0, #0
 800fef4:	f43f aeb8 	beq.w	800fc68 <_strtod_l+0x488>
 800fef8:	4601      	mov	r1, r0
 800fefa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fefc:	4620      	mov	r0, r4
 800fefe:	f7ff f8f3 	bl	800f0e8 <__multiply>
 800ff02:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f43f aeaf 	beq.w	800fc68 <_strtod_l+0x488>
 800ff0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f7fe ffd5 	bl	800eebc <_Bfree>
 800ff12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff14:	9316      	str	r3, [sp, #88]	; 0x58
 800ff16:	2e00      	cmp	r6, #0
 800ff18:	f300 808c 	bgt.w	8010034 <_strtod_l+0x854>
 800ff1c:	9b08      	ldr	r3, [sp, #32]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	dd08      	ble.n	800ff34 <_strtod_l+0x754>
 800ff22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff24:	9905      	ldr	r1, [sp, #20]
 800ff26:	4620      	mov	r0, r4
 800ff28:	f7ff f988 	bl	800f23c <__pow5mult>
 800ff2c:	9005      	str	r0, [sp, #20]
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f43f ae9a 	beq.w	800fc68 <_strtod_l+0x488>
 800ff34:	2f00      	cmp	r7, #0
 800ff36:	dd08      	ble.n	800ff4a <_strtod_l+0x76a>
 800ff38:	9905      	ldr	r1, [sp, #20]
 800ff3a:	463a      	mov	r2, r7
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f7ff f9d7 	bl	800f2f0 <__lshift>
 800ff42:	9005      	str	r0, [sp, #20]
 800ff44:	2800      	cmp	r0, #0
 800ff46:	f43f ae8f 	beq.w	800fc68 <_strtod_l+0x488>
 800ff4a:	f1ba 0f00 	cmp.w	sl, #0
 800ff4e:	dd08      	ble.n	800ff62 <_strtod_l+0x782>
 800ff50:	4659      	mov	r1, fp
 800ff52:	4652      	mov	r2, sl
 800ff54:	4620      	mov	r0, r4
 800ff56:	f7ff f9cb 	bl	800f2f0 <__lshift>
 800ff5a:	4683      	mov	fp, r0
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	f43f ae83 	beq.w	800fc68 <_strtod_l+0x488>
 800ff62:	9a05      	ldr	r2, [sp, #20]
 800ff64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff66:	4620      	mov	r0, r4
 800ff68:	f7ff fa4a 	bl	800f400 <__mdiff>
 800ff6c:	4605      	mov	r5, r0
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	f43f ae7a 	beq.w	800fc68 <_strtod_l+0x488>
 800ff74:	68c3      	ldr	r3, [r0, #12]
 800ff76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60c3      	str	r3, [r0, #12]
 800ff7c:	4659      	mov	r1, fp
 800ff7e:	f7ff fa23 	bl	800f3c8 <__mcmp>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	da60      	bge.n	8010048 <_strtod_l+0x868>
 800ff86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff88:	ea53 0308 	orrs.w	r3, r3, r8
 800ff8c:	f040 8084 	bne.w	8010098 <_strtod_l+0x8b8>
 800ff90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d17f      	bne.n	8010098 <_strtod_l+0x8b8>
 800ff98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff9c:	0d1b      	lsrs	r3, r3, #20
 800ff9e:	051b      	lsls	r3, r3, #20
 800ffa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ffa4:	d978      	bls.n	8010098 <_strtod_l+0x8b8>
 800ffa6:	696b      	ldr	r3, [r5, #20]
 800ffa8:	b913      	cbnz	r3, 800ffb0 <_strtod_l+0x7d0>
 800ffaa:	692b      	ldr	r3, [r5, #16]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	dd73      	ble.n	8010098 <_strtod_l+0x8b8>
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f7ff f99b 	bl	800f2f0 <__lshift>
 800ffba:	4659      	mov	r1, fp
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	f7ff fa03 	bl	800f3c8 <__mcmp>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	dd68      	ble.n	8010098 <_strtod_l+0x8b8>
 800ffc6:	9904      	ldr	r1, [sp, #16]
 800ffc8:	4a54      	ldr	r2, [pc, #336]	; (801011c <_strtod_l+0x93c>)
 800ffca:	464b      	mov	r3, r9
 800ffcc:	2900      	cmp	r1, #0
 800ffce:	f000 8084 	beq.w	80100da <_strtod_l+0x8fa>
 800ffd2:	ea02 0109 	and.w	r1, r2, r9
 800ffd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ffda:	dc7e      	bgt.n	80100da <_strtod_l+0x8fa>
 800ffdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ffe0:	f77f aeb3 	ble.w	800fd4a <_strtod_l+0x56a>
 800ffe4:	4b4e      	ldr	r3, [pc, #312]	; (8010120 <_strtod_l+0x940>)
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	4649      	mov	r1, r9
 800ffea:	2200      	movs	r2, #0
 800ffec:	f7f0 fb24 	bl	8000638 <__aeabi_dmul>
 800fff0:	4b4a      	ldr	r3, [pc, #296]	; (801011c <_strtod_l+0x93c>)
 800fff2:	400b      	ands	r3, r1
 800fff4:	4680      	mov	r8, r0
 800fff6:	4689      	mov	r9, r1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f47f ae3f 	bne.w	800fc7c <_strtod_l+0x49c>
 800fffe:	2322      	movs	r3, #34	; 0x22
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	e63b      	b.n	800fc7c <_strtod_l+0x49c>
 8010004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010008:	fa02 f303 	lsl.w	r3, r2, r3
 801000c:	ea03 0808 	and.w	r8, r3, r8
 8010010:	e6e8      	b.n	800fde4 <_strtod_l+0x604>
 8010012:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010016:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801001a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801001e:	36e2      	adds	r6, #226	; 0xe2
 8010020:	fa01 f306 	lsl.w	r3, r1, r6
 8010024:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010028:	e748      	b.n	800febc <_strtod_l+0x6dc>
 801002a:	2100      	movs	r1, #0
 801002c:	2301      	movs	r3, #1
 801002e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010032:	e743      	b.n	800febc <_strtod_l+0x6dc>
 8010034:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010036:	4632      	mov	r2, r6
 8010038:	4620      	mov	r0, r4
 801003a:	f7ff f959 	bl	800f2f0 <__lshift>
 801003e:	9016      	str	r0, [sp, #88]	; 0x58
 8010040:	2800      	cmp	r0, #0
 8010042:	f47f af6b 	bne.w	800ff1c <_strtod_l+0x73c>
 8010046:	e60f      	b.n	800fc68 <_strtod_l+0x488>
 8010048:	46ca      	mov	sl, r9
 801004a:	d171      	bne.n	8010130 <_strtod_l+0x950>
 801004c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801004e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010052:	b352      	cbz	r2, 80100aa <_strtod_l+0x8ca>
 8010054:	4a33      	ldr	r2, [pc, #204]	; (8010124 <_strtod_l+0x944>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d12a      	bne.n	80100b0 <_strtod_l+0x8d0>
 801005a:	9b04      	ldr	r3, [sp, #16]
 801005c:	4641      	mov	r1, r8
 801005e:	b1fb      	cbz	r3, 80100a0 <_strtod_l+0x8c0>
 8010060:	4b2e      	ldr	r3, [pc, #184]	; (801011c <_strtod_l+0x93c>)
 8010062:	ea09 0303 	and.w	r3, r9, r3
 8010066:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801006a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801006e:	d81a      	bhi.n	80100a6 <_strtod_l+0x8c6>
 8010070:	0d1b      	lsrs	r3, r3, #20
 8010072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010076:	fa02 f303 	lsl.w	r3, r2, r3
 801007a:	4299      	cmp	r1, r3
 801007c:	d118      	bne.n	80100b0 <_strtod_l+0x8d0>
 801007e:	4b2a      	ldr	r3, [pc, #168]	; (8010128 <_strtod_l+0x948>)
 8010080:	459a      	cmp	sl, r3
 8010082:	d102      	bne.n	801008a <_strtod_l+0x8aa>
 8010084:	3101      	adds	r1, #1
 8010086:	f43f adef 	beq.w	800fc68 <_strtod_l+0x488>
 801008a:	4b24      	ldr	r3, [pc, #144]	; (801011c <_strtod_l+0x93c>)
 801008c:	ea0a 0303 	and.w	r3, sl, r3
 8010090:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010094:	f04f 0800 	mov.w	r8, #0
 8010098:	9b04      	ldr	r3, [sp, #16]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1a2      	bne.n	800ffe4 <_strtod_l+0x804>
 801009e:	e5ed      	b.n	800fc7c <_strtod_l+0x49c>
 80100a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100a4:	e7e9      	b.n	801007a <_strtod_l+0x89a>
 80100a6:	4613      	mov	r3, r2
 80100a8:	e7e7      	b.n	801007a <_strtod_l+0x89a>
 80100aa:	ea53 0308 	orrs.w	r3, r3, r8
 80100ae:	d08a      	beq.n	800ffc6 <_strtod_l+0x7e6>
 80100b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100b2:	b1e3      	cbz	r3, 80100ee <_strtod_l+0x90e>
 80100b4:	ea13 0f0a 	tst.w	r3, sl
 80100b8:	d0ee      	beq.n	8010098 <_strtod_l+0x8b8>
 80100ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100bc:	9a04      	ldr	r2, [sp, #16]
 80100be:	4640      	mov	r0, r8
 80100c0:	4649      	mov	r1, r9
 80100c2:	b1c3      	cbz	r3, 80100f6 <_strtod_l+0x916>
 80100c4:	f7ff fb6f 	bl	800f7a6 <sulp>
 80100c8:	4602      	mov	r2, r0
 80100ca:	460b      	mov	r3, r1
 80100cc:	ec51 0b18 	vmov	r0, r1, d8
 80100d0:	f7f0 f8fc 	bl	80002cc <__adddf3>
 80100d4:	4680      	mov	r8, r0
 80100d6:	4689      	mov	r9, r1
 80100d8:	e7de      	b.n	8010098 <_strtod_l+0x8b8>
 80100da:	4013      	ands	r3, r2
 80100dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80100e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80100e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80100e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80100ec:	e7d4      	b.n	8010098 <_strtod_l+0x8b8>
 80100ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100f0:	ea13 0f08 	tst.w	r3, r8
 80100f4:	e7e0      	b.n	80100b8 <_strtod_l+0x8d8>
 80100f6:	f7ff fb56 	bl	800f7a6 <sulp>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	ec51 0b18 	vmov	r0, r1, d8
 8010102:	f7f0 f8e1 	bl	80002c8 <__aeabi_dsub>
 8010106:	2200      	movs	r2, #0
 8010108:	2300      	movs	r3, #0
 801010a:	4680      	mov	r8, r0
 801010c:	4689      	mov	r9, r1
 801010e:	f7f0 fcfb 	bl	8000b08 <__aeabi_dcmpeq>
 8010112:	2800      	cmp	r0, #0
 8010114:	d0c0      	beq.n	8010098 <_strtod_l+0x8b8>
 8010116:	e618      	b.n	800fd4a <_strtod_l+0x56a>
 8010118:	fffffc02 	.word	0xfffffc02
 801011c:	7ff00000 	.word	0x7ff00000
 8010120:	39500000 	.word	0x39500000
 8010124:	000fffff 	.word	0x000fffff
 8010128:	7fefffff 	.word	0x7fefffff
 801012c:	08011b70 	.word	0x08011b70
 8010130:	4659      	mov	r1, fp
 8010132:	4628      	mov	r0, r5
 8010134:	f7ff fab8 	bl	800f6a8 <__ratio>
 8010138:	ec57 6b10 	vmov	r6, r7, d0
 801013c:	ee10 0a10 	vmov	r0, s0
 8010140:	2200      	movs	r2, #0
 8010142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010146:	4639      	mov	r1, r7
 8010148:	f7f0 fcf2 	bl	8000b30 <__aeabi_dcmple>
 801014c:	2800      	cmp	r0, #0
 801014e:	d071      	beq.n	8010234 <_strtod_l+0xa54>
 8010150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010152:	2b00      	cmp	r3, #0
 8010154:	d17c      	bne.n	8010250 <_strtod_l+0xa70>
 8010156:	f1b8 0f00 	cmp.w	r8, #0
 801015a:	d15a      	bne.n	8010212 <_strtod_l+0xa32>
 801015c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010160:	2b00      	cmp	r3, #0
 8010162:	d15d      	bne.n	8010220 <_strtod_l+0xa40>
 8010164:	4b90      	ldr	r3, [pc, #576]	; (80103a8 <_strtod_l+0xbc8>)
 8010166:	2200      	movs	r2, #0
 8010168:	4630      	mov	r0, r6
 801016a:	4639      	mov	r1, r7
 801016c:	f7f0 fcd6 	bl	8000b1c <__aeabi_dcmplt>
 8010170:	2800      	cmp	r0, #0
 8010172:	d15c      	bne.n	801022e <_strtod_l+0xa4e>
 8010174:	4630      	mov	r0, r6
 8010176:	4639      	mov	r1, r7
 8010178:	4b8c      	ldr	r3, [pc, #560]	; (80103ac <_strtod_l+0xbcc>)
 801017a:	2200      	movs	r2, #0
 801017c:	f7f0 fa5c 	bl	8000638 <__aeabi_dmul>
 8010180:	4606      	mov	r6, r0
 8010182:	460f      	mov	r7, r1
 8010184:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010188:	9606      	str	r6, [sp, #24]
 801018a:	9307      	str	r3, [sp, #28]
 801018c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010190:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010194:	4b86      	ldr	r3, [pc, #536]	; (80103b0 <_strtod_l+0xbd0>)
 8010196:	ea0a 0303 	and.w	r3, sl, r3
 801019a:	930d      	str	r3, [sp, #52]	; 0x34
 801019c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801019e:	4b85      	ldr	r3, [pc, #532]	; (80103b4 <_strtod_l+0xbd4>)
 80101a0:	429a      	cmp	r2, r3
 80101a2:	f040 8090 	bne.w	80102c6 <_strtod_l+0xae6>
 80101a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80101aa:	ec49 8b10 	vmov	d0, r8, r9
 80101ae:	f7ff f9b1 	bl	800f514 <__ulp>
 80101b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80101b6:	ec51 0b10 	vmov	r0, r1, d0
 80101ba:	f7f0 fa3d 	bl	8000638 <__aeabi_dmul>
 80101be:	4642      	mov	r2, r8
 80101c0:	464b      	mov	r3, r9
 80101c2:	f7f0 f883 	bl	80002cc <__adddf3>
 80101c6:	460b      	mov	r3, r1
 80101c8:	4979      	ldr	r1, [pc, #484]	; (80103b0 <_strtod_l+0xbd0>)
 80101ca:	4a7b      	ldr	r2, [pc, #492]	; (80103b8 <_strtod_l+0xbd8>)
 80101cc:	4019      	ands	r1, r3
 80101ce:	4291      	cmp	r1, r2
 80101d0:	4680      	mov	r8, r0
 80101d2:	d944      	bls.n	801025e <_strtod_l+0xa7e>
 80101d4:	ee18 2a90 	vmov	r2, s17
 80101d8:	4b78      	ldr	r3, [pc, #480]	; (80103bc <_strtod_l+0xbdc>)
 80101da:	429a      	cmp	r2, r3
 80101dc:	d104      	bne.n	80101e8 <_strtod_l+0xa08>
 80101de:	ee18 3a10 	vmov	r3, s16
 80101e2:	3301      	adds	r3, #1
 80101e4:	f43f ad40 	beq.w	800fc68 <_strtod_l+0x488>
 80101e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80103bc <_strtod_l+0xbdc>
 80101ec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80101f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80101f2:	4620      	mov	r0, r4
 80101f4:	f7fe fe62 	bl	800eebc <_Bfree>
 80101f8:	9905      	ldr	r1, [sp, #20]
 80101fa:	4620      	mov	r0, r4
 80101fc:	f7fe fe5e 	bl	800eebc <_Bfree>
 8010200:	4659      	mov	r1, fp
 8010202:	4620      	mov	r0, r4
 8010204:	f7fe fe5a 	bl	800eebc <_Bfree>
 8010208:	4629      	mov	r1, r5
 801020a:	4620      	mov	r0, r4
 801020c:	f7fe fe56 	bl	800eebc <_Bfree>
 8010210:	e609      	b.n	800fe26 <_strtod_l+0x646>
 8010212:	f1b8 0f01 	cmp.w	r8, #1
 8010216:	d103      	bne.n	8010220 <_strtod_l+0xa40>
 8010218:	f1b9 0f00 	cmp.w	r9, #0
 801021c:	f43f ad95 	beq.w	800fd4a <_strtod_l+0x56a>
 8010220:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010378 <_strtod_l+0xb98>
 8010224:	4f60      	ldr	r7, [pc, #384]	; (80103a8 <_strtod_l+0xbc8>)
 8010226:	ed8d 7b06 	vstr	d7, [sp, #24]
 801022a:	2600      	movs	r6, #0
 801022c:	e7ae      	b.n	801018c <_strtod_l+0x9ac>
 801022e:	4f5f      	ldr	r7, [pc, #380]	; (80103ac <_strtod_l+0xbcc>)
 8010230:	2600      	movs	r6, #0
 8010232:	e7a7      	b.n	8010184 <_strtod_l+0x9a4>
 8010234:	4b5d      	ldr	r3, [pc, #372]	; (80103ac <_strtod_l+0xbcc>)
 8010236:	4630      	mov	r0, r6
 8010238:	4639      	mov	r1, r7
 801023a:	2200      	movs	r2, #0
 801023c:	f7f0 f9fc 	bl	8000638 <__aeabi_dmul>
 8010240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010242:	4606      	mov	r6, r0
 8010244:	460f      	mov	r7, r1
 8010246:	2b00      	cmp	r3, #0
 8010248:	d09c      	beq.n	8010184 <_strtod_l+0x9a4>
 801024a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801024e:	e79d      	b.n	801018c <_strtod_l+0x9ac>
 8010250:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010380 <_strtod_l+0xba0>
 8010254:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010258:	ec57 6b17 	vmov	r6, r7, d7
 801025c:	e796      	b.n	801018c <_strtod_l+0x9ac>
 801025e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010262:	9b04      	ldr	r3, [sp, #16]
 8010264:	46ca      	mov	sl, r9
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1c2      	bne.n	80101f0 <_strtod_l+0xa10>
 801026a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801026e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010270:	0d1b      	lsrs	r3, r3, #20
 8010272:	051b      	lsls	r3, r3, #20
 8010274:	429a      	cmp	r2, r3
 8010276:	d1bb      	bne.n	80101f0 <_strtod_l+0xa10>
 8010278:	4630      	mov	r0, r6
 801027a:	4639      	mov	r1, r7
 801027c:	f7f0 fd3c 	bl	8000cf8 <__aeabi_d2lz>
 8010280:	f7f0 f9ac 	bl	80005dc <__aeabi_l2d>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4630      	mov	r0, r6
 801028a:	4639      	mov	r1, r7
 801028c:	f7f0 f81c 	bl	80002c8 <__aeabi_dsub>
 8010290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010292:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010296:	ea43 0308 	orr.w	r3, r3, r8
 801029a:	4313      	orrs	r3, r2
 801029c:	4606      	mov	r6, r0
 801029e:	460f      	mov	r7, r1
 80102a0:	d054      	beq.n	801034c <_strtod_l+0xb6c>
 80102a2:	a339      	add	r3, pc, #228	; (adr r3, 8010388 <_strtod_l+0xba8>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	f7f0 fc38 	bl	8000b1c <__aeabi_dcmplt>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	f47f ace5 	bne.w	800fc7c <_strtod_l+0x49c>
 80102b2:	a337      	add	r3, pc, #220	; (adr r3, 8010390 <_strtod_l+0xbb0>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7f0 fc4c 	bl	8000b58 <__aeabi_dcmpgt>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d095      	beq.n	80101f0 <_strtod_l+0xa10>
 80102c4:	e4da      	b.n	800fc7c <_strtod_l+0x49c>
 80102c6:	9b04      	ldr	r3, [sp, #16]
 80102c8:	b333      	cbz	r3, 8010318 <_strtod_l+0xb38>
 80102ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80102d0:	d822      	bhi.n	8010318 <_strtod_l+0xb38>
 80102d2:	a331      	add	r3, pc, #196	; (adr r3, 8010398 <_strtod_l+0xbb8>)
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	4630      	mov	r0, r6
 80102da:	4639      	mov	r1, r7
 80102dc:	f7f0 fc28 	bl	8000b30 <__aeabi_dcmple>
 80102e0:	b1a0      	cbz	r0, 801030c <_strtod_l+0xb2c>
 80102e2:	4639      	mov	r1, r7
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7f0 fc7f 	bl	8000be8 <__aeabi_d2uiz>
 80102ea:	2801      	cmp	r0, #1
 80102ec:	bf38      	it	cc
 80102ee:	2001      	movcc	r0, #1
 80102f0:	f7f0 f928 	bl	8000544 <__aeabi_ui2d>
 80102f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102f6:	4606      	mov	r6, r0
 80102f8:	460f      	mov	r7, r1
 80102fa:	bb23      	cbnz	r3, 8010346 <_strtod_l+0xb66>
 80102fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010300:	9010      	str	r0, [sp, #64]	; 0x40
 8010302:	9311      	str	r3, [sp, #68]	; 0x44
 8010304:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010308:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801030c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801030e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010310:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010314:	1a9b      	subs	r3, r3, r2
 8010316:	930f      	str	r3, [sp, #60]	; 0x3c
 8010318:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801031c:	eeb0 0a48 	vmov.f32	s0, s16
 8010320:	eef0 0a68 	vmov.f32	s1, s17
 8010324:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010328:	f7ff f8f4 	bl	800f514 <__ulp>
 801032c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010330:	ec53 2b10 	vmov	r2, r3, d0
 8010334:	f7f0 f980 	bl	8000638 <__aeabi_dmul>
 8010338:	ec53 2b18 	vmov	r2, r3, d8
 801033c:	f7ef ffc6 	bl	80002cc <__adddf3>
 8010340:	4680      	mov	r8, r0
 8010342:	4689      	mov	r9, r1
 8010344:	e78d      	b.n	8010262 <_strtod_l+0xa82>
 8010346:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801034a:	e7db      	b.n	8010304 <_strtod_l+0xb24>
 801034c:	a314      	add	r3, pc, #80	; (adr r3, 80103a0 <_strtod_l+0xbc0>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	f7f0 fbe3 	bl	8000b1c <__aeabi_dcmplt>
 8010356:	e7b3      	b.n	80102c0 <_strtod_l+0xae0>
 8010358:	2300      	movs	r3, #0
 801035a:	930a      	str	r3, [sp, #40]	; 0x28
 801035c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801035e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010360:	6013      	str	r3, [r2, #0]
 8010362:	f7ff ba7c 	b.w	800f85e <_strtod_l+0x7e>
 8010366:	2a65      	cmp	r2, #101	; 0x65
 8010368:	f43f ab75 	beq.w	800fa56 <_strtod_l+0x276>
 801036c:	2a45      	cmp	r2, #69	; 0x45
 801036e:	f43f ab72 	beq.w	800fa56 <_strtod_l+0x276>
 8010372:	2301      	movs	r3, #1
 8010374:	f7ff bbaa 	b.w	800facc <_strtod_l+0x2ec>
 8010378:	00000000 	.word	0x00000000
 801037c:	bff00000 	.word	0xbff00000
 8010380:	00000000 	.word	0x00000000
 8010384:	3ff00000 	.word	0x3ff00000
 8010388:	94a03595 	.word	0x94a03595
 801038c:	3fdfffff 	.word	0x3fdfffff
 8010390:	35afe535 	.word	0x35afe535
 8010394:	3fe00000 	.word	0x3fe00000
 8010398:	ffc00000 	.word	0xffc00000
 801039c:	41dfffff 	.word	0x41dfffff
 80103a0:	94a03595 	.word	0x94a03595
 80103a4:	3fcfffff 	.word	0x3fcfffff
 80103a8:	3ff00000 	.word	0x3ff00000
 80103ac:	3fe00000 	.word	0x3fe00000
 80103b0:	7ff00000 	.word	0x7ff00000
 80103b4:	7fe00000 	.word	0x7fe00000
 80103b8:	7c9fffff 	.word	0x7c9fffff
 80103bc:	7fefffff 	.word	0x7fefffff

080103c0 <_strtod_r>:
 80103c0:	4b01      	ldr	r3, [pc, #4]	; (80103c8 <_strtod_r+0x8>)
 80103c2:	f7ff ba0d 	b.w	800f7e0 <_strtod_l>
 80103c6:	bf00      	nop
 80103c8:	2000006c 	.word	0x2000006c

080103cc <_strtol_l.constprop.0>:
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103d2:	d001      	beq.n	80103d8 <_strtol_l.constprop.0+0xc>
 80103d4:	2b24      	cmp	r3, #36	; 0x24
 80103d6:	d906      	bls.n	80103e6 <_strtol_l.constprop.0+0x1a>
 80103d8:	f7fd fd72 	bl	800dec0 <__errno>
 80103dc:	2316      	movs	r3, #22
 80103de:	6003      	str	r3, [r0, #0]
 80103e0:	2000      	movs	r0, #0
 80103e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80104cc <_strtol_l.constprop.0+0x100>
 80103ea:	460d      	mov	r5, r1
 80103ec:	462e      	mov	r6, r5
 80103ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80103f6:	f017 0708 	ands.w	r7, r7, #8
 80103fa:	d1f7      	bne.n	80103ec <_strtol_l.constprop.0+0x20>
 80103fc:	2c2d      	cmp	r4, #45	; 0x2d
 80103fe:	d132      	bne.n	8010466 <_strtol_l.constprop.0+0x9a>
 8010400:	782c      	ldrb	r4, [r5, #0]
 8010402:	2701      	movs	r7, #1
 8010404:	1cb5      	adds	r5, r6, #2
 8010406:	2b00      	cmp	r3, #0
 8010408:	d05b      	beq.n	80104c2 <_strtol_l.constprop.0+0xf6>
 801040a:	2b10      	cmp	r3, #16
 801040c:	d109      	bne.n	8010422 <_strtol_l.constprop.0+0x56>
 801040e:	2c30      	cmp	r4, #48	; 0x30
 8010410:	d107      	bne.n	8010422 <_strtol_l.constprop.0+0x56>
 8010412:	782c      	ldrb	r4, [r5, #0]
 8010414:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010418:	2c58      	cmp	r4, #88	; 0x58
 801041a:	d14d      	bne.n	80104b8 <_strtol_l.constprop.0+0xec>
 801041c:	786c      	ldrb	r4, [r5, #1]
 801041e:	2310      	movs	r3, #16
 8010420:	3502      	adds	r5, #2
 8010422:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010426:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801042a:	f04f 0e00 	mov.w	lr, #0
 801042e:	fbb8 f9f3 	udiv	r9, r8, r3
 8010432:	4676      	mov	r6, lr
 8010434:	fb03 8a19 	mls	sl, r3, r9, r8
 8010438:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801043c:	f1bc 0f09 	cmp.w	ip, #9
 8010440:	d816      	bhi.n	8010470 <_strtol_l.constprop.0+0xa4>
 8010442:	4664      	mov	r4, ip
 8010444:	42a3      	cmp	r3, r4
 8010446:	dd24      	ble.n	8010492 <_strtol_l.constprop.0+0xc6>
 8010448:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801044c:	d008      	beq.n	8010460 <_strtol_l.constprop.0+0x94>
 801044e:	45b1      	cmp	r9, r6
 8010450:	d31c      	bcc.n	801048c <_strtol_l.constprop.0+0xc0>
 8010452:	d101      	bne.n	8010458 <_strtol_l.constprop.0+0x8c>
 8010454:	45a2      	cmp	sl, r4
 8010456:	db19      	blt.n	801048c <_strtol_l.constprop.0+0xc0>
 8010458:	fb06 4603 	mla	r6, r6, r3, r4
 801045c:	f04f 0e01 	mov.w	lr, #1
 8010460:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010464:	e7e8      	b.n	8010438 <_strtol_l.constprop.0+0x6c>
 8010466:	2c2b      	cmp	r4, #43	; 0x2b
 8010468:	bf04      	itt	eq
 801046a:	782c      	ldrbeq	r4, [r5, #0]
 801046c:	1cb5      	addeq	r5, r6, #2
 801046e:	e7ca      	b.n	8010406 <_strtol_l.constprop.0+0x3a>
 8010470:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010474:	f1bc 0f19 	cmp.w	ip, #25
 8010478:	d801      	bhi.n	801047e <_strtol_l.constprop.0+0xb2>
 801047a:	3c37      	subs	r4, #55	; 0x37
 801047c:	e7e2      	b.n	8010444 <_strtol_l.constprop.0+0x78>
 801047e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010482:	f1bc 0f19 	cmp.w	ip, #25
 8010486:	d804      	bhi.n	8010492 <_strtol_l.constprop.0+0xc6>
 8010488:	3c57      	subs	r4, #87	; 0x57
 801048a:	e7db      	b.n	8010444 <_strtol_l.constprop.0+0x78>
 801048c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8010490:	e7e6      	b.n	8010460 <_strtol_l.constprop.0+0x94>
 8010492:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8010496:	d105      	bne.n	80104a4 <_strtol_l.constprop.0+0xd8>
 8010498:	2322      	movs	r3, #34	; 0x22
 801049a:	6003      	str	r3, [r0, #0]
 801049c:	4646      	mov	r6, r8
 801049e:	b942      	cbnz	r2, 80104b2 <_strtol_l.constprop.0+0xe6>
 80104a0:	4630      	mov	r0, r6
 80104a2:	e79e      	b.n	80103e2 <_strtol_l.constprop.0+0x16>
 80104a4:	b107      	cbz	r7, 80104a8 <_strtol_l.constprop.0+0xdc>
 80104a6:	4276      	negs	r6, r6
 80104a8:	2a00      	cmp	r2, #0
 80104aa:	d0f9      	beq.n	80104a0 <_strtol_l.constprop.0+0xd4>
 80104ac:	f1be 0f00 	cmp.w	lr, #0
 80104b0:	d000      	beq.n	80104b4 <_strtol_l.constprop.0+0xe8>
 80104b2:	1e69      	subs	r1, r5, #1
 80104b4:	6011      	str	r1, [r2, #0]
 80104b6:	e7f3      	b.n	80104a0 <_strtol_l.constprop.0+0xd4>
 80104b8:	2430      	movs	r4, #48	; 0x30
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1b1      	bne.n	8010422 <_strtol_l.constprop.0+0x56>
 80104be:	2308      	movs	r3, #8
 80104c0:	e7af      	b.n	8010422 <_strtol_l.constprop.0+0x56>
 80104c2:	2c30      	cmp	r4, #48	; 0x30
 80104c4:	d0a5      	beq.n	8010412 <_strtol_l.constprop.0+0x46>
 80104c6:	230a      	movs	r3, #10
 80104c8:	e7ab      	b.n	8010422 <_strtol_l.constprop.0+0x56>
 80104ca:	bf00      	nop
 80104cc:	08011b99 	.word	0x08011b99

080104d0 <_strtol_r>:
 80104d0:	f7ff bf7c 	b.w	80103cc <_strtol_l.constprop.0>

080104d4 <__ssputs_r>:
 80104d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d8:	688e      	ldr	r6, [r1, #8]
 80104da:	461f      	mov	r7, r3
 80104dc:	42be      	cmp	r6, r7
 80104de:	680b      	ldr	r3, [r1, #0]
 80104e0:	4682      	mov	sl, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	4690      	mov	r8, r2
 80104e6:	d82c      	bhi.n	8010542 <__ssputs_r+0x6e>
 80104e8:	898a      	ldrh	r2, [r1, #12]
 80104ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104ee:	d026      	beq.n	801053e <__ssputs_r+0x6a>
 80104f0:	6965      	ldr	r5, [r4, #20]
 80104f2:	6909      	ldr	r1, [r1, #16]
 80104f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104f8:	eba3 0901 	sub.w	r9, r3, r1
 80104fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010500:	1c7b      	adds	r3, r7, #1
 8010502:	444b      	add	r3, r9
 8010504:	106d      	asrs	r5, r5, #1
 8010506:	429d      	cmp	r5, r3
 8010508:	bf38      	it	cc
 801050a:	461d      	movcc	r5, r3
 801050c:	0553      	lsls	r3, r2, #21
 801050e:	d527      	bpl.n	8010560 <__ssputs_r+0x8c>
 8010510:	4629      	mov	r1, r5
 8010512:	f7fe fc07 	bl	800ed24 <_malloc_r>
 8010516:	4606      	mov	r6, r0
 8010518:	b360      	cbz	r0, 8010574 <__ssputs_r+0xa0>
 801051a:	6921      	ldr	r1, [r4, #16]
 801051c:	464a      	mov	r2, r9
 801051e:	f7fd fcfc 	bl	800df1a <memcpy>
 8010522:	89a3      	ldrh	r3, [r4, #12]
 8010524:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801052c:	81a3      	strh	r3, [r4, #12]
 801052e:	6126      	str	r6, [r4, #16]
 8010530:	6165      	str	r5, [r4, #20]
 8010532:	444e      	add	r6, r9
 8010534:	eba5 0509 	sub.w	r5, r5, r9
 8010538:	6026      	str	r6, [r4, #0]
 801053a:	60a5      	str	r5, [r4, #8]
 801053c:	463e      	mov	r6, r7
 801053e:	42be      	cmp	r6, r7
 8010540:	d900      	bls.n	8010544 <__ssputs_r+0x70>
 8010542:	463e      	mov	r6, r7
 8010544:	6820      	ldr	r0, [r4, #0]
 8010546:	4632      	mov	r2, r6
 8010548:	4641      	mov	r1, r8
 801054a:	f000 f9c9 	bl	80108e0 <memmove>
 801054e:	68a3      	ldr	r3, [r4, #8]
 8010550:	1b9b      	subs	r3, r3, r6
 8010552:	60a3      	str	r3, [r4, #8]
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	4433      	add	r3, r6
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	2000      	movs	r0, #0
 801055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010560:	462a      	mov	r2, r5
 8010562:	f7fc fc8f 	bl	800ce84 <_realloc_r>
 8010566:	4606      	mov	r6, r0
 8010568:	2800      	cmp	r0, #0
 801056a:	d1e0      	bne.n	801052e <__ssputs_r+0x5a>
 801056c:	6921      	ldr	r1, [r4, #16]
 801056e:	4650      	mov	r0, sl
 8010570:	f7fe fb64 	bl	800ec3c <_free_r>
 8010574:	230c      	movs	r3, #12
 8010576:	f8ca 3000 	str.w	r3, [sl]
 801057a:	89a3      	ldrh	r3, [r4, #12]
 801057c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010580:	81a3      	strh	r3, [r4, #12]
 8010582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010586:	e7e9      	b.n	801055c <__ssputs_r+0x88>

08010588 <_svfiprintf_r>:
 8010588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058c:	4698      	mov	r8, r3
 801058e:	898b      	ldrh	r3, [r1, #12]
 8010590:	061b      	lsls	r3, r3, #24
 8010592:	b09d      	sub	sp, #116	; 0x74
 8010594:	4607      	mov	r7, r0
 8010596:	460d      	mov	r5, r1
 8010598:	4614      	mov	r4, r2
 801059a:	d50e      	bpl.n	80105ba <_svfiprintf_r+0x32>
 801059c:	690b      	ldr	r3, [r1, #16]
 801059e:	b963      	cbnz	r3, 80105ba <_svfiprintf_r+0x32>
 80105a0:	2140      	movs	r1, #64	; 0x40
 80105a2:	f7fe fbbf 	bl	800ed24 <_malloc_r>
 80105a6:	6028      	str	r0, [r5, #0]
 80105a8:	6128      	str	r0, [r5, #16]
 80105aa:	b920      	cbnz	r0, 80105b6 <_svfiprintf_r+0x2e>
 80105ac:	230c      	movs	r3, #12
 80105ae:	603b      	str	r3, [r7, #0]
 80105b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105b4:	e0d0      	b.n	8010758 <_svfiprintf_r+0x1d0>
 80105b6:	2340      	movs	r3, #64	; 0x40
 80105b8:	616b      	str	r3, [r5, #20]
 80105ba:	2300      	movs	r3, #0
 80105bc:	9309      	str	r3, [sp, #36]	; 0x24
 80105be:	2320      	movs	r3, #32
 80105c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80105c8:	2330      	movs	r3, #48	; 0x30
 80105ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010770 <_svfiprintf_r+0x1e8>
 80105ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105d2:	f04f 0901 	mov.w	r9, #1
 80105d6:	4623      	mov	r3, r4
 80105d8:	469a      	mov	sl, r3
 80105da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105de:	b10a      	cbz	r2, 80105e4 <_svfiprintf_r+0x5c>
 80105e0:	2a25      	cmp	r2, #37	; 0x25
 80105e2:	d1f9      	bne.n	80105d8 <_svfiprintf_r+0x50>
 80105e4:	ebba 0b04 	subs.w	fp, sl, r4
 80105e8:	d00b      	beq.n	8010602 <_svfiprintf_r+0x7a>
 80105ea:	465b      	mov	r3, fp
 80105ec:	4622      	mov	r2, r4
 80105ee:	4629      	mov	r1, r5
 80105f0:	4638      	mov	r0, r7
 80105f2:	f7ff ff6f 	bl	80104d4 <__ssputs_r>
 80105f6:	3001      	adds	r0, #1
 80105f8:	f000 80a9 	beq.w	801074e <_svfiprintf_r+0x1c6>
 80105fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105fe:	445a      	add	r2, fp
 8010600:	9209      	str	r2, [sp, #36]	; 0x24
 8010602:	f89a 3000 	ldrb.w	r3, [sl]
 8010606:	2b00      	cmp	r3, #0
 8010608:	f000 80a1 	beq.w	801074e <_svfiprintf_r+0x1c6>
 801060c:	2300      	movs	r3, #0
 801060e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010616:	f10a 0a01 	add.w	sl, sl, #1
 801061a:	9304      	str	r3, [sp, #16]
 801061c:	9307      	str	r3, [sp, #28]
 801061e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010622:	931a      	str	r3, [sp, #104]	; 0x68
 8010624:	4654      	mov	r4, sl
 8010626:	2205      	movs	r2, #5
 8010628:	f814 1b01 	ldrb.w	r1, [r4], #1
 801062c:	4850      	ldr	r0, [pc, #320]	; (8010770 <_svfiprintf_r+0x1e8>)
 801062e:	f7ef fdef 	bl	8000210 <memchr>
 8010632:	9a04      	ldr	r2, [sp, #16]
 8010634:	b9d8      	cbnz	r0, 801066e <_svfiprintf_r+0xe6>
 8010636:	06d0      	lsls	r0, r2, #27
 8010638:	bf44      	itt	mi
 801063a:	2320      	movmi	r3, #32
 801063c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010640:	0711      	lsls	r1, r2, #28
 8010642:	bf44      	itt	mi
 8010644:	232b      	movmi	r3, #43	; 0x2b
 8010646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801064a:	f89a 3000 	ldrb.w	r3, [sl]
 801064e:	2b2a      	cmp	r3, #42	; 0x2a
 8010650:	d015      	beq.n	801067e <_svfiprintf_r+0xf6>
 8010652:	9a07      	ldr	r2, [sp, #28]
 8010654:	4654      	mov	r4, sl
 8010656:	2000      	movs	r0, #0
 8010658:	f04f 0c0a 	mov.w	ip, #10
 801065c:	4621      	mov	r1, r4
 801065e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010662:	3b30      	subs	r3, #48	; 0x30
 8010664:	2b09      	cmp	r3, #9
 8010666:	d94d      	bls.n	8010704 <_svfiprintf_r+0x17c>
 8010668:	b1b0      	cbz	r0, 8010698 <_svfiprintf_r+0x110>
 801066a:	9207      	str	r2, [sp, #28]
 801066c:	e014      	b.n	8010698 <_svfiprintf_r+0x110>
 801066e:	eba0 0308 	sub.w	r3, r0, r8
 8010672:	fa09 f303 	lsl.w	r3, r9, r3
 8010676:	4313      	orrs	r3, r2
 8010678:	9304      	str	r3, [sp, #16]
 801067a:	46a2      	mov	sl, r4
 801067c:	e7d2      	b.n	8010624 <_svfiprintf_r+0x9c>
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	1d19      	adds	r1, r3, #4
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	9103      	str	r1, [sp, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	bfbb      	ittet	lt
 801068a:	425b      	neglt	r3, r3
 801068c:	f042 0202 	orrlt.w	r2, r2, #2
 8010690:	9307      	strge	r3, [sp, #28]
 8010692:	9307      	strlt	r3, [sp, #28]
 8010694:	bfb8      	it	lt
 8010696:	9204      	strlt	r2, [sp, #16]
 8010698:	7823      	ldrb	r3, [r4, #0]
 801069a:	2b2e      	cmp	r3, #46	; 0x2e
 801069c:	d10c      	bne.n	80106b8 <_svfiprintf_r+0x130>
 801069e:	7863      	ldrb	r3, [r4, #1]
 80106a0:	2b2a      	cmp	r3, #42	; 0x2a
 80106a2:	d134      	bne.n	801070e <_svfiprintf_r+0x186>
 80106a4:	9b03      	ldr	r3, [sp, #12]
 80106a6:	1d1a      	adds	r2, r3, #4
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	9203      	str	r2, [sp, #12]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	bfb8      	it	lt
 80106b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80106b4:	3402      	adds	r4, #2
 80106b6:	9305      	str	r3, [sp, #20]
 80106b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010780 <_svfiprintf_r+0x1f8>
 80106bc:	7821      	ldrb	r1, [r4, #0]
 80106be:	2203      	movs	r2, #3
 80106c0:	4650      	mov	r0, sl
 80106c2:	f7ef fda5 	bl	8000210 <memchr>
 80106c6:	b138      	cbz	r0, 80106d8 <_svfiprintf_r+0x150>
 80106c8:	9b04      	ldr	r3, [sp, #16]
 80106ca:	eba0 000a 	sub.w	r0, r0, sl
 80106ce:	2240      	movs	r2, #64	; 0x40
 80106d0:	4082      	lsls	r2, r0
 80106d2:	4313      	orrs	r3, r2
 80106d4:	3401      	adds	r4, #1
 80106d6:	9304      	str	r3, [sp, #16]
 80106d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106dc:	4825      	ldr	r0, [pc, #148]	; (8010774 <_svfiprintf_r+0x1ec>)
 80106de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106e2:	2206      	movs	r2, #6
 80106e4:	f7ef fd94 	bl	8000210 <memchr>
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d038      	beq.n	801075e <_svfiprintf_r+0x1d6>
 80106ec:	4b22      	ldr	r3, [pc, #136]	; (8010778 <_svfiprintf_r+0x1f0>)
 80106ee:	bb1b      	cbnz	r3, 8010738 <_svfiprintf_r+0x1b0>
 80106f0:	9b03      	ldr	r3, [sp, #12]
 80106f2:	3307      	adds	r3, #7
 80106f4:	f023 0307 	bic.w	r3, r3, #7
 80106f8:	3308      	adds	r3, #8
 80106fa:	9303      	str	r3, [sp, #12]
 80106fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106fe:	4433      	add	r3, r6
 8010700:	9309      	str	r3, [sp, #36]	; 0x24
 8010702:	e768      	b.n	80105d6 <_svfiprintf_r+0x4e>
 8010704:	fb0c 3202 	mla	r2, ip, r2, r3
 8010708:	460c      	mov	r4, r1
 801070a:	2001      	movs	r0, #1
 801070c:	e7a6      	b.n	801065c <_svfiprintf_r+0xd4>
 801070e:	2300      	movs	r3, #0
 8010710:	3401      	adds	r4, #1
 8010712:	9305      	str	r3, [sp, #20]
 8010714:	4619      	mov	r1, r3
 8010716:	f04f 0c0a 	mov.w	ip, #10
 801071a:	4620      	mov	r0, r4
 801071c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010720:	3a30      	subs	r2, #48	; 0x30
 8010722:	2a09      	cmp	r2, #9
 8010724:	d903      	bls.n	801072e <_svfiprintf_r+0x1a6>
 8010726:	2b00      	cmp	r3, #0
 8010728:	d0c6      	beq.n	80106b8 <_svfiprintf_r+0x130>
 801072a:	9105      	str	r1, [sp, #20]
 801072c:	e7c4      	b.n	80106b8 <_svfiprintf_r+0x130>
 801072e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010732:	4604      	mov	r4, r0
 8010734:	2301      	movs	r3, #1
 8010736:	e7f0      	b.n	801071a <_svfiprintf_r+0x192>
 8010738:	ab03      	add	r3, sp, #12
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	462a      	mov	r2, r5
 801073e:	4b0f      	ldr	r3, [pc, #60]	; (801077c <_svfiprintf_r+0x1f4>)
 8010740:	a904      	add	r1, sp, #16
 8010742:	4638      	mov	r0, r7
 8010744:	f7fc fc6e 	bl	800d024 <_printf_float>
 8010748:	1c42      	adds	r2, r0, #1
 801074a:	4606      	mov	r6, r0
 801074c:	d1d6      	bne.n	80106fc <_svfiprintf_r+0x174>
 801074e:	89ab      	ldrh	r3, [r5, #12]
 8010750:	065b      	lsls	r3, r3, #25
 8010752:	f53f af2d 	bmi.w	80105b0 <_svfiprintf_r+0x28>
 8010756:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010758:	b01d      	add	sp, #116	; 0x74
 801075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075e:	ab03      	add	r3, sp, #12
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	462a      	mov	r2, r5
 8010764:	4b05      	ldr	r3, [pc, #20]	; (801077c <_svfiprintf_r+0x1f4>)
 8010766:	a904      	add	r1, sp, #16
 8010768:	4638      	mov	r0, r7
 801076a:	f7fc feff 	bl	800d56c <_printf_i>
 801076e:	e7eb      	b.n	8010748 <_svfiprintf_r+0x1c0>
 8010770:	08011c99 	.word	0x08011c99
 8010774:	08011ca3 	.word	0x08011ca3
 8010778:	0800d025 	.word	0x0800d025
 801077c:	080104d5 	.word	0x080104d5
 8010780:	08011c9f 	.word	0x08011c9f

08010784 <__sflush_r>:
 8010784:	898a      	ldrh	r2, [r1, #12]
 8010786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078a:	4605      	mov	r5, r0
 801078c:	0710      	lsls	r0, r2, #28
 801078e:	460c      	mov	r4, r1
 8010790:	d458      	bmi.n	8010844 <__sflush_r+0xc0>
 8010792:	684b      	ldr	r3, [r1, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	dc05      	bgt.n	80107a4 <__sflush_r+0x20>
 8010798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801079a:	2b00      	cmp	r3, #0
 801079c:	dc02      	bgt.n	80107a4 <__sflush_r+0x20>
 801079e:	2000      	movs	r0, #0
 80107a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107a6:	2e00      	cmp	r6, #0
 80107a8:	d0f9      	beq.n	801079e <__sflush_r+0x1a>
 80107aa:	2300      	movs	r3, #0
 80107ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107b0:	682f      	ldr	r7, [r5, #0]
 80107b2:	6a21      	ldr	r1, [r4, #32]
 80107b4:	602b      	str	r3, [r5, #0]
 80107b6:	d032      	beq.n	801081e <__sflush_r+0x9a>
 80107b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	075a      	lsls	r2, r3, #29
 80107be:	d505      	bpl.n	80107cc <__sflush_r+0x48>
 80107c0:	6863      	ldr	r3, [r4, #4]
 80107c2:	1ac0      	subs	r0, r0, r3
 80107c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107c6:	b10b      	cbz	r3, 80107cc <__sflush_r+0x48>
 80107c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107ca:	1ac0      	subs	r0, r0, r3
 80107cc:	2300      	movs	r3, #0
 80107ce:	4602      	mov	r2, r0
 80107d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107d2:	6a21      	ldr	r1, [r4, #32]
 80107d4:	4628      	mov	r0, r5
 80107d6:	47b0      	blx	r6
 80107d8:	1c43      	adds	r3, r0, #1
 80107da:	89a3      	ldrh	r3, [r4, #12]
 80107dc:	d106      	bne.n	80107ec <__sflush_r+0x68>
 80107de:	6829      	ldr	r1, [r5, #0]
 80107e0:	291d      	cmp	r1, #29
 80107e2:	d82b      	bhi.n	801083c <__sflush_r+0xb8>
 80107e4:	4a29      	ldr	r2, [pc, #164]	; (801088c <__sflush_r+0x108>)
 80107e6:	410a      	asrs	r2, r1
 80107e8:	07d6      	lsls	r6, r2, #31
 80107ea:	d427      	bmi.n	801083c <__sflush_r+0xb8>
 80107ec:	2200      	movs	r2, #0
 80107ee:	6062      	str	r2, [r4, #4]
 80107f0:	04d9      	lsls	r1, r3, #19
 80107f2:	6922      	ldr	r2, [r4, #16]
 80107f4:	6022      	str	r2, [r4, #0]
 80107f6:	d504      	bpl.n	8010802 <__sflush_r+0x7e>
 80107f8:	1c42      	adds	r2, r0, #1
 80107fa:	d101      	bne.n	8010800 <__sflush_r+0x7c>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	b903      	cbnz	r3, 8010802 <__sflush_r+0x7e>
 8010800:	6560      	str	r0, [r4, #84]	; 0x54
 8010802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010804:	602f      	str	r7, [r5, #0]
 8010806:	2900      	cmp	r1, #0
 8010808:	d0c9      	beq.n	801079e <__sflush_r+0x1a>
 801080a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801080e:	4299      	cmp	r1, r3
 8010810:	d002      	beq.n	8010818 <__sflush_r+0x94>
 8010812:	4628      	mov	r0, r5
 8010814:	f7fe fa12 	bl	800ec3c <_free_r>
 8010818:	2000      	movs	r0, #0
 801081a:	6360      	str	r0, [r4, #52]	; 0x34
 801081c:	e7c0      	b.n	80107a0 <__sflush_r+0x1c>
 801081e:	2301      	movs	r3, #1
 8010820:	4628      	mov	r0, r5
 8010822:	47b0      	blx	r6
 8010824:	1c41      	adds	r1, r0, #1
 8010826:	d1c8      	bne.n	80107ba <__sflush_r+0x36>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d0c5      	beq.n	80107ba <__sflush_r+0x36>
 801082e:	2b1d      	cmp	r3, #29
 8010830:	d001      	beq.n	8010836 <__sflush_r+0xb2>
 8010832:	2b16      	cmp	r3, #22
 8010834:	d101      	bne.n	801083a <__sflush_r+0xb6>
 8010836:	602f      	str	r7, [r5, #0]
 8010838:	e7b1      	b.n	801079e <__sflush_r+0x1a>
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010840:	81a3      	strh	r3, [r4, #12]
 8010842:	e7ad      	b.n	80107a0 <__sflush_r+0x1c>
 8010844:	690f      	ldr	r7, [r1, #16]
 8010846:	2f00      	cmp	r7, #0
 8010848:	d0a9      	beq.n	801079e <__sflush_r+0x1a>
 801084a:	0793      	lsls	r3, r2, #30
 801084c:	680e      	ldr	r6, [r1, #0]
 801084e:	bf08      	it	eq
 8010850:	694b      	ldreq	r3, [r1, #20]
 8010852:	600f      	str	r7, [r1, #0]
 8010854:	bf18      	it	ne
 8010856:	2300      	movne	r3, #0
 8010858:	eba6 0807 	sub.w	r8, r6, r7
 801085c:	608b      	str	r3, [r1, #8]
 801085e:	f1b8 0f00 	cmp.w	r8, #0
 8010862:	dd9c      	ble.n	801079e <__sflush_r+0x1a>
 8010864:	6a21      	ldr	r1, [r4, #32]
 8010866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010868:	4643      	mov	r3, r8
 801086a:	463a      	mov	r2, r7
 801086c:	4628      	mov	r0, r5
 801086e:	47b0      	blx	r6
 8010870:	2800      	cmp	r0, #0
 8010872:	dc06      	bgt.n	8010882 <__sflush_r+0xfe>
 8010874:	89a3      	ldrh	r3, [r4, #12]
 8010876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801087a:	81a3      	strh	r3, [r4, #12]
 801087c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010880:	e78e      	b.n	80107a0 <__sflush_r+0x1c>
 8010882:	4407      	add	r7, r0
 8010884:	eba8 0800 	sub.w	r8, r8, r0
 8010888:	e7e9      	b.n	801085e <__sflush_r+0xda>
 801088a:	bf00      	nop
 801088c:	dfbffffe 	.word	0xdfbffffe

08010890 <_fflush_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	690b      	ldr	r3, [r1, #16]
 8010894:	4605      	mov	r5, r0
 8010896:	460c      	mov	r4, r1
 8010898:	b913      	cbnz	r3, 80108a0 <_fflush_r+0x10>
 801089a:	2500      	movs	r5, #0
 801089c:	4628      	mov	r0, r5
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	b118      	cbz	r0, 80108aa <_fflush_r+0x1a>
 80108a2:	6a03      	ldr	r3, [r0, #32]
 80108a4:	b90b      	cbnz	r3, 80108aa <_fflush_r+0x1a>
 80108a6:	f7fd fa1f 	bl	800dce8 <__sinit>
 80108aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d0f3      	beq.n	801089a <_fflush_r+0xa>
 80108b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108b4:	07d0      	lsls	r0, r2, #31
 80108b6:	d404      	bmi.n	80108c2 <_fflush_r+0x32>
 80108b8:	0599      	lsls	r1, r3, #22
 80108ba:	d402      	bmi.n	80108c2 <_fflush_r+0x32>
 80108bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108be:	f7fd fb2a 	bl	800df16 <__retarget_lock_acquire_recursive>
 80108c2:	4628      	mov	r0, r5
 80108c4:	4621      	mov	r1, r4
 80108c6:	f7ff ff5d 	bl	8010784 <__sflush_r>
 80108ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108cc:	07da      	lsls	r2, r3, #31
 80108ce:	4605      	mov	r5, r0
 80108d0:	d4e4      	bmi.n	801089c <_fflush_r+0xc>
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	059b      	lsls	r3, r3, #22
 80108d6:	d4e1      	bmi.n	801089c <_fflush_r+0xc>
 80108d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108da:	f7fd fb1d 	bl	800df18 <__retarget_lock_release_recursive>
 80108de:	e7dd      	b.n	801089c <_fflush_r+0xc>

080108e0 <memmove>:
 80108e0:	4288      	cmp	r0, r1
 80108e2:	b510      	push	{r4, lr}
 80108e4:	eb01 0402 	add.w	r4, r1, r2
 80108e8:	d902      	bls.n	80108f0 <memmove+0x10>
 80108ea:	4284      	cmp	r4, r0
 80108ec:	4623      	mov	r3, r4
 80108ee:	d807      	bhi.n	8010900 <memmove+0x20>
 80108f0:	1e43      	subs	r3, r0, #1
 80108f2:	42a1      	cmp	r1, r4
 80108f4:	d008      	beq.n	8010908 <memmove+0x28>
 80108f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108fe:	e7f8      	b.n	80108f2 <memmove+0x12>
 8010900:	4402      	add	r2, r0
 8010902:	4601      	mov	r1, r0
 8010904:	428a      	cmp	r2, r1
 8010906:	d100      	bne.n	801090a <memmove+0x2a>
 8010908:	bd10      	pop	{r4, pc}
 801090a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801090e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010912:	e7f7      	b.n	8010904 <memmove+0x24>

08010914 <strncmp>:
 8010914:	b510      	push	{r4, lr}
 8010916:	b16a      	cbz	r2, 8010934 <strncmp+0x20>
 8010918:	3901      	subs	r1, #1
 801091a:	1884      	adds	r4, r0, r2
 801091c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010920:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010924:	429a      	cmp	r2, r3
 8010926:	d103      	bne.n	8010930 <strncmp+0x1c>
 8010928:	42a0      	cmp	r0, r4
 801092a:	d001      	beq.n	8010930 <strncmp+0x1c>
 801092c:	2a00      	cmp	r2, #0
 801092e:	d1f5      	bne.n	801091c <strncmp+0x8>
 8010930:	1ad0      	subs	r0, r2, r3
 8010932:	bd10      	pop	{r4, pc}
 8010934:	4610      	mov	r0, r2
 8010936:	e7fc      	b.n	8010932 <strncmp+0x1e>

08010938 <_sbrk_r>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	4d06      	ldr	r5, [pc, #24]	; (8010954 <_sbrk_r+0x1c>)
 801093c:	2300      	movs	r3, #0
 801093e:	4604      	mov	r4, r0
 8010940:	4608      	mov	r0, r1
 8010942:	602b      	str	r3, [r5, #0]
 8010944:	f7f6 fb82 	bl	800704c <_sbrk>
 8010948:	1c43      	adds	r3, r0, #1
 801094a:	d102      	bne.n	8010952 <_sbrk_r+0x1a>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	b103      	cbz	r3, 8010952 <_sbrk_r+0x1a>
 8010950:	6023      	str	r3, [r4, #0]
 8010952:	bd38      	pop	{r3, r4, r5, pc}
 8010954:	20001844 	.word	0x20001844

08010958 <nan>:
 8010958:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010960 <nan+0x8>
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	00000000 	.word	0x00000000
 8010964:	7ff80000 	.word	0x7ff80000

08010968 <__assert_func>:
 8010968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801096a:	4614      	mov	r4, r2
 801096c:	461a      	mov	r2, r3
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <__assert_func+0x2c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4605      	mov	r5, r0
 8010974:	68d8      	ldr	r0, [r3, #12]
 8010976:	b14c      	cbz	r4, 801098c <__assert_func+0x24>
 8010978:	4b07      	ldr	r3, [pc, #28]	; (8010998 <__assert_func+0x30>)
 801097a:	9100      	str	r1, [sp, #0]
 801097c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010980:	4906      	ldr	r1, [pc, #24]	; (801099c <__assert_func+0x34>)
 8010982:	462b      	mov	r3, r5
 8010984:	f000 fb9a 	bl	80110bc <fiprintf>
 8010988:	f000 fbaa 	bl	80110e0 <abort>
 801098c:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <__assert_func+0x38>)
 801098e:	461c      	mov	r4, r3
 8010990:	e7f3      	b.n	801097a <__assert_func+0x12>
 8010992:	bf00      	nop
 8010994:	20000068 	.word	0x20000068
 8010998:	08011cb2 	.word	0x08011cb2
 801099c:	08011cbf 	.word	0x08011cbf
 80109a0:	08011ced 	.word	0x08011ced

080109a4 <_calloc_r>:
 80109a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109a6:	fba1 2402 	umull	r2, r4, r1, r2
 80109aa:	b94c      	cbnz	r4, 80109c0 <_calloc_r+0x1c>
 80109ac:	4611      	mov	r1, r2
 80109ae:	9201      	str	r2, [sp, #4]
 80109b0:	f7fe f9b8 	bl	800ed24 <_malloc_r>
 80109b4:	9a01      	ldr	r2, [sp, #4]
 80109b6:	4605      	mov	r5, r0
 80109b8:	b930      	cbnz	r0, 80109c8 <_calloc_r+0x24>
 80109ba:	4628      	mov	r0, r5
 80109bc:	b003      	add	sp, #12
 80109be:	bd30      	pop	{r4, r5, pc}
 80109c0:	220c      	movs	r2, #12
 80109c2:	6002      	str	r2, [r0, #0]
 80109c4:	2500      	movs	r5, #0
 80109c6:	e7f8      	b.n	80109ba <_calloc_r+0x16>
 80109c8:	4621      	mov	r1, r4
 80109ca:	f7fd fa26 	bl	800de1a <memset>
 80109ce:	e7f4      	b.n	80109ba <_calloc_r+0x16>

080109d0 <rshift>:
 80109d0:	6903      	ldr	r3, [r0, #16]
 80109d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80109d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109de:	f100 0414 	add.w	r4, r0, #20
 80109e2:	dd45      	ble.n	8010a70 <rshift+0xa0>
 80109e4:	f011 011f 	ands.w	r1, r1, #31
 80109e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109f0:	d10c      	bne.n	8010a0c <rshift+0x3c>
 80109f2:	f100 0710 	add.w	r7, r0, #16
 80109f6:	4629      	mov	r1, r5
 80109f8:	42b1      	cmp	r1, r6
 80109fa:	d334      	bcc.n	8010a66 <rshift+0x96>
 80109fc:	1a9b      	subs	r3, r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	1eea      	subs	r2, r5, #3
 8010a02:	4296      	cmp	r6, r2
 8010a04:	bf38      	it	cc
 8010a06:	2300      	movcc	r3, #0
 8010a08:	4423      	add	r3, r4
 8010a0a:	e015      	b.n	8010a38 <rshift+0x68>
 8010a0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a10:	f1c1 0820 	rsb	r8, r1, #32
 8010a14:	40cf      	lsrs	r7, r1
 8010a16:	f105 0e04 	add.w	lr, r5, #4
 8010a1a:	46a1      	mov	r9, r4
 8010a1c:	4576      	cmp	r6, lr
 8010a1e:	46f4      	mov	ip, lr
 8010a20:	d815      	bhi.n	8010a4e <rshift+0x7e>
 8010a22:	1a9a      	subs	r2, r3, r2
 8010a24:	0092      	lsls	r2, r2, #2
 8010a26:	3a04      	subs	r2, #4
 8010a28:	3501      	adds	r5, #1
 8010a2a:	42ae      	cmp	r6, r5
 8010a2c:	bf38      	it	cc
 8010a2e:	2200      	movcc	r2, #0
 8010a30:	18a3      	adds	r3, r4, r2
 8010a32:	50a7      	str	r7, [r4, r2]
 8010a34:	b107      	cbz	r7, 8010a38 <rshift+0x68>
 8010a36:	3304      	adds	r3, #4
 8010a38:	1b1a      	subs	r2, r3, r4
 8010a3a:	42a3      	cmp	r3, r4
 8010a3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a40:	bf08      	it	eq
 8010a42:	2300      	moveq	r3, #0
 8010a44:	6102      	str	r2, [r0, #16]
 8010a46:	bf08      	it	eq
 8010a48:	6143      	streq	r3, [r0, #20]
 8010a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a4e:	f8dc c000 	ldr.w	ip, [ip]
 8010a52:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a56:	ea4c 0707 	orr.w	r7, ip, r7
 8010a5a:	f849 7b04 	str.w	r7, [r9], #4
 8010a5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a62:	40cf      	lsrs	r7, r1
 8010a64:	e7da      	b.n	8010a1c <rshift+0x4c>
 8010a66:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a6e:	e7c3      	b.n	80109f8 <rshift+0x28>
 8010a70:	4623      	mov	r3, r4
 8010a72:	e7e1      	b.n	8010a38 <rshift+0x68>

08010a74 <__hexdig_fun>:
 8010a74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010a78:	2b09      	cmp	r3, #9
 8010a7a:	d802      	bhi.n	8010a82 <__hexdig_fun+0xe>
 8010a7c:	3820      	subs	r0, #32
 8010a7e:	b2c0      	uxtb	r0, r0
 8010a80:	4770      	bx	lr
 8010a82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010a86:	2b05      	cmp	r3, #5
 8010a88:	d801      	bhi.n	8010a8e <__hexdig_fun+0x1a>
 8010a8a:	3847      	subs	r0, #71	; 0x47
 8010a8c:	e7f7      	b.n	8010a7e <__hexdig_fun+0xa>
 8010a8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010a92:	2b05      	cmp	r3, #5
 8010a94:	d801      	bhi.n	8010a9a <__hexdig_fun+0x26>
 8010a96:	3827      	subs	r0, #39	; 0x27
 8010a98:	e7f1      	b.n	8010a7e <__hexdig_fun+0xa>
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	4770      	bx	lr
	...

08010aa0 <__gethex>:
 8010aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	4617      	mov	r7, r2
 8010aa6:	680a      	ldr	r2, [r1, #0]
 8010aa8:	b085      	sub	sp, #20
 8010aaa:	f102 0b02 	add.w	fp, r2, #2
 8010aae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010ab2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010ab6:	4681      	mov	r9, r0
 8010ab8:	468a      	mov	sl, r1
 8010aba:	9302      	str	r3, [sp, #8]
 8010abc:	32fe      	adds	r2, #254	; 0xfe
 8010abe:	eb02 030b 	add.w	r3, r2, fp
 8010ac2:	46d8      	mov	r8, fp
 8010ac4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010ac8:	9301      	str	r3, [sp, #4]
 8010aca:	2830      	cmp	r0, #48	; 0x30
 8010acc:	d0f7      	beq.n	8010abe <__gethex+0x1e>
 8010ace:	f7ff ffd1 	bl	8010a74 <__hexdig_fun>
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d138      	bne.n	8010b4a <__gethex+0xaa>
 8010ad8:	49a7      	ldr	r1, [pc, #668]	; (8010d78 <__gethex+0x2d8>)
 8010ada:	2201      	movs	r2, #1
 8010adc:	4640      	mov	r0, r8
 8010ade:	f7ff ff19 	bl	8010914 <strncmp>
 8010ae2:	4606      	mov	r6, r0
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d169      	bne.n	8010bbc <__gethex+0x11c>
 8010ae8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010aec:	465d      	mov	r5, fp
 8010aee:	f7ff ffc1 	bl	8010a74 <__hexdig_fun>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d064      	beq.n	8010bc0 <__gethex+0x120>
 8010af6:	465a      	mov	r2, fp
 8010af8:	7810      	ldrb	r0, [r2, #0]
 8010afa:	2830      	cmp	r0, #48	; 0x30
 8010afc:	4690      	mov	r8, r2
 8010afe:	f102 0201 	add.w	r2, r2, #1
 8010b02:	d0f9      	beq.n	8010af8 <__gethex+0x58>
 8010b04:	f7ff ffb6 	bl	8010a74 <__hexdig_fun>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	fab0 f480 	clz	r4, r0
 8010b0e:	0964      	lsrs	r4, r4, #5
 8010b10:	465e      	mov	r6, fp
 8010b12:	9301      	str	r3, [sp, #4]
 8010b14:	4642      	mov	r2, r8
 8010b16:	4615      	mov	r5, r2
 8010b18:	3201      	adds	r2, #1
 8010b1a:	7828      	ldrb	r0, [r5, #0]
 8010b1c:	f7ff ffaa 	bl	8010a74 <__hexdig_fun>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d1f8      	bne.n	8010b16 <__gethex+0x76>
 8010b24:	4994      	ldr	r1, [pc, #592]	; (8010d78 <__gethex+0x2d8>)
 8010b26:	2201      	movs	r2, #1
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f7ff fef3 	bl	8010914 <strncmp>
 8010b2e:	b978      	cbnz	r0, 8010b50 <__gethex+0xb0>
 8010b30:	b946      	cbnz	r6, 8010b44 <__gethex+0xa4>
 8010b32:	1c6e      	adds	r6, r5, #1
 8010b34:	4632      	mov	r2, r6
 8010b36:	4615      	mov	r5, r2
 8010b38:	3201      	adds	r2, #1
 8010b3a:	7828      	ldrb	r0, [r5, #0]
 8010b3c:	f7ff ff9a 	bl	8010a74 <__hexdig_fun>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d1f8      	bne.n	8010b36 <__gethex+0x96>
 8010b44:	1b73      	subs	r3, r6, r5
 8010b46:	009e      	lsls	r6, r3, #2
 8010b48:	e004      	b.n	8010b54 <__gethex+0xb4>
 8010b4a:	2400      	movs	r4, #0
 8010b4c:	4626      	mov	r6, r4
 8010b4e:	e7e1      	b.n	8010b14 <__gethex+0x74>
 8010b50:	2e00      	cmp	r6, #0
 8010b52:	d1f7      	bne.n	8010b44 <__gethex+0xa4>
 8010b54:	782b      	ldrb	r3, [r5, #0]
 8010b56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b5a:	2b50      	cmp	r3, #80	; 0x50
 8010b5c:	d13d      	bne.n	8010bda <__gethex+0x13a>
 8010b5e:	786b      	ldrb	r3, [r5, #1]
 8010b60:	2b2b      	cmp	r3, #43	; 0x2b
 8010b62:	d02f      	beq.n	8010bc4 <__gethex+0x124>
 8010b64:	2b2d      	cmp	r3, #45	; 0x2d
 8010b66:	d031      	beq.n	8010bcc <__gethex+0x12c>
 8010b68:	1c69      	adds	r1, r5, #1
 8010b6a:	f04f 0b00 	mov.w	fp, #0
 8010b6e:	7808      	ldrb	r0, [r1, #0]
 8010b70:	f7ff ff80 	bl	8010a74 <__hexdig_fun>
 8010b74:	1e42      	subs	r2, r0, #1
 8010b76:	b2d2      	uxtb	r2, r2
 8010b78:	2a18      	cmp	r2, #24
 8010b7a:	d82e      	bhi.n	8010bda <__gethex+0x13a>
 8010b7c:	f1a0 0210 	sub.w	r2, r0, #16
 8010b80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b84:	f7ff ff76 	bl	8010a74 <__hexdig_fun>
 8010b88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8010b8c:	fa5f fc8c 	uxtb.w	ip, ip
 8010b90:	f1bc 0f18 	cmp.w	ip, #24
 8010b94:	d91d      	bls.n	8010bd2 <__gethex+0x132>
 8010b96:	f1bb 0f00 	cmp.w	fp, #0
 8010b9a:	d000      	beq.n	8010b9e <__gethex+0xfe>
 8010b9c:	4252      	negs	r2, r2
 8010b9e:	4416      	add	r6, r2
 8010ba0:	f8ca 1000 	str.w	r1, [sl]
 8010ba4:	b1dc      	cbz	r4, 8010bde <__gethex+0x13e>
 8010ba6:	9b01      	ldr	r3, [sp, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	bf14      	ite	ne
 8010bac:	f04f 0800 	movne.w	r8, #0
 8010bb0:	f04f 0806 	moveq.w	r8, #6
 8010bb4:	4640      	mov	r0, r8
 8010bb6:	b005      	add	sp, #20
 8010bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bbc:	4645      	mov	r5, r8
 8010bbe:	4626      	mov	r6, r4
 8010bc0:	2401      	movs	r4, #1
 8010bc2:	e7c7      	b.n	8010b54 <__gethex+0xb4>
 8010bc4:	f04f 0b00 	mov.w	fp, #0
 8010bc8:	1ca9      	adds	r1, r5, #2
 8010bca:	e7d0      	b.n	8010b6e <__gethex+0xce>
 8010bcc:	f04f 0b01 	mov.w	fp, #1
 8010bd0:	e7fa      	b.n	8010bc8 <__gethex+0x128>
 8010bd2:	230a      	movs	r3, #10
 8010bd4:	fb03 0002 	mla	r0, r3, r2, r0
 8010bd8:	e7d0      	b.n	8010b7c <__gethex+0xdc>
 8010bda:	4629      	mov	r1, r5
 8010bdc:	e7e0      	b.n	8010ba0 <__gethex+0x100>
 8010bde:	eba5 0308 	sub.w	r3, r5, r8
 8010be2:	3b01      	subs	r3, #1
 8010be4:	4621      	mov	r1, r4
 8010be6:	2b07      	cmp	r3, #7
 8010be8:	dc0a      	bgt.n	8010c00 <__gethex+0x160>
 8010bea:	4648      	mov	r0, r9
 8010bec:	f7fe f926 	bl	800ee3c <_Balloc>
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	b940      	cbnz	r0, 8010c06 <__gethex+0x166>
 8010bf4:	4b61      	ldr	r3, [pc, #388]	; (8010d7c <__gethex+0x2dc>)
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	21e4      	movs	r1, #228	; 0xe4
 8010bfa:	4861      	ldr	r0, [pc, #388]	; (8010d80 <__gethex+0x2e0>)
 8010bfc:	f7ff feb4 	bl	8010968 <__assert_func>
 8010c00:	3101      	adds	r1, #1
 8010c02:	105b      	asrs	r3, r3, #1
 8010c04:	e7ef      	b.n	8010be6 <__gethex+0x146>
 8010c06:	f100 0a14 	add.w	sl, r0, #20
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	495a      	ldr	r1, [pc, #360]	; (8010d78 <__gethex+0x2d8>)
 8010c0e:	f8cd a004 	str.w	sl, [sp, #4]
 8010c12:	469b      	mov	fp, r3
 8010c14:	45a8      	cmp	r8, r5
 8010c16:	d342      	bcc.n	8010c9e <__gethex+0x1fe>
 8010c18:	9801      	ldr	r0, [sp, #4]
 8010c1a:	f840 bb04 	str.w	fp, [r0], #4
 8010c1e:	eba0 000a 	sub.w	r0, r0, sl
 8010c22:	1080      	asrs	r0, r0, #2
 8010c24:	6120      	str	r0, [r4, #16]
 8010c26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8010c2a:	4658      	mov	r0, fp
 8010c2c:	f7fe f9f8 	bl	800f020 <__hi0bits>
 8010c30:	683d      	ldr	r5, [r7, #0]
 8010c32:	eba8 0000 	sub.w	r0, r8, r0
 8010c36:	42a8      	cmp	r0, r5
 8010c38:	dd59      	ble.n	8010cee <__gethex+0x24e>
 8010c3a:	eba0 0805 	sub.w	r8, r0, r5
 8010c3e:	4641      	mov	r1, r8
 8010c40:	4620      	mov	r0, r4
 8010c42:	f7fe fd87 	bl	800f754 <__any_on>
 8010c46:	4683      	mov	fp, r0
 8010c48:	b1b8      	cbz	r0, 8010c7a <__gethex+0x1da>
 8010c4a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8010c4e:	1159      	asrs	r1, r3, #5
 8010c50:	f003 021f 	and.w	r2, r3, #31
 8010c54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010c58:	f04f 0b01 	mov.w	fp, #1
 8010c5c:	fa0b f202 	lsl.w	r2, fp, r2
 8010c60:	420a      	tst	r2, r1
 8010c62:	d00a      	beq.n	8010c7a <__gethex+0x1da>
 8010c64:	455b      	cmp	r3, fp
 8010c66:	dd06      	ble.n	8010c76 <__gethex+0x1d6>
 8010c68:	f1a8 0102 	sub.w	r1, r8, #2
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f7fe fd71 	bl	800f754 <__any_on>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d138      	bne.n	8010ce8 <__gethex+0x248>
 8010c76:	f04f 0b02 	mov.w	fp, #2
 8010c7a:	4641      	mov	r1, r8
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f7ff fea7 	bl	80109d0 <rshift>
 8010c82:	4446      	add	r6, r8
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	42b3      	cmp	r3, r6
 8010c88:	da41      	bge.n	8010d0e <__gethex+0x26e>
 8010c8a:	4621      	mov	r1, r4
 8010c8c:	4648      	mov	r0, r9
 8010c8e:	f7fe f915 	bl	800eebc <_Bfree>
 8010c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c94:	2300      	movs	r3, #0
 8010c96:	6013      	str	r3, [r2, #0]
 8010c98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010c9c:	e78a      	b.n	8010bb4 <__gethex+0x114>
 8010c9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010ca2:	2a2e      	cmp	r2, #46	; 0x2e
 8010ca4:	d014      	beq.n	8010cd0 <__gethex+0x230>
 8010ca6:	2b20      	cmp	r3, #32
 8010ca8:	d106      	bne.n	8010cb8 <__gethex+0x218>
 8010caa:	9b01      	ldr	r3, [sp, #4]
 8010cac:	f843 bb04 	str.w	fp, [r3], #4
 8010cb0:	f04f 0b00 	mov.w	fp, #0
 8010cb4:	9301      	str	r3, [sp, #4]
 8010cb6:	465b      	mov	r3, fp
 8010cb8:	7828      	ldrb	r0, [r5, #0]
 8010cba:	9303      	str	r3, [sp, #12]
 8010cbc:	f7ff feda 	bl	8010a74 <__hexdig_fun>
 8010cc0:	9b03      	ldr	r3, [sp, #12]
 8010cc2:	f000 000f 	and.w	r0, r0, #15
 8010cc6:	4098      	lsls	r0, r3
 8010cc8:	ea4b 0b00 	orr.w	fp, fp, r0
 8010ccc:	3304      	adds	r3, #4
 8010cce:	e7a1      	b.n	8010c14 <__gethex+0x174>
 8010cd0:	45a8      	cmp	r8, r5
 8010cd2:	d8e8      	bhi.n	8010ca6 <__gethex+0x206>
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	9303      	str	r3, [sp, #12]
 8010cda:	f7ff fe1b 	bl	8010914 <strncmp>
 8010cde:	4926      	ldr	r1, [pc, #152]	; (8010d78 <__gethex+0x2d8>)
 8010ce0:	9b03      	ldr	r3, [sp, #12]
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d1df      	bne.n	8010ca6 <__gethex+0x206>
 8010ce6:	e795      	b.n	8010c14 <__gethex+0x174>
 8010ce8:	f04f 0b03 	mov.w	fp, #3
 8010cec:	e7c5      	b.n	8010c7a <__gethex+0x1da>
 8010cee:	da0b      	bge.n	8010d08 <__gethex+0x268>
 8010cf0:	eba5 0800 	sub.w	r8, r5, r0
 8010cf4:	4621      	mov	r1, r4
 8010cf6:	4642      	mov	r2, r8
 8010cf8:	4648      	mov	r0, r9
 8010cfa:	f7fe faf9 	bl	800f2f0 <__lshift>
 8010cfe:	eba6 0608 	sub.w	r6, r6, r8
 8010d02:	4604      	mov	r4, r0
 8010d04:	f100 0a14 	add.w	sl, r0, #20
 8010d08:	f04f 0b00 	mov.w	fp, #0
 8010d0c:	e7ba      	b.n	8010c84 <__gethex+0x1e4>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	42b3      	cmp	r3, r6
 8010d12:	dd73      	ble.n	8010dfc <__gethex+0x35c>
 8010d14:	1b9e      	subs	r6, r3, r6
 8010d16:	42b5      	cmp	r5, r6
 8010d18:	dc34      	bgt.n	8010d84 <__gethex+0x2e4>
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2b02      	cmp	r3, #2
 8010d1e:	d023      	beq.n	8010d68 <__gethex+0x2c8>
 8010d20:	2b03      	cmp	r3, #3
 8010d22:	d025      	beq.n	8010d70 <__gethex+0x2d0>
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	d115      	bne.n	8010d54 <__gethex+0x2b4>
 8010d28:	42b5      	cmp	r5, r6
 8010d2a:	d113      	bne.n	8010d54 <__gethex+0x2b4>
 8010d2c:	2d01      	cmp	r5, #1
 8010d2e:	d10b      	bne.n	8010d48 <__gethex+0x2a8>
 8010d30:	9a02      	ldr	r2, [sp, #8]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6013      	str	r3, [r2, #0]
 8010d36:	2301      	movs	r3, #1
 8010d38:	6123      	str	r3, [r4, #16]
 8010d3a:	f8ca 3000 	str.w	r3, [sl]
 8010d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d40:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010d44:	601c      	str	r4, [r3, #0]
 8010d46:	e735      	b.n	8010bb4 <__gethex+0x114>
 8010d48:	1e69      	subs	r1, r5, #1
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	f7fe fd02 	bl	800f754 <__any_on>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d1ed      	bne.n	8010d30 <__gethex+0x290>
 8010d54:	4621      	mov	r1, r4
 8010d56:	4648      	mov	r0, r9
 8010d58:	f7fe f8b0 	bl	800eebc <_Bfree>
 8010d5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d5e:	2300      	movs	r3, #0
 8010d60:	6013      	str	r3, [r2, #0]
 8010d62:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010d66:	e725      	b.n	8010bb4 <__gethex+0x114>
 8010d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d1f2      	bne.n	8010d54 <__gethex+0x2b4>
 8010d6e:	e7df      	b.n	8010d30 <__gethex+0x290>
 8010d70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1dc      	bne.n	8010d30 <__gethex+0x290>
 8010d76:	e7ed      	b.n	8010d54 <__gethex+0x2b4>
 8010d78:	08011b44 	.word	0x08011b44
 8010d7c:	080119d9 	.word	0x080119d9
 8010d80:	08011cee 	.word	0x08011cee
 8010d84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8010d88:	f1bb 0f00 	cmp.w	fp, #0
 8010d8c:	d133      	bne.n	8010df6 <__gethex+0x356>
 8010d8e:	f1b8 0f00 	cmp.w	r8, #0
 8010d92:	d004      	beq.n	8010d9e <__gethex+0x2fe>
 8010d94:	4641      	mov	r1, r8
 8010d96:	4620      	mov	r0, r4
 8010d98:	f7fe fcdc 	bl	800f754 <__any_on>
 8010d9c:	4683      	mov	fp, r0
 8010d9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010da2:	2301      	movs	r3, #1
 8010da4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010da8:	f008 081f 	and.w	r8, r8, #31
 8010dac:	fa03 f308 	lsl.w	r3, r3, r8
 8010db0:	4213      	tst	r3, r2
 8010db2:	4631      	mov	r1, r6
 8010db4:	4620      	mov	r0, r4
 8010db6:	bf18      	it	ne
 8010db8:	f04b 0b02 	orrne.w	fp, fp, #2
 8010dbc:	1bad      	subs	r5, r5, r6
 8010dbe:	f7ff fe07 	bl	80109d0 <rshift>
 8010dc2:	687e      	ldr	r6, [r7, #4]
 8010dc4:	f04f 0802 	mov.w	r8, #2
 8010dc8:	f1bb 0f00 	cmp.w	fp, #0
 8010dcc:	d04a      	beq.n	8010e64 <__gethex+0x3c4>
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	d016      	beq.n	8010e02 <__gethex+0x362>
 8010dd4:	2b03      	cmp	r3, #3
 8010dd6:	d018      	beq.n	8010e0a <__gethex+0x36a>
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d109      	bne.n	8010df0 <__gethex+0x350>
 8010ddc:	f01b 0f02 	tst.w	fp, #2
 8010de0:	d006      	beq.n	8010df0 <__gethex+0x350>
 8010de2:	f8da 3000 	ldr.w	r3, [sl]
 8010de6:	ea4b 0b03 	orr.w	fp, fp, r3
 8010dea:	f01b 0f01 	tst.w	fp, #1
 8010dee:	d10f      	bne.n	8010e10 <__gethex+0x370>
 8010df0:	f048 0810 	orr.w	r8, r8, #16
 8010df4:	e036      	b.n	8010e64 <__gethex+0x3c4>
 8010df6:	f04f 0b01 	mov.w	fp, #1
 8010dfa:	e7d0      	b.n	8010d9e <__gethex+0x2fe>
 8010dfc:	f04f 0801 	mov.w	r8, #1
 8010e00:	e7e2      	b.n	8010dc8 <__gethex+0x328>
 8010e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e04:	f1c3 0301 	rsb	r3, r3, #1
 8010e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d0ef      	beq.n	8010df0 <__gethex+0x350>
 8010e10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e14:	f104 0214 	add.w	r2, r4, #20
 8010e18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010e1c:	9301      	str	r3, [sp, #4]
 8010e1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010e22:	2300      	movs	r3, #0
 8010e24:	4694      	mov	ip, r2
 8010e26:	f852 1b04 	ldr.w	r1, [r2], #4
 8010e2a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8010e2e:	d01e      	beq.n	8010e6e <__gethex+0x3ce>
 8010e30:	3101      	adds	r1, #1
 8010e32:	f8cc 1000 	str.w	r1, [ip]
 8010e36:	f1b8 0f02 	cmp.w	r8, #2
 8010e3a:	f104 0214 	add.w	r2, r4, #20
 8010e3e:	d13d      	bne.n	8010ebc <__gethex+0x41c>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	3b01      	subs	r3, #1
 8010e44:	42ab      	cmp	r3, r5
 8010e46:	d10b      	bne.n	8010e60 <__gethex+0x3c0>
 8010e48:	1169      	asrs	r1, r5, #5
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	f005 051f 	and.w	r5, r5, #31
 8010e50:	fa03 f505 	lsl.w	r5, r3, r5
 8010e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e58:	421d      	tst	r5, r3
 8010e5a:	bf18      	it	ne
 8010e5c:	f04f 0801 	movne.w	r8, #1
 8010e60:	f048 0820 	orr.w	r8, r8, #32
 8010e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e66:	601c      	str	r4, [r3, #0]
 8010e68:	9b02      	ldr	r3, [sp, #8]
 8010e6a:	601e      	str	r6, [r3, #0]
 8010e6c:	e6a2      	b.n	8010bb4 <__gethex+0x114>
 8010e6e:	4290      	cmp	r0, r2
 8010e70:	f842 3c04 	str.w	r3, [r2, #-4]
 8010e74:	d8d6      	bhi.n	8010e24 <__gethex+0x384>
 8010e76:	68a2      	ldr	r2, [r4, #8]
 8010e78:	4593      	cmp	fp, r2
 8010e7a:	db17      	blt.n	8010eac <__gethex+0x40c>
 8010e7c:	6861      	ldr	r1, [r4, #4]
 8010e7e:	4648      	mov	r0, r9
 8010e80:	3101      	adds	r1, #1
 8010e82:	f7fd ffdb 	bl	800ee3c <_Balloc>
 8010e86:	4682      	mov	sl, r0
 8010e88:	b918      	cbnz	r0, 8010e92 <__gethex+0x3f2>
 8010e8a:	4b1b      	ldr	r3, [pc, #108]	; (8010ef8 <__gethex+0x458>)
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	2184      	movs	r1, #132	; 0x84
 8010e90:	e6b3      	b.n	8010bfa <__gethex+0x15a>
 8010e92:	6922      	ldr	r2, [r4, #16]
 8010e94:	3202      	adds	r2, #2
 8010e96:	f104 010c 	add.w	r1, r4, #12
 8010e9a:	0092      	lsls	r2, r2, #2
 8010e9c:	300c      	adds	r0, #12
 8010e9e:	f7fd f83c 	bl	800df1a <memcpy>
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	4648      	mov	r0, r9
 8010ea6:	f7fe f809 	bl	800eebc <_Bfree>
 8010eaa:	4654      	mov	r4, sl
 8010eac:	6922      	ldr	r2, [r4, #16]
 8010eae:	1c51      	adds	r1, r2, #1
 8010eb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010eb4:	6121      	str	r1, [r4, #16]
 8010eb6:	2101      	movs	r1, #1
 8010eb8:	6151      	str	r1, [r2, #20]
 8010eba:	e7bc      	b.n	8010e36 <__gethex+0x396>
 8010ebc:	6921      	ldr	r1, [r4, #16]
 8010ebe:	4559      	cmp	r1, fp
 8010ec0:	dd0b      	ble.n	8010eda <__gethex+0x43a>
 8010ec2:	2101      	movs	r1, #1
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f7ff fd83 	bl	80109d0 <rshift>
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	3601      	adds	r6, #1
 8010ece:	42b3      	cmp	r3, r6
 8010ed0:	f6ff aedb 	blt.w	8010c8a <__gethex+0x1ea>
 8010ed4:	f04f 0801 	mov.w	r8, #1
 8010ed8:	e7c2      	b.n	8010e60 <__gethex+0x3c0>
 8010eda:	f015 051f 	ands.w	r5, r5, #31
 8010ede:	d0f9      	beq.n	8010ed4 <__gethex+0x434>
 8010ee0:	9b01      	ldr	r3, [sp, #4]
 8010ee2:	441a      	add	r2, r3
 8010ee4:	f1c5 0520 	rsb	r5, r5, #32
 8010ee8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010eec:	f7fe f898 	bl	800f020 <__hi0bits>
 8010ef0:	42a8      	cmp	r0, r5
 8010ef2:	dbe6      	blt.n	8010ec2 <__gethex+0x422>
 8010ef4:	e7ee      	b.n	8010ed4 <__gethex+0x434>
 8010ef6:	bf00      	nop
 8010ef8:	080119d9 	.word	0x080119d9

08010efc <L_shift>:
 8010efc:	f1c2 0208 	rsb	r2, r2, #8
 8010f00:	0092      	lsls	r2, r2, #2
 8010f02:	b570      	push	{r4, r5, r6, lr}
 8010f04:	f1c2 0620 	rsb	r6, r2, #32
 8010f08:	6843      	ldr	r3, [r0, #4]
 8010f0a:	6804      	ldr	r4, [r0, #0]
 8010f0c:	fa03 f506 	lsl.w	r5, r3, r6
 8010f10:	432c      	orrs	r4, r5
 8010f12:	40d3      	lsrs	r3, r2
 8010f14:	6004      	str	r4, [r0, #0]
 8010f16:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f1a:	4288      	cmp	r0, r1
 8010f1c:	d3f4      	bcc.n	8010f08 <L_shift+0xc>
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}

08010f20 <__match>:
 8010f20:	b530      	push	{r4, r5, lr}
 8010f22:	6803      	ldr	r3, [r0, #0]
 8010f24:	3301      	adds	r3, #1
 8010f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f2a:	b914      	cbnz	r4, 8010f32 <__match+0x12>
 8010f2c:	6003      	str	r3, [r0, #0]
 8010f2e:	2001      	movs	r0, #1
 8010f30:	bd30      	pop	{r4, r5, pc}
 8010f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f3a:	2d19      	cmp	r5, #25
 8010f3c:	bf98      	it	ls
 8010f3e:	3220      	addls	r2, #32
 8010f40:	42a2      	cmp	r2, r4
 8010f42:	d0f0      	beq.n	8010f26 <__match+0x6>
 8010f44:	2000      	movs	r0, #0
 8010f46:	e7f3      	b.n	8010f30 <__match+0x10>

08010f48 <__hexnan>:
 8010f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4c:	680b      	ldr	r3, [r1, #0]
 8010f4e:	6801      	ldr	r1, [r0, #0]
 8010f50:	115e      	asrs	r6, r3, #5
 8010f52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f56:	f013 031f 	ands.w	r3, r3, #31
 8010f5a:	b087      	sub	sp, #28
 8010f5c:	bf18      	it	ne
 8010f5e:	3604      	addne	r6, #4
 8010f60:	2500      	movs	r5, #0
 8010f62:	1f37      	subs	r7, r6, #4
 8010f64:	4682      	mov	sl, r0
 8010f66:	4690      	mov	r8, r2
 8010f68:	9301      	str	r3, [sp, #4]
 8010f6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f6e:	46b9      	mov	r9, r7
 8010f70:	463c      	mov	r4, r7
 8010f72:	9502      	str	r5, [sp, #8]
 8010f74:	46ab      	mov	fp, r5
 8010f76:	784a      	ldrb	r2, [r1, #1]
 8010f78:	1c4b      	adds	r3, r1, #1
 8010f7a:	9303      	str	r3, [sp, #12]
 8010f7c:	b342      	cbz	r2, 8010fd0 <__hexnan+0x88>
 8010f7e:	4610      	mov	r0, r2
 8010f80:	9105      	str	r1, [sp, #20]
 8010f82:	9204      	str	r2, [sp, #16]
 8010f84:	f7ff fd76 	bl	8010a74 <__hexdig_fun>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d14f      	bne.n	801102c <__hexnan+0xe4>
 8010f8c:	9a04      	ldr	r2, [sp, #16]
 8010f8e:	9905      	ldr	r1, [sp, #20]
 8010f90:	2a20      	cmp	r2, #32
 8010f92:	d818      	bhi.n	8010fc6 <__hexnan+0x7e>
 8010f94:	9b02      	ldr	r3, [sp, #8]
 8010f96:	459b      	cmp	fp, r3
 8010f98:	dd13      	ble.n	8010fc2 <__hexnan+0x7a>
 8010f9a:	454c      	cmp	r4, r9
 8010f9c:	d206      	bcs.n	8010fac <__hexnan+0x64>
 8010f9e:	2d07      	cmp	r5, #7
 8010fa0:	dc04      	bgt.n	8010fac <__hexnan+0x64>
 8010fa2:	462a      	mov	r2, r5
 8010fa4:	4649      	mov	r1, r9
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	f7ff ffa8 	bl	8010efc <L_shift>
 8010fac:	4544      	cmp	r4, r8
 8010fae:	d950      	bls.n	8011052 <__hexnan+0x10a>
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	f1a4 0904 	sub.w	r9, r4, #4
 8010fb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fba:	f8cd b008 	str.w	fp, [sp, #8]
 8010fbe:	464c      	mov	r4, r9
 8010fc0:	461d      	mov	r5, r3
 8010fc2:	9903      	ldr	r1, [sp, #12]
 8010fc4:	e7d7      	b.n	8010f76 <__hexnan+0x2e>
 8010fc6:	2a29      	cmp	r2, #41	; 0x29
 8010fc8:	d155      	bne.n	8011076 <__hexnan+0x12e>
 8010fca:	3102      	adds	r1, #2
 8010fcc:	f8ca 1000 	str.w	r1, [sl]
 8010fd0:	f1bb 0f00 	cmp.w	fp, #0
 8010fd4:	d04f      	beq.n	8011076 <__hexnan+0x12e>
 8010fd6:	454c      	cmp	r4, r9
 8010fd8:	d206      	bcs.n	8010fe8 <__hexnan+0xa0>
 8010fda:	2d07      	cmp	r5, #7
 8010fdc:	dc04      	bgt.n	8010fe8 <__hexnan+0xa0>
 8010fde:	462a      	mov	r2, r5
 8010fe0:	4649      	mov	r1, r9
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f7ff ff8a 	bl	8010efc <L_shift>
 8010fe8:	4544      	cmp	r4, r8
 8010fea:	d934      	bls.n	8011056 <__hexnan+0x10e>
 8010fec:	f1a8 0204 	sub.w	r2, r8, #4
 8010ff0:	4623      	mov	r3, r4
 8010ff2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010ff6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ffa:	429f      	cmp	r7, r3
 8010ffc:	d2f9      	bcs.n	8010ff2 <__hexnan+0xaa>
 8010ffe:	1b3b      	subs	r3, r7, r4
 8011000:	f023 0303 	bic.w	r3, r3, #3
 8011004:	3304      	adds	r3, #4
 8011006:	3e03      	subs	r6, #3
 8011008:	3401      	adds	r4, #1
 801100a:	42a6      	cmp	r6, r4
 801100c:	bf38      	it	cc
 801100e:	2304      	movcc	r3, #4
 8011010:	4443      	add	r3, r8
 8011012:	2200      	movs	r2, #0
 8011014:	f843 2b04 	str.w	r2, [r3], #4
 8011018:	429f      	cmp	r7, r3
 801101a:	d2fb      	bcs.n	8011014 <__hexnan+0xcc>
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	b91b      	cbnz	r3, 8011028 <__hexnan+0xe0>
 8011020:	4547      	cmp	r7, r8
 8011022:	d126      	bne.n	8011072 <__hexnan+0x12a>
 8011024:	2301      	movs	r3, #1
 8011026:	603b      	str	r3, [r7, #0]
 8011028:	2005      	movs	r0, #5
 801102a:	e025      	b.n	8011078 <__hexnan+0x130>
 801102c:	3501      	adds	r5, #1
 801102e:	2d08      	cmp	r5, #8
 8011030:	f10b 0b01 	add.w	fp, fp, #1
 8011034:	dd06      	ble.n	8011044 <__hexnan+0xfc>
 8011036:	4544      	cmp	r4, r8
 8011038:	d9c3      	bls.n	8010fc2 <__hexnan+0x7a>
 801103a:	2300      	movs	r3, #0
 801103c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011040:	2501      	movs	r5, #1
 8011042:	3c04      	subs	r4, #4
 8011044:	6822      	ldr	r2, [r4, #0]
 8011046:	f000 000f 	and.w	r0, r0, #15
 801104a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801104e:	6020      	str	r0, [r4, #0]
 8011050:	e7b7      	b.n	8010fc2 <__hexnan+0x7a>
 8011052:	2508      	movs	r5, #8
 8011054:	e7b5      	b.n	8010fc2 <__hexnan+0x7a>
 8011056:	9b01      	ldr	r3, [sp, #4]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d0df      	beq.n	801101c <__hexnan+0xd4>
 801105c:	f1c3 0320 	rsb	r3, r3, #32
 8011060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011064:	40da      	lsrs	r2, r3
 8011066:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801106a:	4013      	ands	r3, r2
 801106c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011070:	e7d4      	b.n	801101c <__hexnan+0xd4>
 8011072:	3f04      	subs	r7, #4
 8011074:	e7d2      	b.n	801101c <__hexnan+0xd4>
 8011076:	2004      	movs	r0, #4
 8011078:	b007      	add	sp, #28
 801107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801107e <__ascii_mbtowc>:
 801107e:	b082      	sub	sp, #8
 8011080:	b901      	cbnz	r1, 8011084 <__ascii_mbtowc+0x6>
 8011082:	a901      	add	r1, sp, #4
 8011084:	b142      	cbz	r2, 8011098 <__ascii_mbtowc+0x1a>
 8011086:	b14b      	cbz	r3, 801109c <__ascii_mbtowc+0x1e>
 8011088:	7813      	ldrb	r3, [r2, #0]
 801108a:	600b      	str	r3, [r1, #0]
 801108c:	7812      	ldrb	r2, [r2, #0]
 801108e:	1e10      	subs	r0, r2, #0
 8011090:	bf18      	it	ne
 8011092:	2001      	movne	r0, #1
 8011094:	b002      	add	sp, #8
 8011096:	4770      	bx	lr
 8011098:	4610      	mov	r0, r2
 801109a:	e7fb      	b.n	8011094 <__ascii_mbtowc+0x16>
 801109c:	f06f 0001 	mvn.w	r0, #1
 80110a0:	e7f8      	b.n	8011094 <__ascii_mbtowc+0x16>

080110a2 <__ascii_wctomb>:
 80110a2:	b149      	cbz	r1, 80110b8 <__ascii_wctomb+0x16>
 80110a4:	2aff      	cmp	r2, #255	; 0xff
 80110a6:	bf85      	ittet	hi
 80110a8:	238a      	movhi	r3, #138	; 0x8a
 80110aa:	6003      	strhi	r3, [r0, #0]
 80110ac:	700a      	strbls	r2, [r1, #0]
 80110ae:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80110b2:	bf98      	it	ls
 80110b4:	2001      	movls	r0, #1
 80110b6:	4770      	bx	lr
 80110b8:	4608      	mov	r0, r1
 80110ba:	4770      	bx	lr

080110bc <fiprintf>:
 80110bc:	b40e      	push	{r1, r2, r3}
 80110be:	b503      	push	{r0, r1, lr}
 80110c0:	4601      	mov	r1, r0
 80110c2:	ab03      	add	r3, sp, #12
 80110c4:	4805      	ldr	r0, [pc, #20]	; (80110dc <fiprintf+0x20>)
 80110c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ca:	6800      	ldr	r0, [r0, #0]
 80110cc:	9301      	str	r3, [sp, #4]
 80110ce:	f000 f837 	bl	8011140 <_vfiprintf_r>
 80110d2:	b002      	add	sp, #8
 80110d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80110d8:	b003      	add	sp, #12
 80110da:	4770      	bx	lr
 80110dc:	20000068 	.word	0x20000068

080110e0 <abort>:
 80110e0:	b508      	push	{r3, lr}
 80110e2:	2006      	movs	r0, #6
 80110e4:	f000 fa04 	bl	80114f0 <raise>
 80110e8:	2001      	movs	r0, #1
 80110ea:	f7f5 ff37 	bl	8006f5c <_exit>

080110ee <__sfputc_r>:
 80110ee:	6893      	ldr	r3, [r2, #8]
 80110f0:	3b01      	subs	r3, #1
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	b410      	push	{r4}
 80110f6:	6093      	str	r3, [r2, #8]
 80110f8:	da08      	bge.n	801110c <__sfputc_r+0x1e>
 80110fa:	6994      	ldr	r4, [r2, #24]
 80110fc:	42a3      	cmp	r3, r4
 80110fe:	db01      	blt.n	8011104 <__sfputc_r+0x16>
 8011100:	290a      	cmp	r1, #10
 8011102:	d103      	bne.n	801110c <__sfputc_r+0x1e>
 8011104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011108:	f000 b934 	b.w	8011374 <__swbuf_r>
 801110c:	6813      	ldr	r3, [r2, #0]
 801110e:	1c58      	adds	r0, r3, #1
 8011110:	6010      	str	r0, [r2, #0]
 8011112:	7019      	strb	r1, [r3, #0]
 8011114:	4608      	mov	r0, r1
 8011116:	f85d 4b04 	ldr.w	r4, [sp], #4
 801111a:	4770      	bx	lr

0801111c <__sfputs_r>:
 801111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801111e:	4606      	mov	r6, r0
 8011120:	460f      	mov	r7, r1
 8011122:	4614      	mov	r4, r2
 8011124:	18d5      	adds	r5, r2, r3
 8011126:	42ac      	cmp	r4, r5
 8011128:	d101      	bne.n	801112e <__sfputs_r+0x12>
 801112a:	2000      	movs	r0, #0
 801112c:	e007      	b.n	801113e <__sfputs_r+0x22>
 801112e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011132:	463a      	mov	r2, r7
 8011134:	4630      	mov	r0, r6
 8011136:	f7ff ffda 	bl	80110ee <__sfputc_r>
 801113a:	1c43      	adds	r3, r0, #1
 801113c:	d1f3      	bne.n	8011126 <__sfputs_r+0xa>
 801113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011140 <_vfiprintf_r>:
 8011140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011144:	460d      	mov	r5, r1
 8011146:	b09d      	sub	sp, #116	; 0x74
 8011148:	4614      	mov	r4, r2
 801114a:	4698      	mov	r8, r3
 801114c:	4606      	mov	r6, r0
 801114e:	b118      	cbz	r0, 8011158 <_vfiprintf_r+0x18>
 8011150:	6a03      	ldr	r3, [r0, #32]
 8011152:	b90b      	cbnz	r3, 8011158 <_vfiprintf_r+0x18>
 8011154:	f7fc fdc8 	bl	800dce8 <__sinit>
 8011158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801115a:	07d9      	lsls	r1, r3, #31
 801115c:	d405      	bmi.n	801116a <_vfiprintf_r+0x2a>
 801115e:	89ab      	ldrh	r3, [r5, #12]
 8011160:	059a      	lsls	r2, r3, #22
 8011162:	d402      	bmi.n	801116a <_vfiprintf_r+0x2a>
 8011164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011166:	f7fc fed6 	bl	800df16 <__retarget_lock_acquire_recursive>
 801116a:	89ab      	ldrh	r3, [r5, #12]
 801116c:	071b      	lsls	r3, r3, #28
 801116e:	d501      	bpl.n	8011174 <_vfiprintf_r+0x34>
 8011170:	692b      	ldr	r3, [r5, #16]
 8011172:	b99b      	cbnz	r3, 801119c <_vfiprintf_r+0x5c>
 8011174:	4629      	mov	r1, r5
 8011176:	4630      	mov	r0, r6
 8011178:	f000 f93a 	bl	80113f0 <__swsetup_r>
 801117c:	b170      	cbz	r0, 801119c <_vfiprintf_r+0x5c>
 801117e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011180:	07dc      	lsls	r4, r3, #31
 8011182:	d504      	bpl.n	801118e <_vfiprintf_r+0x4e>
 8011184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011188:	b01d      	add	sp, #116	; 0x74
 801118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801118e:	89ab      	ldrh	r3, [r5, #12]
 8011190:	0598      	lsls	r0, r3, #22
 8011192:	d4f7      	bmi.n	8011184 <_vfiprintf_r+0x44>
 8011194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011196:	f7fc febf 	bl	800df18 <__retarget_lock_release_recursive>
 801119a:	e7f3      	b.n	8011184 <_vfiprintf_r+0x44>
 801119c:	2300      	movs	r3, #0
 801119e:	9309      	str	r3, [sp, #36]	; 0x24
 80111a0:	2320      	movs	r3, #32
 80111a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80111aa:	2330      	movs	r3, #48	; 0x30
 80111ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011360 <_vfiprintf_r+0x220>
 80111b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111b4:	f04f 0901 	mov.w	r9, #1
 80111b8:	4623      	mov	r3, r4
 80111ba:	469a      	mov	sl, r3
 80111bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111c0:	b10a      	cbz	r2, 80111c6 <_vfiprintf_r+0x86>
 80111c2:	2a25      	cmp	r2, #37	; 0x25
 80111c4:	d1f9      	bne.n	80111ba <_vfiprintf_r+0x7a>
 80111c6:	ebba 0b04 	subs.w	fp, sl, r4
 80111ca:	d00b      	beq.n	80111e4 <_vfiprintf_r+0xa4>
 80111cc:	465b      	mov	r3, fp
 80111ce:	4622      	mov	r2, r4
 80111d0:	4629      	mov	r1, r5
 80111d2:	4630      	mov	r0, r6
 80111d4:	f7ff ffa2 	bl	801111c <__sfputs_r>
 80111d8:	3001      	adds	r0, #1
 80111da:	f000 80a9 	beq.w	8011330 <_vfiprintf_r+0x1f0>
 80111de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111e0:	445a      	add	r2, fp
 80111e2:	9209      	str	r2, [sp, #36]	; 0x24
 80111e4:	f89a 3000 	ldrb.w	r3, [sl]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	f000 80a1 	beq.w	8011330 <_vfiprintf_r+0x1f0>
 80111ee:	2300      	movs	r3, #0
 80111f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111f8:	f10a 0a01 	add.w	sl, sl, #1
 80111fc:	9304      	str	r3, [sp, #16]
 80111fe:	9307      	str	r3, [sp, #28]
 8011200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011204:	931a      	str	r3, [sp, #104]	; 0x68
 8011206:	4654      	mov	r4, sl
 8011208:	2205      	movs	r2, #5
 801120a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801120e:	4854      	ldr	r0, [pc, #336]	; (8011360 <_vfiprintf_r+0x220>)
 8011210:	f7ee fffe 	bl	8000210 <memchr>
 8011214:	9a04      	ldr	r2, [sp, #16]
 8011216:	b9d8      	cbnz	r0, 8011250 <_vfiprintf_r+0x110>
 8011218:	06d1      	lsls	r1, r2, #27
 801121a:	bf44      	itt	mi
 801121c:	2320      	movmi	r3, #32
 801121e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011222:	0713      	lsls	r3, r2, #28
 8011224:	bf44      	itt	mi
 8011226:	232b      	movmi	r3, #43	; 0x2b
 8011228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801122c:	f89a 3000 	ldrb.w	r3, [sl]
 8011230:	2b2a      	cmp	r3, #42	; 0x2a
 8011232:	d015      	beq.n	8011260 <_vfiprintf_r+0x120>
 8011234:	9a07      	ldr	r2, [sp, #28]
 8011236:	4654      	mov	r4, sl
 8011238:	2000      	movs	r0, #0
 801123a:	f04f 0c0a 	mov.w	ip, #10
 801123e:	4621      	mov	r1, r4
 8011240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011244:	3b30      	subs	r3, #48	; 0x30
 8011246:	2b09      	cmp	r3, #9
 8011248:	d94d      	bls.n	80112e6 <_vfiprintf_r+0x1a6>
 801124a:	b1b0      	cbz	r0, 801127a <_vfiprintf_r+0x13a>
 801124c:	9207      	str	r2, [sp, #28]
 801124e:	e014      	b.n	801127a <_vfiprintf_r+0x13a>
 8011250:	eba0 0308 	sub.w	r3, r0, r8
 8011254:	fa09 f303 	lsl.w	r3, r9, r3
 8011258:	4313      	orrs	r3, r2
 801125a:	9304      	str	r3, [sp, #16]
 801125c:	46a2      	mov	sl, r4
 801125e:	e7d2      	b.n	8011206 <_vfiprintf_r+0xc6>
 8011260:	9b03      	ldr	r3, [sp, #12]
 8011262:	1d19      	adds	r1, r3, #4
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	9103      	str	r1, [sp, #12]
 8011268:	2b00      	cmp	r3, #0
 801126a:	bfbb      	ittet	lt
 801126c:	425b      	neglt	r3, r3
 801126e:	f042 0202 	orrlt.w	r2, r2, #2
 8011272:	9307      	strge	r3, [sp, #28]
 8011274:	9307      	strlt	r3, [sp, #28]
 8011276:	bfb8      	it	lt
 8011278:	9204      	strlt	r2, [sp, #16]
 801127a:	7823      	ldrb	r3, [r4, #0]
 801127c:	2b2e      	cmp	r3, #46	; 0x2e
 801127e:	d10c      	bne.n	801129a <_vfiprintf_r+0x15a>
 8011280:	7863      	ldrb	r3, [r4, #1]
 8011282:	2b2a      	cmp	r3, #42	; 0x2a
 8011284:	d134      	bne.n	80112f0 <_vfiprintf_r+0x1b0>
 8011286:	9b03      	ldr	r3, [sp, #12]
 8011288:	1d1a      	adds	r2, r3, #4
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	9203      	str	r2, [sp, #12]
 801128e:	2b00      	cmp	r3, #0
 8011290:	bfb8      	it	lt
 8011292:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011296:	3402      	adds	r4, #2
 8011298:	9305      	str	r3, [sp, #20]
 801129a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011370 <_vfiprintf_r+0x230>
 801129e:	7821      	ldrb	r1, [r4, #0]
 80112a0:	2203      	movs	r2, #3
 80112a2:	4650      	mov	r0, sl
 80112a4:	f7ee ffb4 	bl	8000210 <memchr>
 80112a8:	b138      	cbz	r0, 80112ba <_vfiprintf_r+0x17a>
 80112aa:	9b04      	ldr	r3, [sp, #16]
 80112ac:	eba0 000a 	sub.w	r0, r0, sl
 80112b0:	2240      	movs	r2, #64	; 0x40
 80112b2:	4082      	lsls	r2, r0
 80112b4:	4313      	orrs	r3, r2
 80112b6:	3401      	adds	r4, #1
 80112b8:	9304      	str	r3, [sp, #16]
 80112ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112be:	4829      	ldr	r0, [pc, #164]	; (8011364 <_vfiprintf_r+0x224>)
 80112c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112c4:	2206      	movs	r2, #6
 80112c6:	f7ee ffa3 	bl	8000210 <memchr>
 80112ca:	2800      	cmp	r0, #0
 80112cc:	d03f      	beq.n	801134e <_vfiprintf_r+0x20e>
 80112ce:	4b26      	ldr	r3, [pc, #152]	; (8011368 <_vfiprintf_r+0x228>)
 80112d0:	bb1b      	cbnz	r3, 801131a <_vfiprintf_r+0x1da>
 80112d2:	9b03      	ldr	r3, [sp, #12]
 80112d4:	3307      	adds	r3, #7
 80112d6:	f023 0307 	bic.w	r3, r3, #7
 80112da:	3308      	adds	r3, #8
 80112dc:	9303      	str	r3, [sp, #12]
 80112de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112e0:	443b      	add	r3, r7
 80112e2:	9309      	str	r3, [sp, #36]	; 0x24
 80112e4:	e768      	b.n	80111b8 <_vfiprintf_r+0x78>
 80112e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80112ea:	460c      	mov	r4, r1
 80112ec:	2001      	movs	r0, #1
 80112ee:	e7a6      	b.n	801123e <_vfiprintf_r+0xfe>
 80112f0:	2300      	movs	r3, #0
 80112f2:	3401      	adds	r4, #1
 80112f4:	9305      	str	r3, [sp, #20]
 80112f6:	4619      	mov	r1, r3
 80112f8:	f04f 0c0a 	mov.w	ip, #10
 80112fc:	4620      	mov	r0, r4
 80112fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011302:	3a30      	subs	r2, #48	; 0x30
 8011304:	2a09      	cmp	r2, #9
 8011306:	d903      	bls.n	8011310 <_vfiprintf_r+0x1d0>
 8011308:	2b00      	cmp	r3, #0
 801130a:	d0c6      	beq.n	801129a <_vfiprintf_r+0x15a>
 801130c:	9105      	str	r1, [sp, #20]
 801130e:	e7c4      	b.n	801129a <_vfiprintf_r+0x15a>
 8011310:	fb0c 2101 	mla	r1, ip, r1, r2
 8011314:	4604      	mov	r4, r0
 8011316:	2301      	movs	r3, #1
 8011318:	e7f0      	b.n	80112fc <_vfiprintf_r+0x1bc>
 801131a:	ab03      	add	r3, sp, #12
 801131c:	9300      	str	r3, [sp, #0]
 801131e:	462a      	mov	r2, r5
 8011320:	4b12      	ldr	r3, [pc, #72]	; (801136c <_vfiprintf_r+0x22c>)
 8011322:	a904      	add	r1, sp, #16
 8011324:	4630      	mov	r0, r6
 8011326:	f7fb fe7d 	bl	800d024 <_printf_float>
 801132a:	4607      	mov	r7, r0
 801132c:	1c78      	adds	r0, r7, #1
 801132e:	d1d6      	bne.n	80112de <_vfiprintf_r+0x19e>
 8011330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011332:	07d9      	lsls	r1, r3, #31
 8011334:	d405      	bmi.n	8011342 <_vfiprintf_r+0x202>
 8011336:	89ab      	ldrh	r3, [r5, #12]
 8011338:	059a      	lsls	r2, r3, #22
 801133a:	d402      	bmi.n	8011342 <_vfiprintf_r+0x202>
 801133c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801133e:	f7fc fdeb 	bl	800df18 <__retarget_lock_release_recursive>
 8011342:	89ab      	ldrh	r3, [r5, #12]
 8011344:	065b      	lsls	r3, r3, #25
 8011346:	f53f af1d 	bmi.w	8011184 <_vfiprintf_r+0x44>
 801134a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801134c:	e71c      	b.n	8011188 <_vfiprintf_r+0x48>
 801134e:	ab03      	add	r3, sp, #12
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	462a      	mov	r2, r5
 8011354:	4b05      	ldr	r3, [pc, #20]	; (801136c <_vfiprintf_r+0x22c>)
 8011356:	a904      	add	r1, sp, #16
 8011358:	4630      	mov	r0, r6
 801135a:	f7fc f907 	bl	800d56c <_printf_i>
 801135e:	e7e4      	b.n	801132a <_vfiprintf_r+0x1ea>
 8011360:	08011c99 	.word	0x08011c99
 8011364:	08011ca3 	.word	0x08011ca3
 8011368:	0800d025 	.word	0x0800d025
 801136c:	0801111d 	.word	0x0801111d
 8011370:	08011c9f 	.word	0x08011c9f

08011374 <__swbuf_r>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	460e      	mov	r6, r1
 8011378:	4614      	mov	r4, r2
 801137a:	4605      	mov	r5, r0
 801137c:	b118      	cbz	r0, 8011386 <__swbuf_r+0x12>
 801137e:	6a03      	ldr	r3, [r0, #32]
 8011380:	b90b      	cbnz	r3, 8011386 <__swbuf_r+0x12>
 8011382:	f7fc fcb1 	bl	800dce8 <__sinit>
 8011386:	69a3      	ldr	r3, [r4, #24]
 8011388:	60a3      	str	r3, [r4, #8]
 801138a:	89a3      	ldrh	r3, [r4, #12]
 801138c:	071a      	lsls	r2, r3, #28
 801138e:	d525      	bpl.n	80113dc <__swbuf_r+0x68>
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	b31b      	cbz	r3, 80113dc <__swbuf_r+0x68>
 8011394:	6823      	ldr	r3, [r4, #0]
 8011396:	6922      	ldr	r2, [r4, #16]
 8011398:	1a98      	subs	r0, r3, r2
 801139a:	6963      	ldr	r3, [r4, #20]
 801139c:	b2f6      	uxtb	r6, r6
 801139e:	4283      	cmp	r3, r0
 80113a0:	4637      	mov	r7, r6
 80113a2:	dc04      	bgt.n	80113ae <__swbuf_r+0x3a>
 80113a4:	4621      	mov	r1, r4
 80113a6:	4628      	mov	r0, r5
 80113a8:	f7ff fa72 	bl	8010890 <_fflush_r>
 80113ac:	b9e0      	cbnz	r0, 80113e8 <__swbuf_r+0x74>
 80113ae:	68a3      	ldr	r3, [r4, #8]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	60a3      	str	r3, [r4, #8]
 80113b4:	6823      	ldr	r3, [r4, #0]
 80113b6:	1c5a      	adds	r2, r3, #1
 80113b8:	6022      	str	r2, [r4, #0]
 80113ba:	701e      	strb	r6, [r3, #0]
 80113bc:	6962      	ldr	r2, [r4, #20]
 80113be:	1c43      	adds	r3, r0, #1
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d004      	beq.n	80113ce <__swbuf_r+0x5a>
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	07db      	lsls	r3, r3, #31
 80113c8:	d506      	bpl.n	80113d8 <__swbuf_r+0x64>
 80113ca:	2e0a      	cmp	r6, #10
 80113cc:	d104      	bne.n	80113d8 <__swbuf_r+0x64>
 80113ce:	4621      	mov	r1, r4
 80113d0:	4628      	mov	r0, r5
 80113d2:	f7ff fa5d 	bl	8010890 <_fflush_r>
 80113d6:	b938      	cbnz	r0, 80113e8 <__swbuf_r+0x74>
 80113d8:	4638      	mov	r0, r7
 80113da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113dc:	4621      	mov	r1, r4
 80113de:	4628      	mov	r0, r5
 80113e0:	f000 f806 	bl	80113f0 <__swsetup_r>
 80113e4:	2800      	cmp	r0, #0
 80113e6:	d0d5      	beq.n	8011394 <__swbuf_r+0x20>
 80113e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80113ec:	e7f4      	b.n	80113d8 <__swbuf_r+0x64>
	...

080113f0 <__swsetup_r>:
 80113f0:	b538      	push	{r3, r4, r5, lr}
 80113f2:	4b2a      	ldr	r3, [pc, #168]	; (801149c <__swsetup_r+0xac>)
 80113f4:	4605      	mov	r5, r0
 80113f6:	6818      	ldr	r0, [r3, #0]
 80113f8:	460c      	mov	r4, r1
 80113fa:	b118      	cbz	r0, 8011404 <__swsetup_r+0x14>
 80113fc:	6a03      	ldr	r3, [r0, #32]
 80113fe:	b90b      	cbnz	r3, 8011404 <__swsetup_r+0x14>
 8011400:	f7fc fc72 	bl	800dce8 <__sinit>
 8011404:	89a3      	ldrh	r3, [r4, #12]
 8011406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801140a:	0718      	lsls	r0, r3, #28
 801140c:	d422      	bmi.n	8011454 <__swsetup_r+0x64>
 801140e:	06d9      	lsls	r1, r3, #27
 8011410:	d407      	bmi.n	8011422 <__swsetup_r+0x32>
 8011412:	2309      	movs	r3, #9
 8011414:	602b      	str	r3, [r5, #0]
 8011416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801141a:	81a3      	strh	r3, [r4, #12]
 801141c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011420:	e034      	b.n	801148c <__swsetup_r+0x9c>
 8011422:	0758      	lsls	r0, r3, #29
 8011424:	d512      	bpl.n	801144c <__swsetup_r+0x5c>
 8011426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011428:	b141      	cbz	r1, 801143c <__swsetup_r+0x4c>
 801142a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801142e:	4299      	cmp	r1, r3
 8011430:	d002      	beq.n	8011438 <__swsetup_r+0x48>
 8011432:	4628      	mov	r0, r5
 8011434:	f7fd fc02 	bl	800ec3c <_free_r>
 8011438:	2300      	movs	r3, #0
 801143a:	6363      	str	r3, [r4, #52]	; 0x34
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011442:	81a3      	strh	r3, [r4, #12]
 8011444:	2300      	movs	r3, #0
 8011446:	6063      	str	r3, [r4, #4]
 8011448:	6923      	ldr	r3, [r4, #16]
 801144a:	6023      	str	r3, [r4, #0]
 801144c:	89a3      	ldrh	r3, [r4, #12]
 801144e:	f043 0308 	orr.w	r3, r3, #8
 8011452:	81a3      	strh	r3, [r4, #12]
 8011454:	6923      	ldr	r3, [r4, #16]
 8011456:	b94b      	cbnz	r3, 801146c <__swsetup_r+0x7c>
 8011458:	89a3      	ldrh	r3, [r4, #12]
 801145a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801145e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011462:	d003      	beq.n	801146c <__swsetup_r+0x7c>
 8011464:	4621      	mov	r1, r4
 8011466:	4628      	mov	r0, r5
 8011468:	f000 f884 	bl	8011574 <__smakebuf_r>
 801146c:	89a0      	ldrh	r0, [r4, #12]
 801146e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011472:	f010 0301 	ands.w	r3, r0, #1
 8011476:	d00a      	beq.n	801148e <__swsetup_r+0x9e>
 8011478:	2300      	movs	r3, #0
 801147a:	60a3      	str	r3, [r4, #8]
 801147c:	6963      	ldr	r3, [r4, #20]
 801147e:	425b      	negs	r3, r3
 8011480:	61a3      	str	r3, [r4, #24]
 8011482:	6923      	ldr	r3, [r4, #16]
 8011484:	b943      	cbnz	r3, 8011498 <__swsetup_r+0xa8>
 8011486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801148a:	d1c4      	bne.n	8011416 <__swsetup_r+0x26>
 801148c:	bd38      	pop	{r3, r4, r5, pc}
 801148e:	0781      	lsls	r1, r0, #30
 8011490:	bf58      	it	pl
 8011492:	6963      	ldrpl	r3, [r4, #20]
 8011494:	60a3      	str	r3, [r4, #8]
 8011496:	e7f4      	b.n	8011482 <__swsetup_r+0x92>
 8011498:	2000      	movs	r0, #0
 801149a:	e7f7      	b.n	801148c <__swsetup_r+0x9c>
 801149c:	20000068 	.word	0x20000068

080114a0 <_raise_r>:
 80114a0:	291f      	cmp	r1, #31
 80114a2:	b538      	push	{r3, r4, r5, lr}
 80114a4:	4604      	mov	r4, r0
 80114a6:	460d      	mov	r5, r1
 80114a8:	d904      	bls.n	80114b4 <_raise_r+0x14>
 80114aa:	2316      	movs	r3, #22
 80114ac:	6003      	str	r3, [r0, #0]
 80114ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114b2:	bd38      	pop	{r3, r4, r5, pc}
 80114b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80114b6:	b112      	cbz	r2, 80114be <_raise_r+0x1e>
 80114b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114bc:	b94b      	cbnz	r3, 80114d2 <_raise_r+0x32>
 80114be:	4620      	mov	r0, r4
 80114c0:	f000 f830 	bl	8011524 <_getpid_r>
 80114c4:	462a      	mov	r2, r5
 80114c6:	4601      	mov	r1, r0
 80114c8:	4620      	mov	r0, r4
 80114ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114ce:	f000 b817 	b.w	8011500 <_kill_r>
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d00a      	beq.n	80114ec <_raise_r+0x4c>
 80114d6:	1c59      	adds	r1, r3, #1
 80114d8:	d103      	bne.n	80114e2 <_raise_r+0x42>
 80114da:	2316      	movs	r3, #22
 80114dc:	6003      	str	r3, [r0, #0]
 80114de:	2001      	movs	r0, #1
 80114e0:	e7e7      	b.n	80114b2 <_raise_r+0x12>
 80114e2:	2400      	movs	r4, #0
 80114e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114e8:	4628      	mov	r0, r5
 80114ea:	4798      	blx	r3
 80114ec:	2000      	movs	r0, #0
 80114ee:	e7e0      	b.n	80114b2 <_raise_r+0x12>

080114f0 <raise>:
 80114f0:	4b02      	ldr	r3, [pc, #8]	; (80114fc <raise+0xc>)
 80114f2:	4601      	mov	r1, r0
 80114f4:	6818      	ldr	r0, [r3, #0]
 80114f6:	f7ff bfd3 	b.w	80114a0 <_raise_r>
 80114fa:	bf00      	nop
 80114fc:	20000068 	.word	0x20000068

08011500 <_kill_r>:
 8011500:	b538      	push	{r3, r4, r5, lr}
 8011502:	4d07      	ldr	r5, [pc, #28]	; (8011520 <_kill_r+0x20>)
 8011504:	2300      	movs	r3, #0
 8011506:	4604      	mov	r4, r0
 8011508:	4608      	mov	r0, r1
 801150a:	4611      	mov	r1, r2
 801150c:	602b      	str	r3, [r5, #0]
 801150e:	f7f5 fd15 	bl	8006f3c <_kill>
 8011512:	1c43      	adds	r3, r0, #1
 8011514:	d102      	bne.n	801151c <_kill_r+0x1c>
 8011516:	682b      	ldr	r3, [r5, #0]
 8011518:	b103      	cbz	r3, 801151c <_kill_r+0x1c>
 801151a:	6023      	str	r3, [r4, #0]
 801151c:	bd38      	pop	{r3, r4, r5, pc}
 801151e:	bf00      	nop
 8011520:	20001844 	.word	0x20001844

08011524 <_getpid_r>:
 8011524:	f7f5 bd02 	b.w	8006f2c <_getpid>

08011528 <__swhatbuf_r>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	460c      	mov	r4, r1
 801152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011530:	2900      	cmp	r1, #0
 8011532:	b096      	sub	sp, #88	; 0x58
 8011534:	4615      	mov	r5, r2
 8011536:	461e      	mov	r6, r3
 8011538:	da0d      	bge.n	8011556 <__swhatbuf_r+0x2e>
 801153a:	89a3      	ldrh	r3, [r4, #12]
 801153c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011540:	f04f 0100 	mov.w	r1, #0
 8011544:	bf0c      	ite	eq
 8011546:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801154a:	2340      	movne	r3, #64	; 0x40
 801154c:	2000      	movs	r0, #0
 801154e:	6031      	str	r1, [r6, #0]
 8011550:	602b      	str	r3, [r5, #0]
 8011552:	b016      	add	sp, #88	; 0x58
 8011554:	bd70      	pop	{r4, r5, r6, pc}
 8011556:	466a      	mov	r2, sp
 8011558:	f000 f848 	bl	80115ec <_fstat_r>
 801155c:	2800      	cmp	r0, #0
 801155e:	dbec      	blt.n	801153a <__swhatbuf_r+0x12>
 8011560:	9901      	ldr	r1, [sp, #4]
 8011562:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011566:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801156a:	4259      	negs	r1, r3
 801156c:	4159      	adcs	r1, r3
 801156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011572:	e7eb      	b.n	801154c <__swhatbuf_r+0x24>

08011574 <__smakebuf_r>:
 8011574:	898b      	ldrh	r3, [r1, #12]
 8011576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011578:	079d      	lsls	r5, r3, #30
 801157a:	4606      	mov	r6, r0
 801157c:	460c      	mov	r4, r1
 801157e:	d507      	bpl.n	8011590 <__smakebuf_r+0x1c>
 8011580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011584:	6023      	str	r3, [r4, #0]
 8011586:	6123      	str	r3, [r4, #16]
 8011588:	2301      	movs	r3, #1
 801158a:	6163      	str	r3, [r4, #20]
 801158c:	b002      	add	sp, #8
 801158e:	bd70      	pop	{r4, r5, r6, pc}
 8011590:	ab01      	add	r3, sp, #4
 8011592:	466a      	mov	r2, sp
 8011594:	f7ff ffc8 	bl	8011528 <__swhatbuf_r>
 8011598:	9900      	ldr	r1, [sp, #0]
 801159a:	4605      	mov	r5, r0
 801159c:	4630      	mov	r0, r6
 801159e:	f7fd fbc1 	bl	800ed24 <_malloc_r>
 80115a2:	b948      	cbnz	r0, 80115b8 <__smakebuf_r+0x44>
 80115a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115a8:	059a      	lsls	r2, r3, #22
 80115aa:	d4ef      	bmi.n	801158c <__smakebuf_r+0x18>
 80115ac:	f023 0303 	bic.w	r3, r3, #3
 80115b0:	f043 0302 	orr.w	r3, r3, #2
 80115b4:	81a3      	strh	r3, [r4, #12]
 80115b6:	e7e3      	b.n	8011580 <__smakebuf_r+0xc>
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	6020      	str	r0, [r4, #0]
 80115bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115c0:	81a3      	strh	r3, [r4, #12]
 80115c2:	9b00      	ldr	r3, [sp, #0]
 80115c4:	6163      	str	r3, [r4, #20]
 80115c6:	9b01      	ldr	r3, [sp, #4]
 80115c8:	6120      	str	r0, [r4, #16]
 80115ca:	b15b      	cbz	r3, 80115e4 <__smakebuf_r+0x70>
 80115cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115d0:	4630      	mov	r0, r6
 80115d2:	f000 f81d 	bl	8011610 <_isatty_r>
 80115d6:	b128      	cbz	r0, 80115e4 <__smakebuf_r+0x70>
 80115d8:	89a3      	ldrh	r3, [r4, #12]
 80115da:	f023 0303 	bic.w	r3, r3, #3
 80115de:	f043 0301 	orr.w	r3, r3, #1
 80115e2:	81a3      	strh	r3, [r4, #12]
 80115e4:	89a3      	ldrh	r3, [r4, #12]
 80115e6:	431d      	orrs	r5, r3
 80115e8:	81a5      	strh	r5, [r4, #12]
 80115ea:	e7cf      	b.n	801158c <__smakebuf_r+0x18>

080115ec <_fstat_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d07      	ldr	r5, [pc, #28]	; (801160c <_fstat_r+0x20>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	4611      	mov	r1, r2
 80115f8:	602b      	str	r3, [r5, #0]
 80115fa:	f7f5 fcfe 	bl	8006ffa <_fstat>
 80115fe:	1c43      	adds	r3, r0, #1
 8011600:	d102      	bne.n	8011608 <_fstat_r+0x1c>
 8011602:	682b      	ldr	r3, [r5, #0]
 8011604:	b103      	cbz	r3, 8011608 <_fstat_r+0x1c>
 8011606:	6023      	str	r3, [r4, #0]
 8011608:	bd38      	pop	{r3, r4, r5, pc}
 801160a:	bf00      	nop
 801160c:	20001844 	.word	0x20001844

08011610 <_isatty_r>:
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	4d06      	ldr	r5, [pc, #24]	; (801162c <_isatty_r+0x1c>)
 8011614:	2300      	movs	r3, #0
 8011616:	4604      	mov	r4, r0
 8011618:	4608      	mov	r0, r1
 801161a:	602b      	str	r3, [r5, #0]
 801161c:	f7f5 fcfd 	bl	800701a <_isatty>
 8011620:	1c43      	adds	r3, r0, #1
 8011622:	d102      	bne.n	801162a <_isatty_r+0x1a>
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	b103      	cbz	r3, 801162a <_isatty_r+0x1a>
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	bd38      	pop	{r3, r4, r5, pc}
 801162c:	20001844 	.word	0x20001844

08011630 <_init>:
 8011630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011632:	bf00      	nop
 8011634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011636:	bc08      	pop	{r3}
 8011638:	469e      	mov	lr, r3
 801163a:	4770      	bx	lr

0801163c <_fini>:
 801163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163e:	bf00      	nop
 8011640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011642:	bc08      	pop	{r3}
 8011644:	469e      	mov	lr, r3
 8011646:	4770      	bx	lr
